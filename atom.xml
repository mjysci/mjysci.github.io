<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>名实合为</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.mjyai.com/"/>
  <updated>2020-06-15T01:02:25.551Z</updated>
  <id>https://blog.mjyai.com/</id>
  
  <author>
    <name>mjy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>conda环境下ffmpeg使用x264编码</title>
    <link href="https://blog.mjyai.com/2020/06/15/conda-ffmpeg-x264/"/>
    <id>https://blog.mjyai.com/2020/06/15/conda-ffmpeg-x264/</id>
    <published>2020-06-14T23:24:29.000Z</published>
    <updated>2020-06-15T01:02:25.551Z</updated>
    
    <content type="html"><![CDATA[<p>主要是解决<code>Unknown encoder &#39;libx264&#39;</code>的问题。亦涉及<code>ffmpeg</code>常用命令和参数的解释。<br><a id="more"></a><br>通过ffmpeg转换为视频格式x264（-vcodec libx264）执行时报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg version 4.0 Copyright (c) 2000-2018 the FFmpeg developers</span><br><span class="line">  built with gcc 7.2.0 (crosstool-NG fa8859cb)</span><br><span class="line">  configuration: --prefix&#x3D;&#x2F;home&#x2F;mjy&#x2F;miniconda3 --cc&#x3D;&#x2F;opt&#x2F;conda&#x2F;conda-bld&#x2F;ffmpeg_1531088893642&#x2F;_build_env&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-cc --disable-doc --enable-shared --enable-static --enable-zlib --enable-pic --enable-gpl --enable-version3 --disable-nonfree --enable-hardcoded-tables --enable-avresample --enable-libfreetype --disable-openssl --disable-gnutls --enable-libvpx --enable-pthreads --enable-libopus --enable-postproc --disable-libx264</span><br><span class="line">  libavutil      56. 14.100 &#x2F; 56. 14.100</span><br><span class="line">  libavcodec     58. 18.100 &#x2F; 58. 18.100</span><br><span class="line">  libavformat    58. 12.100 &#x2F; 58. 12.100</span><br><span class="line">  libavdevice    58.  3.100 &#x2F; 58.  3.100</span><br><span class="line">  libavfilter     7. 16.100 &#x2F;  7. 16.100</span><br><span class="line">  libavresample   4.  0.  0 &#x2F;  4.  0.  0</span><br><span class="line">  libswscale      5.  1.100 &#x2F;  5.  1.100</span><br><span class="line">  libswresample   3.  1.100 &#x2F;  3.  1.100</span><br><span class="line">  libpostproc    55.  1.100 &#x2F; 55.  1.100</span><br><span class="line">Input #0, image2, from &#39;res&#x2F;mg_refine_0851&#x2F;%05d.png&#39;:</span><br><span class="line">  Duration: 00:00:05.00, start: 0.000000, bitrate: N&#x2F;A</span><br><span class="line">    Stream #0:0: Video: png, rgb24(pc), 1920x1080, 25 tbr, 25 tbn, 25 tbc</span><br><span class="line">Unknown encoder &#39;libx264&#39;</span><br></pre></td></tr></table></figure><br>注意其中<code>--disable-libx264</code>，说明这个版本的二进制包中ffmpeg编译时并未启用<code>libx264</code>。</p><h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><h2 id="重装conda下特定版本ffmpeg和x264包"><a href="#重装conda下特定版本ffmpeg和x264包" class="headerlink" title="重装conda下特定版本ffmpeg和x264包"></a>重装conda下特定版本ffmpeg和x264包</h2><p>试了<code>conda install x264==&#39;1!152.20180717&#39; ffmpeg=4.0.2 -c conda-forge</code>但conda-forge中删掉了特定版本，无法安装。<br>然后尝试<code>conda install x264 ffmpeg -c conda-forge</code>但安装后依然是<code>--disable-libx264</code>。  </p><h2 id="从源码编译"><a href="#从源码编译" class="headerlink" title="从源码编译"></a>从源码编译</h2><p>ubuntu18.04可直接安装<code>nasm</code>。如果操作系统自带包管理提供的nasm版本低于<code>2.13.02</code>，则可在<a href="http://www.nasm.us/pub/nasm/releasebuilds/?C=M;O=D" target="_blank" rel="noopener">这里</a>下载源码并编译。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nasm</span><br></pre></td></tr></table></figure><br>克隆<code>x264</code>源码并编译安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://code.videolan.org/videolan/x264.git</span><br><span class="line"><span class="built_in">cd</span> x264</span><br><span class="line">./configure --<span class="built_in">enable</span>-static --<span class="built_in">enable</span>-shared</span><br><span class="line">make -j8</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><br>下载<a href="http://sourceforge.net/projects/lame/files/lame/" target="_blank" rel="noopener">LAME源码</a>并编译安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> lame-3.100/</span><br><span class="line">./configure</span><br><span class="line">make -j8</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><br>克隆ffmepg源码并编译安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://source.ffmpeg.org/ffmpeg.git</span><br><span class="line"><span class="built_in">cd</span> ffmpeg</span><br><span class="line"></span><br><span class="line">./configure  --<span class="built_in">enable</span>-gpl   --<span class="built_in">enable</span>-libass   --<span class="built_in">enable</span>-libfdk-aac   --<span class="built_in">enable</span>-libfreetype   --<span class="built_in">enable</span>-libmp3lame   --<span class="built_in">enable</span>-libopus   --<span class="built_in">enable</span>-libtheora   --<span class="built_in">enable</span>-libvorbis   --<span class="built_in">enable</span>-libvpx   --<span class="built_in">enable</span>-libx264   --<span class="built_in">enable</span>-nonfree --<span class="built_in">enable</span>-shared --<span class="built_in">enable</span>-openssl   </span><br><span class="line"></span><br><span class="line">make -j8</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><br>以上是针对linux系统环境下ffmpeg的编译使用，但conda环境下依然报错<code>Unknown encoder &#39;libx264&#39;</code>，解决方法见下一节。  </p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>问题很简单，安装conda后系统环境被conda的<code>base</code>所取代，调用<code>ffmpeg</code>时优先是conda子环境下ffmpeg包的安装位置。可以用<code>conda remove ffmpeg</code>删掉，这样就会调用系统安装的<code>ffmpeg</code>。<br>如果不想删掉conda的ffmpeg，只是临时使用编译的ffmpeg，可以直接指定ffmepg的位置。ubuntu通过包管理<code>apt</code>安装的位于<code>/usr/bin/ffmpeg</code>，而从源码编译的则安装在<code>/usr/local/bin/ffmpeg</code>。<br>对于ubuntu18.04来说，<strong>无需编译</strong>，使用<code>sudo apt install ffmpeg</code>安装的<code>3.4.6</code>版即可使用<code>x264</code>编码。  </p><h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="ffmpeg-error-while-loading-shared-libraries-libavdevice-so-57-cannot-open-shared-object-file-No-such-file-or-directory"><a href="#ffmpeg-error-while-loading-shared-libraries-libavdevice-so-57-cannot-open-shared-object-file-No-such-file-or-directory" class="headerlink" title="ffmpeg: error while loading shared libraries: libavdevice.so.57: cannot open shared object file: No such file or directory"></a>ffmpeg: error while loading shared libraries: libavdevice.so.57: cannot open shared object file: No such file or directory</h2><p>从源码编译的ffmpeg其相关lib是安装在<code>/usr/local/lib</code>，如不确定可以通过<code>find</code>查找具体位置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -name libavdevice.so.57</span><br></pre></td></tr></table></figure><br>然后将其添加到lib path，在<code>/etc/ld.so.conf</code>下添加一行<code>/usr/local/lib</code>。其实比较正统的做法是在<code>/etc/ld.so.conf.d/</code>文件夹下新建<code>ffmpeg.conf</code>，添加一行<code>/usr/local/lib</code>并将其include至<code>/etc/ld.so.conf</code>。<br>使修改生效。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="ffmpeg将视频转为png图片"><a href="#ffmpeg将视频转为png图片" class="headerlink" title="ffmpeg将视频转为png图片"></a>ffmpeg将视频转为png图片</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i example.mp4   output/%05d.png</span><br></pre></td></tr></table></figure><p>在进行视频处理时有的任务需要先把视频转为图片逐帧处理，<code>jpg</code>有损，<code>bmp</code>无压缩体积过大。故采用无损压缩的<code>png</code>格式。其中图片的文件名格式为<code>%5d</code>，即从<code>00001</code>开始递增。  </p><h2 id="ffmpeg将png图片转为视频"><a href="#ffmpeg将png图片转为视频" class="headerlink" title="ffmpeg将png图片转为视频"></a>ffmpeg将png图片转为视频</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -start_number 1 -i output/%05d.png -c:v libx264 -preset slow -x264-params qp=0 -psnr -y example.mp4</span><br></pre></td></tr></table></figure><p>参数解释：<br><code>-start_number</code>：开始处理的首个图片编号。<br><code>-c:v</code>：指定编码。<br><code>-preset</code>：预设设置，此处选<code>slow</code>会提升一点压缩率。<br><code>-x264-params</code>：用来修改预设参数，此处<code>qp=0</code>为设置无损。不少地方建议用<code>crf</code>控制质量，因为同等大小下比<code>qp</code>优异，但对于无损来说，8bit和10bit的crf无损设定值不一样，故无损建议设为<code>qp=0</code>。<br><code>-psnr</code>：计算压缩帧的<a href="https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio" target="_blank" rel="noopener">PSNR值</a>。是开发调试用的参考，一般用不上。  </p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://stackoverflow.com/questions/9764740/unknown-encoder-libx264" target="_blank" rel="noopener">Unknown encoder ‘libx264’</a><br><a href="https://stackoverflow.com/questions/12901706/ffmpeg-error-in-linux" target="_blank" rel="noopener">Ffmpeg error in linux [closed]</a><br><a href="https://ffmpeg.org/ffmpeg.html" target="_blank" rel="noopener">ffmpeg Documentation</a><br><a href="https://trac.ffmpeg.org/wiki/Encode/H.264" target="_blank" rel="noopener">FFmpeg Wiki:Encode/H.264</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要是解决&lt;code&gt;Unknown encoder &amp;#39;libx264&amp;#39;&lt;/code&gt;的问题。亦涉及&lt;code&gt;ffmpeg&lt;/code&gt;常用命令和参数的解释。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="conda" scheme="https://blog.mjyai.com/tags/conda/"/>
    
      <category term="encode" scheme="https://blog.mjyai.com/tags/encode/"/>
    
  </entry>
  
  <entry>
    <title>Win10安装WSL2及Ubuntu20.04子系统</title>
    <link href="https://blog.mjyai.com/2020/06/01/win10-wsl2-ubuntu/"/>
    <id>https://blog.mjyai.com/2020/06/01/win10-wsl2-ubuntu/</id>
    <published>2020-06-01T00:23:12.000Z</published>
    <updated>2020-06-03T01:55:15.889Z</updated>
    
    <content type="html"><![CDATA[<p>本以为是小菜一碟，但还是遇到了WslRegisterDistribution failed和参考的对象类型不支持尝试的操作的坑，故记录一下。<br><a id="more"></a></p><h1 id="为什么要升级到WSL2"><a href="#为什么要升级到WSL2" class="headerlink" title="为什么要升级到WSL2"></a>为什么要升级到WSL2</h1><p>WSL2主要是增加了完整的Linux内核和完全的系统调用兼容性，此外不再需要VM Ware和VirtualBox，而是将VM集成在后台管理和运行亦有助于提升性能节省资源。关于WSL2和1的详细比较<a href="https://docs.microsoft.com/en-us/windows/wsl/compare-versions" target="_blank" rel="noopener">见此处</a>。</p><h1 id="强制升级Win10"><a href="#强制升级Win10" class="headerlink" title="强制升级Win10"></a>强制升级Win10</h1><p>WSL2要求Win10为目前最新的2020五月版(Build 19041)，部分设备已经推送了系统更新，到控制面板的<code>Windows更新</code>处可以自动更新。而没有推送的设备官方建议是加入<a href="https://insider.windows.com/" target="_blank" rel="noopener">Windows Insider</a>，但副作用是更新推送频繁，成了测试版的小白鼠。也有人建议<a href="https://www.microsoft.com/zh-cn/software-download/windows10ISO" target="_blank" rel="noopener">下载ISO镜像</a>来升级。<br>个人建议直接下载<a href="https://www.microsoft.com/zh-cn/software-download/windows10" target="_blank" rel="noopener">易升</a>，比镜像快，亦无需接受Insider的推送。  </p><h1 id="安装WSL2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a>安装WSL2</h1><h2 id="安装WSL"><a href="#安装WSL" class="headerlink" title="安装WSL"></a>安装WSL</h2><p>以管理员身份运行PowerShell。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:Microsoft-Windows-Subsystem-Linux &#x2F;all &#x2F;norestart</span><br></pre></td></tr></table></figure></p><h2 id="开启虚拟机平台组件"><a href="#开启虚拟机平台组件" class="headerlink" title="开启虚拟机平台组件"></a>开启虚拟机平台组件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:VirtualMachinePlatform &#x2F;all &#x2F;norestart</span><br></pre></td></tr></table></figure><h2 id="设定WSL2为默认版本"><a href="#设定WSL2为默认版本" class="headerlink" title="设定WSL2为默认版本"></a>设定WSL2为默认版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><h1 id="安装Ubuntu20-04"><a href="#安装Ubuntu20-04" class="headerlink" title="安装Ubuntu20.04"></a>安装Ubuntu20.04</h1><p>在<a href="https://www.microsoft.com/zh-cn/p/ubuntu-2004-lts/9n6svws3rx71?rtc=1" target="_blank" rel="noopener">Microsoft Store</a>直接获取即可。    </p><h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><h2 id="WslRegisterDistribution-failed-with-error-0x800706ba"><a href="#WslRegisterDistribution-failed-with-error-0x800706ba" class="headerlink" title="WslRegisterDistribution failed with error: 0x800706ba"></a>WslRegisterDistribution failed with error: 0x800706ba</h2><p>下载后第一次运行Ubuntu报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Installing, this may take a few minutes...</span><br><span class="line">WslRegisterDistribution failed with error: 0x800706ba</span><br><span class="line">Error: 0x800706ba The RPC server is unavailable.</span><br><span class="line"></span><br><span class="line">Press any key to continue...</span><br></pre></td></tr></table></figure><br>产生这个错误有两个可能的原因：  </p><h3 id="LxssManager未正常运行。"><a href="#LxssManager未正常运行。" class="headerlink" title="LxssManager未正常运行。"></a>LxssManager未正常运行。</h3><p>以管理员身份运行<code>cmd</code>。重启该服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc stop LxssManager</span><br><span class="line">sc start LxssManager</span><br></pre></td></tr></table></figure><br>之后可以通过<code>sc query LxssManager</code>检查服务运行状况。  </p><h3 id="DNS-Client未运行。"><a href="#DNS-Client未运行。" class="headerlink" title="DNS Client未运行。"></a>DNS Client未运行。</h3><p>运行<code>service.msc</code>查看该服务状态，若没有运行则开启服务。<br>但有可能碰到服务状态下的按钮为灰色不可更改的情况。此时需要修改注册表。<br>运行<code>regedit</code>，转到<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\Dnscache</code>目录下。将<code>Start</code>的值由<code>4</code>（禁用）改为<code>2</code>（自动）。<br>重启系统。  </p><h2 id="参考的对象类型不支持尝试的操作"><a href="#参考的对象类型不支持尝试的操作" class="headerlink" title="参考的对象类型不支持尝试的操作"></a>参考的对象类型不支持尝试的操作</h2><p>第一次启动Ubuntu后无法创建新用户，显示<code>参考的对象类型不支持尝试的操作</code>（The attempted operation is not supported for the type of object referenced.）。<br>以管理员身份运行<code>cmd</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winsock reset</span><br></pre></td></tr></table></figure><br>原因是WSL的通信和<code>Proxifier</code>通过Winsock LSP抓取TCP连接产生冲突。<br>如果重置winsock则wsl正常但Proxifer无法工作。<a href="https://github.com/microsoft/WSL/issues/4177#issuecomment-597736482" target="_blank" rel="noopener">Proxifier的开发者提供的解决办法</a>如下：<br>下载<a href="http://www.proxifier.com/tmp/Test20200228/NoLsp.exe" target="_blank" rel="noopener">http://www.proxifier.com/tmp/Test20200228/NoLsp.exe</a>。<br>以管理员身份运行<code>cmd</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NoLsp.exe c:\windows\system32\wsl.exe</span><br></pre></td></tr></table></figure><br>使得wsl绕开Proxifer修改过的LSP。  </p><h1 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h1><h2 id="HOME文件夹位置"><a href="#HOME文件夹位置" class="headerlink" title="HOME文件夹位置"></a>HOME文件夹位置</h2><p>之前WSL1时数据是存在<code>%LOCALAPPDATA%\Packages</code>处，但<a href="https://devblogs.microsoft.com/commandline/do-not-change-linux-files-using-windows-apps-and-tools/" target="_blank" rel="noopener">官方并不建议在Win下修改子系统文件</a>，主要是Win和Linux处理文件的元数据（权限，时间戳等）方式不一样，会造成Linux无法正确识别该文件，严重时会导致子系统崩溃甚至无法正常卸载。<br>现在五月更新后，直接在子系统终端执行<code>explorer.exe .</code>即可将子系统映射到Win中并用资源管理器打开，此时可以放心地用Win的工具修改文件而不用担心损坏文件了，方便了不少，详情见<a href="https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-windows-10-version-1903/" target="_blank" rel="noopener">此处</a>。  </p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">Windows Subsystem for Linux Installation Guide for Windows 10</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本以为是小菜一碟，但还是遇到了WslRegisterDistribution failed和参考的对象类型不支持尝试的操作的坑，故记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://blog.mjyai.com/tags/ubuntu/"/>
    
      <category term="win" scheme="https://blog.mjyai.com/tags/win/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下部署团队协作通讯软件mattermost</title>
    <link href="https://blog.mjyai.com/2020/04/11/ubuntu-mattermost/"/>
    <id>https://blog.mjyai.com/2020/04/11/ubuntu-mattermost/</id>
    <published>2020-04-11T06:01:24.000Z</published>
    <updated>2020-05-04T04:12:22.985Z</updated>
    
    <content type="html"><![CDATA[<p>抗疫期间，网络流量激增，团队协作通讯软件slack也变得很卡，偶尔还会掉线。是时候考虑自己部署一个开源替代品了，在比较了zulip，mattermost，rocketchat后最终选择了mattermost，并放在了子目录中与其他服务共存。<br><a id="more"></a></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>如果图省事可以选择<a href="https://slack.com/intl/en-cn/pricing" target="_blank" rel="noopener">slack</a>，或<a href="https://products.office.com/en-us/microsoft-teams/free" target="_blank" rel="noopener">Microsoft Teams</a>，只是这样你的数据除了团队成员外，服务提供商的工程师亦可查阅，而且特殊时期可能会碰到卡顿的情况（当然巨硬的Teams应该还是很稳健的）。<br>这里简单比较一下三个开源的同类软件zulip，mattermost，rocketchat。<br>注：由于是通讯服务，故需选择24*7可靠性较高的服务器。  </p><h2 id="zulip"><a href="#zulip" class="headerlink" title="zulip"></a><a href="https://zulipchat.com" target="_blank" rel="noopener">zulip</a></h2><p>++ 提供<a href="https://zulipchat.com/plans/" target="_blank" rel="noopener">免费试用</a>，但搜索功能受限制<br>++ 支持中文<br>++ 全平台支持，包括浏览器。<br>++ <a href="https://zulipchat.com/integrations/" target="_blank" rel="noopener">插件丰富</a><br>++ 对话可折叠，类论坛形式组织信息流<br>++ 后端为Django(python3)，前端用JS编写，数据库仅支持PostgreSQL<br>– 建议在全新系统上部署，不建议和其他服务共用，没有官方卸载脚本<br>– 必须部署在域名根目录，不支持子目录<br>– <a href="https://github.com/zulip/docker-zulip" target="_blank" rel="noopener">docker-zulip</a>为试验阶段，不适合生产环境部署<br>其实试用过后我是比较倾向用zulip的，信息管理逻辑和slack类似，但<a href="https://github.com/zulip/zulip/blob/master/scripts/lib/install" target="_blank" rel="noopener">官方脚本</a>是设计<strong>在全新系统上部署</strong>的，无法与其他服务共用，跑了脚本后不仅无法正常安装，且已有服务也受影响，逆向操作还原费了点功夫。之后分析了脚本，手动安装踩了不少坑，能用但今后维护并不方便。  </p><h2 id="Mattermost"><a href="#Mattermost" class="headerlink" title="Mattermost"></a><a href="https://mattermost.com/" target="_blank" rel="noopener">Mattermost</a></h2><p>++ 提供<a href="https://mattermost.com/demo/" target="_blank" rel="noopener">demo试用</a>，仅体验普通用户功能<br>++ 支持中文<br>++ 全平台支持，包括浏览器。<br>++ <a href="https://integrations.mattermost.com/" target="_blank" rel="noopener">插件丰富</a><br>++ 后端为Go，前端用React(JS)，数据库支持MySQL和PostgreSQL<br>++ <a href="https://github.com/mattermost/mattermost-docker" target="_blank" rel="noopener">mattermost-docker</a><br>– 对话不可折叠<br>由于用Go编写，没有复杂的依赖关系，部署比较简单，且插件支持亦很丰富，所以选择了这个方案。  </p><h2 id="Rocket-Chat"><a href="#Rocket-Chat" class="headerlink" title="Rocket.Chat"></a><a href="https://rocket.chat/" target="_blank" rel="noopener">Rocket.Chat</a></h2><p>++ 提供<a href="https://cloud.rocket.chat/trial/bronze?utm_source=header&amp;utm_medium=website&amp;utm_campaign=trials" target="_blank" rel="noopener">14天免费试用</a><br>++ 支持中文<br>++ 全平台支持，包括浏览器。<br>++ <a href="https://github.com/RocketChat/Rocket.Chat/blob/develop/docker-compose.yml" target="_blank" rel="noopener">docker-compose</a><br>++ <a href="https://rocket.chat/marketplace" target="_blank" rel="noopener">插件丰富</a><br>++ 使用Meteor(JS)框架编写，数据库仅支持MongoDB  </p><p>每个团队的需求都不一样，所以先利用上述软件在线试用一段时间，看看有无自身急需的特性，必要插件的支持情况，维护人员技术栈是否切合等等再做最终决定。  </p><h1 id="部署Mattermost"><a href="#部署Mattermost" class="headerlink" title="部署Mattermost"></a>部署Mattermost</h1><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p><a href="https://blog.mjyai.com/2020/03/15/ubuntu-nextcloud/#%E5%AE%89%E8%A3%85mysql">安装mysql</a>。<br>创建数据库。记得把<code>mmuser-password</code>换掉。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">'mmuser'</span>@<span class="string">'localhost'</span> identified by <span class="string">'mmuser-password'</span>;</span><br><span class="line">create database mattermost;</span><br><span class="line">grant all privileges on mattermost.* to <span class="string">'mmuser'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="安装Mattermost服务端"><a href="#安装Mattermost服务端" class="headerlink" title="安装Mattermost服务端"></a>安装Mattermost服务端</h2><p>下载，将<code>5.21.0</code>换成<a href="https://mattermost.com/download/" target="_blank" rel="noopener">当前最新稳定版</a>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://releases.mattermost.com/5.21.0/mattermost-5.21.0-linux-amd64.tar.gz</span><br><span class="line">tar -xvzf mattermost*.gz</span><br><span class="line">sudo mv mattermost /opt</span><br></pre></td></tr></table></figure><br>创建数据文件夹，将<code>/opt/mattermost/data</code>换成挂载大容量硬盘的路径。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /opt/mattermost/data</span><br></pre></td></tr></table></figure><br>创建mattermost用户和设定相关文件夹权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd --system --user-group mattermost</span><br><span class="line">sudo chown -R mattermost:mattermost /opt/mattermost</span><br><span class="line">sudo chmod -R g+w /opt/mattermost</span><br></pre></td></tr></table></figure><br>编辑配置文件<code>/opt/mattermost/config/config.json</code>。这里<code>SiteURL</code>设置的是将mattermost置于非常规端口<code>8443</code>和域名子目录<code>mattermost</code>下，可按需更改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;SiteURL&quot;: &quot;https:&#x2F;&#x2F;example.com:8443&#x2F;mattermost&#x2F;&quot;,</span><br><span class="line">&quot;DriverName&quot;: &quot;mysql&quot;,</span><br><span class="line">&quot;DataSource&quot;: &quot;mmuser:mmuser-password@tcp(localhost:3306)&#x2F;mattermost?charset&#x3D;utf8mb4,utf8\u0026readTimeout&#x3D;30s\u0026writeTimeout&#x3D;30s&quot;,</span><br></pre></td></tr></table></figure></p><h2 id="编写系统服务文件"><a href="#编写系统服务文件" class="headerlink" title="编写系统服务文件"></a>编写系统服务文件</h2><p>测试是否运行正常。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u mattermost /opt/mattermost/bin/mattermost</span><br></pre></td></tr></table></figure><br>若无误输出会显示<code>Server is listening on :8065</code>。<br>新建<code>/lib/systemd/system/mattermost.service</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Mattermost</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">After&#x3D;mysql.service</span><br><span class="line">Requires&#x3D;mysql.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;notify</span><br><span class="line">ExecStart&#x3D;&#x2F;opt&#x2F;mattermost&#x2F;bin&#x2F;mattermost</span><br><span class="line">TimeoutStartSec&#x3D;3600</span><br><span class="line">Restart&#x3D;always</span><br><span class="line">RestartSec&#x3D;10</span><br><span class="line">WorkingDirectory&#x3D;&#x2F;opt&#x2F;mattermost</span><br><span class="line">User&#x3D;mattermost</span><br><span class="line">Group&#x3D;mattermost</span><br><span class="line">LimitNOFILE&#x3D;49152</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;mysql.service</span><br></pre></td></tr></table></figure><br>启用mattermost服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start mattermost.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mattermost.service</span><br></pre></td></tr></table></figure><br>这里假定服务器的内网IP为<code>192.168.1.2</code>。浏览器打开<a href="http://192.168.1.2:8065。">http://192.168.1.2:8065。</a><br>创建用户，首个用户具有<code>system_admin</code>权限，故先在内网建立确保服务器安全。其他配置等反向代理设好后在公网再设。  </p><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>nginx的安装和配置可参考这篇文章<a href="https://blog.mjyai.com/2020/04/09/ubuntu-nginx-frontend-apache-backend/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEnginx">nginx作为前端配合apache作为后端</a>。<br>我们这里无需用到apache，仅用nginx作为反向代理即可。<br>编辑<code>/etc/nginx/sites-available/example.com</code>。<strong>SSL在nginx处配置而不是mattermost服务端</strong>。<br>另外反代apache的相关配置已省去，与mattermost并不冲突。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">upstream mattermost &#123;</span><br><span class="line">   server 192.168.1.2:8065;</span><br><span class="line">   keepalive 32;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy_cache_path &#x2F;var&#x2F;cache&#x2F;nginx levels&#x3D;1:2 keys_zone&#x3D;mattermost_cache:10m max_size&#x3D;3g inactive&#x3D;120m use_temp_path&#x3D;off;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    return 301 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8443 ssl http2;</span><br><span class="line">    listen [::]:8443 ssl http2;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    underscores_in_headers on;</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;apache2&#x2F;ssl&#x2F;fullchain.cer;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;apache2&#x2F;ssl&#x2F;private&#x2F;example.com.key;</span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line">    ssl_protocols TLSv1.2;</span><br><span class="line">    ssl_ciphers &#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256&#39;;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:50m;</span><br><span class="line"></span><br><span class="line">    # HSTS (ngx_http_headers_module is required) (15768000 seconds &#x3D; 6 months)</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age&#x3D;31536000; includeSubdomains&quot;;</span><br><span class="line">    # OCSP Stapling ---</span><br><span class="line">    # fetch OCSP records from URL in ssl_certificate and cache them</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    ssl_stapling_verify on;</span><br><span class="line"></span><br><span class="line">   location ~ &#x2F;mattermost&#x2F;api&#x2F;v[0-9]+&#x2F;(users&#x2F;)?websocket$ &#123;</span><br><span class="line">       proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">       proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">       client_max_body_size 50M;</span><br><span class="line">       proxy_set_header Host $http_host;</span><br><span class="line">       proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">       proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">       proxy_set_header X-Frame-Options SAMEORIGIN;</span><br><span class="line">       proxy_buffers 256 16k;</span><br><span class="line">       proxy_buffer_size 16k;</span><br><span class="line">       client_body_timeout 60;</span><br><span class="line">       send_timeout 300;</span><br><span class="line">       lingering_timeout 5;</span><br><span class="line">       proxy_connect_timeout 90;</span><br><span class="line">       proxy_send_timeout 300;</span><br><span class="line">       proxy_read_timeout 90s;</span><br><span class="line">       proxy_pass http:&#x2F;&#x2F;mattermost;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   location &#x2F;mattermost&#x2F; &#123;</span><br><span class="line">       client_max_body_size 50M;</span><br><span class="line">       proxy_set_header Connection &quot;&quot;;</span><br><span class="line">       proxy_set_header Host $http_host;</span><br><span class="line">       proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">       proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">       proxy_set_header X-Frame-Options SAMEORIGIN;</span><br><span class="line">       proxy_buffers 256 16k;</span><br><span class="line">       proxy_buffer_size 16k;</span><br><span class="line">       proxy_read_timeout 600s;</span><br><span class="line">       proxy_cache mattermost_cache;</span><br><span class="line">       proxy_cache_revalidate on;</span><br><span class="line">       proxy_cache_min_uses 2;</span><br><span class="line">       proxy_cache_use_stale timeout;</span><br><span class="line">       proxy_cache_lock on;</span><br><span class="line">       proxy_http_version 1.1;</span><br><span class="line">       proxy_pass http:&#x2F;&#x2F;mattermost;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="网页配置Mattermost"><a href="#网页配置Mattermost" class="headerlink" title="网页配置Mattermost"></a>网页配置Mattermost</h2><p>浏览器访问<code>https://example.com:8443/mattermost/</code>，登录刚才创建的管理员帐号。进入<code>System Console</code>。<br><code>ENVIRONMENT-SMTP</code>处设置邮件服务器，不要用163邮箱，会被判定为<a href="http://help.163.com/09/1224/17/5RAJ4LMH00753VB8.html" target="_blank" rel="noopener">垃圾邮件554 DT:SPM</a>。可用阿里云的企业邮箱新建一个子帐号专门用来发信，<a href="https://help.aliyun.com/knowledge_detail/36576.html" target="_blank" rel="noopener">地址和端口相关设置</a>。保存后才点击<code>Test Connection</code>测试发信，正常的话管理员用户注册邮箱会收到测试邮件。<br><code>ENVIRONMENT-File Storage</code>处设置图片和附件保存位置。  </p><h1 id="卸载Mattermost"><a href="#卸载Mattermost" class="headerlink" title="卸载Mattermost"></a>卸载Mattermost</h1><p>停止并禁用mattermost服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo service mattermost stop</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> mattermost</span><br><span class="line">sudo rm /lib/systemd/system/mattermost.service</span><br></pre></td></tr></table></figure><br>（可选）删除文件夹，删掉数据库。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /opt/mattermost</span><br><span class="line">sudo mysql</span><br><span class="line">DROP DATABASE mattermost;</span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.mattermost.com/install/install-ubuntu-1804.html" target="_blank" rel="noopener">Installing Mattermost on Ubuntu 18.04 LTS</a><br><a href="https://docs.mattermost.com/guides/administrator.html" target="_blank" rel="noopener">Mattermost Administrator’s Guide</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;抗疫期间，网络流量激增，团队协作通讯软件slack也变得很卡，偶尔还会掉线。是时候考虑自己部署一个开源替代品了，在比较了zulip，mattermost，rocketchat后最终选择了mattermost，并放在了子目录中与其他服务共存。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://blog.mjyai.com/tags/ubuntu/"/>
    
      <category term="im" scheme="https://blog.mjyai.com/tags/im/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下nginx作为前端配合apache作为后端</title>
    <link href="https://blog.mjyai.com/2020/04/09/ubuntu-nginx-frontend-apache-backend/"/>
    <id>https://blog.mjyai.com/2020/04/09/ubuntu-nginx-frontend-apache-backend/</id>
    <published>2020-04-09T03:10:56.000Z</published>
    <updated>2020-05-04T04:12:22.985Z</updated>
    
    <content type="html"><![CDATA[<p>nginx与apache的强强结合，前者处理高并发和静态页面并反向代理包括apache之类的服务，后者对动态页面的兼容性更好。另外有的应用官方只支持nginx，所以需要一个让两者共存的方案。本身设置并不难，就是由于nextcloud官方并没有二者结合的配置所以踩了些坑。<br><a id="more"></a><br>注意中转影响效率，并不适合单机，适合多对多服务器。但由于第二点的需求故仍然采用了这个方案。</p><h1 id="安装配置apache"><a href="#安装配置apache" class="headerlink" title="安装配置apache"></a>安装配置apache</h1><p>安装依赖。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2 libapache2-mod-php7.2</span><br><span class="line">sudo apt-get install php7.2-gd php7.2-json php7.2-curl php7.2-mbstring php7.2-intl php-imagick php7.2-xml php7.2-zip libapache2-mod-scgi</span><br></pre></td></tr></table></figure><br>启用<code>.htaccess</code>。修改<code>/etc/apache2/apache2.conf</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &#x2F;var&#x2F;www&#x2F;&gt;</span><br><span class="line">  AllowOverride All</span><br></pre></td></tr></table></figure><br>修改<code>/etc/apache2/ports.conf</code>。将默认的<code>80</code>和<code>443</code>端口改成其他以免和nginx冲突。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Listen 7080</span><br><span class="line"># 此项可选，若没有就不添加</span><br><span class="line">&lt;IfModule ssl_module&gt;</span><br><span class="line">        Listen 7443</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure><br>新建http站点配置文件<code>/etc/apache2/sites-available/example.com.conf</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 限制vhost仅监听本地7080端口</span><br><span class="line">&lt;VirtualHost 127.0.0.1:7080&gt;</span><br><span class="line">    Alias &#x2F; &quot;&#x2F;var&#x2F;www&#x2F;example.com&#x2F;&quot;</span><br><span class="line"></span><br><span class="line">    &lt;Directory &#x2F;var&#x2F;www&#x2F;example.com&#x2F;&gt;</span><br><span class="line">        Options +FollowSymlinks</span><br><span class="line">        AllowOverride All</span><br><span class="line"></span><br><span class="line">        &lt;IfModule mod_dav.c&gt;</span><br><span class="line">            Dav off</span><br><span class="line">        &lt;&#x2F;IfModule&gt;</span><br><span class="line"></span><br><span class="line">        SetEnv HOME &#x2F;var&#x2F;www&#x2F;example.com</span><br><span class="line">        SetEnv HTTP_HOME &#x2F;var&#x2F;www&#x2F;example.com</span><br><span class="line"></span><br><span class="line">        #此项可选，为nextcloud专用301跳转，没装不用加。</span><br><span class="line">        Redirect 301 &#x2F;.well-known&#x2F;carddav https:&#x2F;&#x2F;example.com&#x2F;nextcloud&#x2F;remote.php&#x2F;dav</span><br><span class="line">        Redirect 301 &#x2F;.well-known&#x2F;caldav  https:&#x2F;&#x2F;example.com&#x2F;nextcloud&#x2F;remote.php&#x2F;dav</span><br><span class="line">        Redirect 301 &#x2F;.well-known&#x2F;webdav  https:&#x2F;&#x2F;example.com&#x2F;nextcloud&#x2F;remote.php&#x2F;dav</span><br><span class="line">    &lt;&#x2F;Directory&gt;</span><br><span class="line"></span><br><span class="line">    ErrorLog $&#123;APACHE_LOG_DIR&#125;&#x2F;error.log</span><br><span class="line">    CustomLog $&#123;APACHE_LOG_DIR&#125;&#x2F;access.log combined</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure><br>开启apache相关模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite headers env dir mime</span><br></pre></td></tr></table></figure><br>禁用默认站点，启用本站配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo a2ensite example.com.conf</span><br><span class="line">sudo a2dissite 000-default.conf</span><br></pre></td></tr></table></figure></p><h2 id="修改php上传文件大小上限"><a href="#修改php上传文件大小上限" class="headerlink" title="修改php上传文件大小上限"></a>修改php上传文件大小上限</h2><p>以apache为例，修改<code>/etc/php/7.2/apache2/php.ini</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upload_max_filesize &#x3D; 64M</span><br><span class="line">max_file_uploads &#x3D; 200</span><br><span class="line">post_max_size &#x3D; 128M</span><br></pre></td></tr></table></figure><br>重启apache服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload apache2</span><br></pre></td></tr></table></figure></p><h1 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h1><p>安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><br>编辑<code>/etc/nginx/nginx.conf</code>。这里只将用户和用户组改为和apache一致的<code>www-data</code>。其他设置可以参考<a href="https://www.nginx.com/resources/wiki/start/topics/examples/full/" target="_blank" rel="noopener">这里</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user www-data www-data;</span><br></pre></td></tr></table></figure><br>新建ssl站点配置文件<code>/etc/nginx/sites-available/example.com</code>。这个配置中<code>80</code>端口通过301跳转强制https访问，<code>8443</code>端口为https监听端口，若公网的<code>443</code>端口没封则可用<code>443</code>。然后将请求通过<code>proxy_pass</code>转给apache的<code>7080</code>。<br>关于ssl证书的签发见<a href="https://blog.mjyai.com/2020/04/03/ubuntu-letsencrypt/">部署Let’s Encrypt</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    return 301 https:&#x2F;&#x2F;$host$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8443 http2;</span><br><span class="line">    listen [::]:8443 http2;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 0;</span><br><span class="line">    underscores_in_headers on;</span><br><span class="line"></span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age&#x3D;31536000; includeSubdomains&quot;;</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate &#x2F;etc&#x2F;apache2&#x2F;ssl&#x2F;fullchain.cer;</span><br><span class="line">    ssl_certificate_key &#x2F;etc&#x2F;apache2&#x2F;ssl&#x2F;private&#x2F;example.com.key;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_set_header Host $host:$server_port;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header  X-Forwarded-Proto   $scheme;</span><br><span class="line">        add_header Front-End-Https on;</span><br><span class="line">        add_header Strict-Transport-Security &quot;max-age&#x3D;31536000; includeSubdomains&quot;;</span><br><span class="line"></span><br><span class="line">        proxy_headers_hash_max_size 512;</span><br><span class="line">        proxy_headers_hash_bucket_size 64;</span><br><span class="line"></span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_max_temp_file_size 0;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:7080;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>启用站点。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/</span><br><span class="line">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure></p><h1 id="nextcloud相关设置"><a href="#nextcloud相关设置" class="headerlink" title="nextcloud相关设置"></a>nextcloud相关设置</h1><p>编辑<code>config.php</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#39;overwritehost&#39; &#x3D;&gt; &#39;example.com:8443&#39;,</span><br><span class="line">&#39;overwriteprotocol&#39; &#x3D;&gt; &#39;https&#39;,</span><br><span class="line">&#39;overwrite.cli.url&#39; &#x3D;&gt; &#39;https:&#x2F;&#x2F;example.com:8443&#x2F;nextcloud&#x2F;&#39;,</span><br><span class="line">&#39;trusted_proxies&#39; &#x3D;&gt; [&#39;127.0.0.1&#39;],</span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.nextcloud.com/server/15/admin_manual/configuration_server/reverse_proxy_configuration.html" target="_blank" rel="noopener">Nextcloud configuration » Reverse proxy</a><br><a href="https://www.nginx.com/resources/wiki/start/topics/examples/full/" target="_blank" rel="noopener">Nginx Full Example Configuration</a><br><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="noopener">Nginx开发从入门到精通</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx与apache的强强结合，前者处理高并发和静态页面并反向代理包括apache之类的服务，后者对动态页面的兼容性更好。另外有的应用官方只支持nginx，所以需要一个让两者共存的方案。本身设置并不难，就是由于nextcloud官方并没有二者结合的配置所以踩了些坑。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://blog.mjyai.com/tags/ubuntu/"/>
    
      <category term="web" scheme="https://blog.mjyai.com/tags/web/"/>
    
      <category term="nextcloud" scheme="https://blog.mjyai.com/tags/nextcloud/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下手动部署Let&#39;s Encrypt</title>
    <link href="https://blog.mjyai.com/2020/04/03/ubuntu-letsencrypt/"/>
    <id>https://blog.mjyai.com/2020/04/03/ubuntu-letsencrypt/</id>
    <published>2020-04-03T02:11:49.000Z</published>
    <updated>2020-04-03T03:10:52.927Z</updated>
    
    <content type="html"><![CDATA[<p>证书常用位置及权限设置，以及用脚本更新阿里云域名（ddns）。<br><a id="more"></a></p><h1 id="letsencrpyt"><a href="#letsencrpyt" class="headerlink" title="letsencrpyt"></a>letsencrpyt</h1><h2 id="创建相关文件夹并设置权限"><a href="#创建相关文件夹并设置权限" class="headerlink" title="创建相关文件夹并设置权限"></a>创建相关文件夹并设置权限</h2><p>不建议直接放到<code>/etc/ssl</code>文件夹，因为letsencrypt三个月就要改一次，而此处是设计放置长期证书的。这里以apache为例，若是nginx则可在<code>/etc/nginx</code>下新建。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/apache2/ssl</span><br><span class="line">sudo mkdir /etc/apache2/ssl/private</span><br><span class="line">sudo chmod 755 /etc/apache2/ssl</span><br><span class="line">sudo chmod 710 /etc/apache2/ssl/private</span><br><span class="line">sudo chown -R root:root /etc/apache2/ssl/</span><br><span class="line">sudo chown -R root:ssl-cert /etc/apache2/ssl/private/</span><br></pre></td></tr></table></figure></p><h2 id="用acme-sh自动签发ssl证书"><a href="#用acme-sh自动签发ssl证书" class="headerlink" title="用acme.sh自动签发ssl证书"></a>用acme.sh自动签发ssl证书</h2><p>下载脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><br>设置阿里云域名相关API。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> Ali_Key=<span class="string">"AccessKeyId"</span></span><br><span class="line"><span class="built_in">export</span> Ali_Secret=<span class="string">"AccessKeySecret"</span></span><br></pre></td></tr></table></figure><br>以DNS API模式通过验证。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue --dns dns_ali -d example.com</span><br></pre></td></tr></table></figure><br>安装证书。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --installcert -d example.com</span><br><span class="line">--key-file /etc/apache2/ssl/private/example.com.key</span><br><span class="line">--fullchain-file /etc/apache2/ssl/fullchain.cer</span><br><span class="line">--reloadcmd <span class="string">"service apache2 force-reload"</span></span><br></pre></td></tr></table></figure></p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --uninstall</span><br></pre></td></tr></table></figure><h1 id="动态域名ddns"><a href="#动态域名ddns" class="headerlink" title="动态域名ddns"></a>动态域名ddns</h1><p>如果公网IP定期改变，则需定时去域名管理处更新IP。<br>切换为root并下载脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://raw.githubusercontent.com/h46incon/AliDDNSBash/master/ali_ddns.sh</span><br></pre></td></tr></table></figure><br>按<a href="https://github.com/h46incon/AliDDNSBash#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">官方教程</a>编辑<code>ali_ddns.sh</code>。<br>启用并设置定时任务<code>cron</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;cron enable</span><br><span class="line">crontab -e</span><br></pre></td></tr></table></figure><br>在编辑器中添加一行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&#x2F;5 * * * * &#x2F;bin&#x2F;bash &#x2F;root&#x2F;ali_ddns.sh</span><br></pre></td></tr></table></figure><br>其中<code>*</code>依次为每分，每小时，每天，每月，每星期几。此处设置为每5分钟检查一次IP，有改变则上报域名管理更新记录。  </p><h1 id="caddy"><a href="#caddy" class="headerlink" title="caddy"></a><a href="https://caddyserver.com/" target="_blank" rel="noopener">caddy</a></h1><p>用caddy则比较轻松，会根据CaddyFile中的设置为每个域名自动签发和更新证书，这里仅记录下签发证书的位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;root&#x2F;.caddy&#x2F;acme&#x2F;acme-v02.api.letsencrypt.org&#x2F;sites&#x2F;example.com&#x2F;example.com.crt</span><br><span class="line">&#x2F;root&#x2F;.caddy&#x2F;acme&#x2F;acme-v02.api.letsencrypt.org&#x2F;sites&#x2F;example.com&#x2F;example.com.key</span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/Neilpang/acme.sh/wiki/说明" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/说明</a><br><a href="https://github.com/Neilpang/acme.sh/wiki/Options-and-Params" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/Options-and-Params</a><br><a href="https://github.com/h46incon/AliDDNSBash#使用方法" target="_blank" rel="noopener">https://github.com/h46incon/AliDDNSBash#使用方法</a><br><a href="http://man7.org/linux/man-pages/man5/crontab.5.html" target="_blank" rel="noopener">http://man7.org/linux/man-pages/man5/crontab.5.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;证书常用位置及权限设置，以及用脚本更新阿里云域名（ddns）。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://blog.mjyai.com/tags/ubuntu/"/>
    
      <category term="ssl" scheme="https://blog.mjyai.com/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>慎用诸如tk之类的免费域名</title>
    <link href="https://blog.mjyai.com/2020/03/29/no-tk/"/>
    <id>https://blog.mjyai.com/2020/03/29/no-tk/</id>
    <published>2020-03-29T14:19:32.000Z</published>
    <updated>2020-05-04T04:12:22.985Z</updated>
    
    <content type="html"><![CDATA[<p>免费的是最贵的，结果是要么浪费时间要么浪费金钱。真有非主站的短期需求不如去廉价域名供应商如<a href="https://blog.mjyai.com/go/namesilo">namesilo</a>之类的，最低$0.99省时省心。<br><a id="more"></a><br>免费域名tk的坑主要有三个，前两个我已经有准备了，故只是用来放一个自用的在线工具集的站点。没想到第三点让人无法忍受，所以费了点时间全迁走了。  </p><h1 id="SEO负优化"><a href="#SEO负优化" class="headerlink" title="SEO负优化"></a>SEO负优化</h1><p>这是老生常谈了，由于其免费，所以很多钓鱼网站也用这个域名，造成浏览器用户都对tk域名的网站第一印象很差，进而搜索引擎对这类网站的搜索结果排位不高。因此我的博客并没有使用，而是用来给一个服务器提供一个域名进而可开启SSL来安全地中转数据。  </p><h1 id="90天内至少25个独立访问者"><a href="#90天内至少25个独立访问者" class="headerlink" title="90天内至少25个独立访问者"></a>90天内至少25个独立访问者</h1><p>免费档似乎有限制90天内至少25个独立访问者，否则该域名会被回收。这个很容易达到，因为国内的环境基本每天IP都会变，只要正常使用就行。而且我还放了一些在线工具集，居然被google爬到了，根据站点统计远超了这个限制，但站养肥了点就触发了第三个坑。其实事后我搜了下这点限制<a href="http://dot-tk.wikidot.com/25-unique-visitor-requirement-explained" target="_blank" rel="noopener">似乎被取消了</a>。  </p><h1 id="域名会被强制收回，再用要付费"><a href="#域名会被强制收回，再用要付费" class="headerlink" title="域名会被强制收回，再用要付费"></a>域名会被强制收回，再用要付费</h1><p>站点小有名气后突然无法访问，去控制台发现域名被删，然后重新注册吧，结果我当时随意弄的名称被定为了<code>Special</code>组（<a href="https://www.freenom.com/en/freeandpaiddomains.html" target="_blank" rel="noopener">免费、付费、特别组的区别</a>），想继续用的话必须每年付$9.9。我看<code>ml</code>那里还可用于是就注册了这个，当然费了点时间把服务器端的相应域名改了，还好用的是caddy，所以证书也一并自动改签，还有几个客户端的设置没花多少时间。过了几天出于好奇，我去主页又搜了下那个名称，发现了他们的骚操作，其在<code>tk</code>下的域名又不是<code>Special</code>了，似乎是看我没上钩所以恢复免费。google了下还有不少类似案例，比如<a href="https://www.techelex.org/why-not-use-dot-tk-domain/" target="_blank" rel="noopener">这个哥们</a>，把<code>tk</code>用在了主站上，损失惨重。<br>鉴于其吃相太难看，我去<a href="https://blog.mjyai.com/go/namesilo">namesilo</a>那弄了个域名迁过去，把freenom剩下没波及的免费域名直接删掉图个清净。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;免费的是最贵的，结果是要么浪费时间要么浪费金钱。真有非主站的短期需求不如去廉价域名供应商如&lt;a href=&quot;https://blog.mjyai.com/go/namesilo&quot;&gt;namesilo&lt;/a&gt;之类的，最低$0.99省时省心。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu下搭建rss全文输出服务full-text-rss</title>
    <link href="https://blog.mjyai.com/2020/03/23/ubuntu-full-text-rss/"/>
    <id>https://blog.mjyai.com/2020/03/23/ubuntu-full-text-rss/</id>
    <published>2020-03-23T02:52:55.000Z</published>
    <updated>2020-05-22T03:07:41.641Z</updated>
    
    <content type="html"><![CDATA[<p>只有摘要的rss内容和咸鱼有什么区别？这里推荐一个比mercury-parser-api更好用的rss全文输出服务。<br><a id="more"></a><br>本文提供了搭建rss全文输出服务<a href="https://bitbucket.org/fivefilters/full-text-rss/src/master/" target="_blank" rel="noopener">full-text-rss</a>的步骤，对国内环境如何科学地抓取全文亦有所涉及，此服务配合<a href="https://blog.mjyai.com/2020/03/22/ubuntu-ttrss/">自建rss阅读器tt-rss</a>使用效果更好。  </p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><h2 id="为什么不用mercury-parser-api"><a href="#为什么不用mercury-parser-api" class="headerlink" title="为什么不用mercury-parser-api"></a>为什么不用<a href="https://github.com/postlight/mercury-parser-api" target="_blank" rel="noopener">mercury-parser-api</a></h2><ol><li>没有权限设置选项<br>这意味者要么限制其和阅读器服务处于同一个服务器中（localhost），要么通过反代开放到公网并通过防火墙限制访问IP，否则就是向全网公开的服务，任何人都能使用。  </li><li>不支持代理<br>国内网络环境你懂的，这样就限制其只能部署在国外服务器才能发挥全部作用。  </li></ol><h2 id="fivefilters在线服务的不足之处"><a href="#fivefilters在线服务的不足之处" class="headerlink" title="fivefilters在线服务的不足之处"></a><a href="https://fivefilters.org/content-only/" target="_blank" rel="noopener">fivefilters在线服务</a>的不足之处</h2><ol><li>制作的feed链接为http<br>墙连全文都不用看，只检查url中的关键字就能拦截了。自行搭建可以设为全部走https，这样中间人只能知道你访问的域名，全文和域名以外的url是加密的。</li><li>免费服务有限制<br>主要是一次抓取的文章限制为3篇，且文末有一行文字链接的广告。  </li></ol><p>其实轻度使用足够了。本文推荐的<a href="https://bitbucket.org/fivefilters/full-text-rss/src/master/" target="_blank" rel="noopener">full-text-rss</a>比fivefilters的线上版本慢一版，不过自己搭建能使用全功能无限制。  </p><h1 id="安装配置apache"><a href="#安装配置apache" class="headerlink" title="安装配置apache"></a><a href="https://blog.mjyai.com/2020/01/24/rtorrent-compile/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEapache">安装配置apache</a></h1><h1 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php-tidy</span><br><span class="line">sudo service apache2 reload</span><br></pre></td></tr></table></figure><h1 id="安装full-text-rss"><a href="#安装full-text-rss" class="headerlink" title="安装full-text-rss"></a>安装full-text-rss</h1><p>克隆源码。国内搭建建议为默认的文件夹<code>full-text-rss</code>改名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/example.com</span><br><span class="line">sudo -u www-data git <span class="built_in">clone</span> https://bitbucket.org/fivefilters/full-text-rss.git</span><br></pre></td></tr></table></figure><br>配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> full-text-rss</span><br><span class="line">sudo -u www-data cp config.php custom_config.php</span><br><span class="line">sudo -u www-data vi config.php</span><br></pre></td></tr></table></figure><br>修改以下选项。其中<code>api_keys</code>改成自用密码，设成需密码才能使用此服务，<code>proxy_servers</code>为http代理设置，此处示例为<code>privoxy</code>的默认设置。如此设置后ftr将全局走代理，所以设置<code>allow_proxy_override</code>为<code>true</code>，如果不需代理则在生成的全文feed地址后加上<code>&amp;proxy=0</code>。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$options-&gt;key_required = <span class="keyword">true</span>;</span><br><span class="line">$options-&gt;api_keys[<span class="number">1</span>] = <span class="string">'your-secret-token'</span>;</span><br><span class="line">$options-&gt;proxy_servers = <span class="keyword">array</span>(<span class="string">'privoxy'</span>=&gt;<span class="keyword">array</span>(<span class="string">'host'</span>=&gt;<span class="string">'127.0.0.1:8118'</span>));</span><br><span class="line">$options-&gt;allow_proxy_override = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><br>注：国外服务器搭建则无需代理，<code>proxy_servers</code>不要修改，默认即可。  </p><h1 id="更新网站定制抓取规则"><a href="#更新网站定制抓取规则" class="headerlink" title="更新网站定制抓取规则"></a>更新网站定制抓取规则</h1><p>没有规则的ftr和咸鱼一样。克隆官方网站规则集。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/example.com/full-text-rss/site_config</span><br><span class="line">sudo rm -rf standard</span><br><span class="line">sudo -u www-data git <span class="built_in">clone</span> https://github.com/fivefilters/ftr-site-config.git standard</span><br></pre></td></tr></table></figure></p><h1 id="定制网站抓取规则"><a href="#定制网站抓取规则" class="headerlink" title="定制网站抓取规则"></a>定制网站抓取规则</h1><p>官方网站规则不带的网站可以自行设定抓取规则，好在fivefilters也提供了<a href="http://siteconfig.fivefilters.org/" target="_blank" rel="noopener">图形化的规则定制工具</a>。<br>输入需定制网站的任意一篇文章，点<code>Go</code>进入新页面，鼠标选定文章的全文范围，然后点击<code>Download Full-Text RSS site config</code>下载定制规则。<br>将规则文件上传到<code>site_config/custom/</code>文件夹下。  </p><h1 id="懒人包"><a href="#懒人包" class="headerlink" title="懒人包"></a>懒人包</h1><p>觉得麻烦的话可以直接用我搭的ftr服务：<br><a href="https://hk.mjyai.com/ftr/" target="_blank" rel="noopener">https://hk.mjyai.com/ftr/</a><br><code>Access key</code>不用填，无key的抓取上限是5，应该够用了。低调使用，请勿滥用。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;只有摘要的rss内容和咸鱼有什么区别？这里推荐一个比mercury-parser-api更好用的rss全文输出服务。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://blog.mjyai.com/tags/ubuntu/"/>
    
      <category term="rss" scheme="https://blog.mjyai.com/tags/rss/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下自建rss阅读器ttrss</title>
    <link href="https://blog.mjyai.com/2020/03/22/ubuntu-ttrss/"/>
    <id>https://blog.mjyai.com/2020/03/22/ubuntu-ttrss/</id>
    <published>2020-03-22T03:35:50.000Z</published>
    <updated>2020-05-04T04:12:22.985Z</updated>
    
    <content type="html"><![CDATA[<p>rss已死？对占有话语权的内容创作者当然希望这样，但就内容接收者而言，活用合适的rss工具能筛掉无用信息提升效率。本文提供docker之外手动本地搭建ttrss的方法。<br><a id="more"></a></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><h2 id="为什么不用docker"><a href="#为什么不用docker" class="headerlink" title="为什么不用docker"></a>为什么不用docker</h2><p>对个人用户而言，docker仅适用于一种场合：权限不足的服务器（包括非root的定制linux操作系统，如NAS的系统）。docker还有一个好处就是部署方便，但：1.需要大规模部署的场景并不多；2.可通过编写脚本来简化部署。docker的缺点：1.性能损失，对本地无所谓，但购买服务器的话内存需要升一档多花钱了；2.调试不方便(docker exec -it …)，更适合稳定版产品的部署，可玩性差些。<br>不过，实在想用docker的话推荐Henry Wang的<a href="https://github.com/HenryQW/Awesome-TTRSS" target="_blank" rel="noopener">Awesome-TTRSS</a>。<br>注意，由于众所周知的原因，<strong>不建议本地或国内搭建</strong>，下文对如何科学地在国内搭建亦有所涉及。  </p><h2 id="为什么不用第三方服务"><a href="#为什么不用第三方服务" class="headerlink" title="为什么不用第三方服务"></a>为什么不用第三方服务</h2><p>国外的第三方服务速度慢，连接不畅或直接被墙，国内的有和谐不考虑。且免费服务限制颇多，如无法设置过滤规则，订阅数刷新率有限制，有广告等等。  </p><h1 id="安装配置apache"><a href="#安装配置apache" class="headerlink" title="安装配置apache"></a><a href="https://blog.mjyai.com/2020/01/24/rtorrent-compile/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEapache">安装配置apache</a></h1><h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a><a href="https://blog.mjyai.com/2020/03/15/ubuntu-nextcloud/#%E5%AE%89%E8%A3%85mysql">安装mysql</a></h1><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root</span><br><span class="line">CREATE DATABASE ttrss;</span><br></pre></td></tr></table></figure><h1 id="克隆ttrss源码"><a href="#克隆ttrss源码" class="headerlink" title="克隆ttrss源码"></a>克隆ttrss源码</h1><p>注：若是国内域名建议更改默认文件夹名<code>tt-rss</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/example.com</span><br><span class="line">sudo -u www-data git <span class="built_in">clone</span> https://git.tt-rss.org/fox/tt-rss.git</span><br></pre></td></tr></table></figure><br>访问<code>https://example.com/tt-rss/install/</code>执行安装。<br>默认用户名<code>admin</code>，密码<code>password</code>。<br>有个官方不支持但提供的代理选项，编辑<code>/var/www/example.com/tt-rss/config.php</code>并添加一行<code>define (&#39;_CURL_HTTP_PROXY&#39;, &#39;127.0.0.1:8118&#39;);</code>，其中<code>8118</code>端口是通过<code>privoxy</code>设置的http代理，缺点：1.这样所有的更新都全局走代理，影响速度；2.似乎无效。故并未采用。  </p><h1 id="创建feed更新服务"><a href="#创建feed更新服务" class="headerlink" title="创建feed更新服务"></a>创建feed更新服务</h1><p>创建并编辑<code>/etc/systemd/system/ttrss_backend.service</code>文件。有一种科学方法即在此处将php通过<code>proxychains</code>之类的走代理，缺点：1.全局走代理，影响速度；2.易出错导致更新失败。故并未采用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;ttrss_backend</span><br><span class="line">After&#x3D;network.target mysql.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;www-data</span><br><span class="line">ExecStart&#x3D;&#x2F;var&#x2F;www&#x2F;example.com&#x2F;tt-rss&#x2F;update_daemon2.php</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><br>启用并开始服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> ttrss_backend.service</span><br><span class="line">sudo systemctl start ttrss_backend.service</span><br></pre></td></tr></table></figure></p><h1 id="安装feed代理插件options-per-feed"><a href="#安装feed代理插件options-per-feed" class="headerlink" title="安装feed代理插件options_per_feed"></a>安装feed代理插件options_per_feed</h1><p>其中有代理选项，可对单个feed设置走代理线路。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;www&#x2F;example.com&#x2F;tt-rss&#x2F;plugins</span><br><span class="line">sudo -u www-data git clone https:&#x2F;&#x2F;github.com&#x2F;sergey-dryabzhinsky&#x2F;options_per_feed</span><br></pre></td></tr></table></figure><br>克隆源码后刷新浏览器，在<code>Preferences-Plugins</code>处激活该插件。<br>此后右键点击feed，<code>编辑feed-Plugins</code>处可启用并设置代理。<br>但由于添加feed时是直连的，对于已经被墙的feed会添加失败，无法进入编辑页面设置代理，这种只能在别处添加并导出，然后tt-rss再导入并设置代理选项才行。  </p><h1 id="安装fever插件以支持更多移动客户端"><a href="#安装fever插件以支持更多移动客户端" class="headerlink" title="安装fever插件以支持更多移动客户端"></a>安装fever插件以支持更多移动客户端</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;www&#x2F;example.com&#x2F;tt-rss&#x2F;plugins.local</span><br><span class="line">sudo -u www-data git clone https:&#x2F;&#x2F;github.com&#x2F;DigitalDJ&#x2F;tinytinyrss-fever-plugin fever</span><br></pre></td></tr></table></figure><p>需要在<code>Preferences-Fever Emulation</code>处设置fever的密码，用于客户端在<code>https://example.com/tt-rss/plugins.local/fever/</code>处登录用。  </p><h1 id="安装feedly主题tt-rss-feedly-theme"><a href="#安装feedly主题tt-rss-feedly-theme" class="headerlink" title="安装feedly主题tt-rss-feedly-theme"></a>安装feedly主题tt-rss-feedly-theme</h1><p>这是看起来比较顺眼，操作也和GR类似的主题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/levito/tt-rss-feedly-theme/archive/master.zip</span><br><span class="line">unzip master.zip</span><br><span class="line"><span class="built_in">cd</span> tt-rss-feedly-theme-master</span><br><span class="line">sudo -u www-data cp -r feedly* /var/www/example.com/tt-rss/themes.local/</span><br></pre></td></tr></table></figure></p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="取消默认展开文章"><a href="#取消默认展开文章" class="headerlink" title="取消默认展开文章"></a>取消默认展开文章</h2><p><code>Preferences-Articles</code>处取消<code>Always expand articles</code>。  </p><h2 id="其他主题"><a href="#其他主题" class="headerlink" title="其他主题"></a><a href="https://git.tt-rss.org/fox/tt-rss/wiki/Themes" target="_blank" rel="noopener">其他主题</a></h2><h2 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a><a href="https://git.tt-rss.org/fox/tt-rss/wiki/Plugins" target="_blank" rel="noopener">其他插件</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rss已死？对占有话语权的内容创作者当然希望这样，但就内容接收者而言，活用合适的rss工具能筛掉无用信息提升效率。本文提供docker之外手动本地搭建ttrss的方法。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://blog.mjyai.com/tags/ubuntu/"/>
    
      <category term="rss" scheme="https://blog.mjyai.com/tags/rss/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下搭建私人同步云盘nextcloud</title>
    <link href="https://blog.mjyai.com/2020/03/15/ubuntu-nextcloud/"/>
    <id>https://blog.mjyai.com/2020/03/15/ubuntu-nextcloud/</id>
    <published>2020-03-15T03:45:22.000Z</published>
    <updated>2020-05-04T04:12:22.985Z</updated>
    
    <content type="html"><![CDATA[<p>虽然搭建后才发觉和自己的需求有点偏差，不过其支持WebDAV协议还是有点用处。<br><a id="more"></a><br>最初的动机是为了解决QFile移动端自动上传照片的各种不便：  </p><ol><li>QFile移动版（包括安卓和iOS）不像群晖那样能设置自动连接，每次都要手动选择连接，所以做不到后台自动上传新拍照片。  </li><li>即便连上后，触发自动上传的时间不定，有时要亮屏放半天才会上传，且没有手动触发检测上传的选项。    </li><li>上传时必须保持亮屏，否则会停止。  </li></ol><p>但搭建好nextcloud后才发觉其软件定位不是备份文件，而是同步与分享。目前暂<strong>不支持单向同步</strong>，即我需要的手机照片自动上传，但不同步下载服务器的照片。后通过免费的<a href="https://www.tacit.dk/foldersync/" target="_blank" rel="noopener">FolderSync</a>解决这个问题。<br>不过其支持WebDAV协议，故可用来给如Joplin之类的第三方程序做同步用，故仍旧保留了。<br>本文没用<a href="https://hub.docker.com/_/nextcloud/" target="_blank" rel="noopener">Docker</a>或<a href="https://docs.nextcloud.com/server/17/admin_manual/installation/source_installation.html#example-installation-on-ubuntu-18-04-lts-server" target="_blank" rel="noopener">官方脚本</a>的方式安装，因为前者对性能有损失且设置有限、不利于调试，而后者适合新装好的系统只跑nextcloud。</p><h1 id="安装配置apache"><a href="#安装配置apache" class="headerlink" title="安装配置apache"></a><a href="https://blog.mjyai.com/2020/01/24/rtorrent-compile/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEapache">安装配置apache</a></h1><h1 id="php设置"><a href="#php设置" class="headerlink" title="php设置"></a>php设置</h1><p>编辑<code>/etc/php/7.2/apache2/php.ini</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">memory_limit &#x3D; 1024M</span><br><span class="line">post_max_size &#x3D; 1024M</span><br><span class="line">upload_max_filesize &#x3D; 1024M</span><br></pre></td></tr></table></figure></p><h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mariadb-server php7.2-mysql</span><br><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><p>输入并记好root用户的密码。注意root权限的用户是通过<code>auth_socket</code>而并非密码来验证的，故通过<code>sudo mysql -u root -p</code>登录时不输入密码或任意密码都能成功登录，而不是密码未设置成功。想取消<code>auth_socket</code>可以<a href="https://unix.stackexchange.com/questions/385202/mariadb-accepts-any-password" target="_blank" rel="noopener">看这里</a>。<br>启用4字节字符支持，编辑<code>/etc/mysql/mariadb.cnf</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">innodb_file_per_table&#x3D;1</span><br><span class="line">character-set-server&#x3D;utf8mb4</span><br></pre></td></tr></table></figure><br>重启mysql。  </p><h1 id="mysql创建nextcloud数据库"><a href="#mysql创建nextcloud数据库" class="headerlink" title="mysql创建nextcloud数据库"></a>mysql创建nextcloud数据库</h1><p>以root登录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root</span><br></pre></td></tr></table></figure><br>创建nextcloud用户和数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE nextclouddb;</span><br><span class="line">CREATE USER &#39;nextcloud&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;PASSWORD&#39;;</span><br><span class="line">GRANT ALL PRIVILEGES ON nextclouddb.* TO &#39;nextcloud&#39;@&#39;localhost&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></p><h1 id="创建数据文件夹"><a href="#创建数据文件夹" class="headerlink" title="创建数据文件夹"></a>创建数据文件夹</h1><p>从数据安全和硬盘空间扩展的角度强烈建议将nextcloud的数据放到别的地方，而不是默认的<code>/var/www/html/nextcloud/data</code>，否则后期想做数据迁移时由于<a href="https://help.nextcloud.com/t/howto-change-move-data-directory-after-installation/17170" target="_blank" rel="noopener">官方不支持会很麻烦</a>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /srv/hdd1/nextcloud</span><br><span class="line">sudo chown -R www-data:www-data /srv/hdd1/nextcloud</span><br></pre></td></tr></table></figure></p><h1 id="安装nextcloud"><a href="#安装nextcloud" class="headerlink" title="安装nextcloud"></a>安装nextcloud</h1><p><a href="https://nextcloud.com/install/#instructions-server" target="_blank" rel="noopener">下载nextcloud源码</a>，解压并复制到网页服务器位置并修改权限为<code>www-data</code>，否则会报错<code>Internal Server Error</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /var/www/example.com</span><br><span class="line">sudo cp -r nextcloud /var/www/example.com</span><br><span class="line">sudo chown -R www-data:www-data /var/www/example.com/nextcloud/</span><br></pre></td></tr></table></figure><br>打开安装页面<code>https://example.com/nextcloud</code>并输入数据库相关配置执行安装初始化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nextcloud</span><br><span class="line">nextclouddb</span><br><span class="line">localhost</span><br></pre></td></tr></table></figure><br>如果安装正确则能进入网盘页面。<br>配置可信任域名。打开<code>/var/www/example.com/nextcloud/config/config.php</code>文件，添加域名和内网IP。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'trusted_domains'</span> =&gt;</span><br><span class="line">  <span class="keyword">array</span> (</span><br><span class="line">   <span class="number">0</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">   <span class="number">1</span> =&gt; <span class="string">'example.com'</span>,</span><br><span class="line">   <span class="number">2</span> =&gt; <span class="string">'192.168.1.2'</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure></p><h1 id="安装并启用Redis缓存提升性能（可选）"><a href="#安装并启用Redis缓存提升性能（可选）" class="headerlink" title="安装并启用Redis缓存提升性能（可选）"></a>安装并启用Redis缓存提升性能（可选）</h1><p>如果只是几个人轻度使用没必要用牛刀。<br>安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php-apcu redis-server php-redis</span><br></pre></td></tr></table></figure><br>配置Redis。打开<code>/etc/redis/redis.conf</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">port 0</span><br><span class="line">unixsocket &#x2F;var&#x2F;run&#x2F;redis&#x2F;redis-server.sock</span><br><span class="line">unixsocketperm 770</span><br></pre></td></tr></table></figure><br>添加Apache用户<code>www-data</code>到<code>redis</code>组。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G redis www-data</span><br></pre></td></tr></table></figure><br>重启apache服务，开始redis服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br><span class="line">sudo service redis-server start</span><br></pre></td></tr></table></figure><br>修改nextcloud配置文件<code>/var/www/example.com/nextcloud/config/config.php</code>，添加以下内容。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'memcache.local'</span> =&gt; <span class="string">'\\OC\\Memcache\\Redis'</span>,</span><br><span class="line"><span class="string">'memcache.locking'</span> =&gt; <span class="string">'\\OC\\Memcache\\Redis'</span>,</span><br><span class="line"><span class="string">'filelocking.enabled'</span> =&gt; <span class="string">'true'</span>,</span><br><span class="line"><span class="string">'redis'</span> =&gt;</span><br><span class="line"><span class="keyword">array</span> (</span><br><span class="line"><span class="string">'host'</span> =&gt; <span class="string">'/var/run/redis/redis-server.sock'</span>,</span><br><span class="line"><span class="string">'port'</span> =&gt; <span class="number">0</span>,</span><br><span class="line"><span class="string">'timeout'</span> =&gt; <span class="number">0.0</span>,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><br>启用redis服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> redis-server</span><br></pre></td></tr></table></figure><br>测试redis服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo redis-cli -s /var/run/redis/redis-server.sock ping</span><br></pre></td></tr></table></figure><br>正常会打印<code>PONG</code>。<br>重启服务器。  </p><h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><p>打开nextcloud管理员概览页面(<a href="https://example.com/nextcloud/index.php/settings/admin/overview" target="_blank" rel="noopener">https://example.com/nextcloud/index.php/settings/admin/overview</a> )，确保<code>安全与设置警告</code>测试全部通过。  </p><h2 id="Your-web-server-is-not-properly-set-up-to-resolve-“-well-known-caldav”"><a href="#Your-web-server-is-not-properly-set-up-to-resolve-“-well-known-caldav”" class="headerlink" title="Your web server is not properly set up to resolve “/.well-known/caldav”"></a>Your web server is not properly set up to resolve “/.well-known/caldav”</h2><p>由于之前并未将nextcloud装在网站根目录，故需通过rewrite进行301跳转。<br>启用rewrite模块。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure><br>编辑网站<strong>根目录</strong><code>/var/www/example.com/.htaccess</code>文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  RewriteEngine on</span><br><span class="line">  RewriteRule ^\.well-known&#x2F;host-meta &#x2F;nextcloud&#x2F;public.php?service&#x3D;host-meta [QSA,L]</span><br><span class="line">  RewriteRule ^\.well-known&#x2F;host-meta\.json &#x2F;nextcloud&#x2F;public.php?service&#x3D;host-meta-json [QSA,L]</span><br><span class="line">  RewriteRule ^\.well-known&#x2F;webfinger &#x2F;nextcloud&#x2F;public.php?service&#x3D;webfinger [QSA,L]</span><br><span class="line">  RewriteRule ^\.well-known&#x2F;carddav &#x2F;nextcloud&#x2F;remote.php&#x2F;dav&#x2F; [R&#x3D;301,L]</span><br><span class="line">  RewriteRule ^\.well-known&#x2F;caldav &#x2F;nextcloud&#x2F;remote.php&#x2F;dav&#x2F; [R&#x3D;301,L]</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure><br>注，如果用<a href="https://blog.mjyai.com/2020/04/03/ubuntu-nginx-frontend-apache-backend/">nginx+apache方式搭建</a>则需把以上<code>RewriteRule</code>全部注释掉，在<code>example.com.conf</code>中设置301跳转。</p><h2 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h2><p>先检查redis-server是否正常工作，必要时注释掉<code>config.php</code>中redis的内容来查错。<br>这多出现于域名改变的情况，若<code>overwrite.cli.url</code>等设置改过仍无法解决，可以考虑重装。  </p><h2 id="重装nextcloud"><a href="#重装nextcloud" class="headerlink" title="重装nextcloud"></a>重装nextcloud</h2><p>在<code>config</code>文件夹下重命名<code>config.php</code>并新建<code>CAN_INSTALL</code>文件。<br>浏览器打开<code>https://example.com/nextcloud</code>会进入安装向导。输入数据库相关配置。<br>注意这里必须新建一个和旧管理员用户名不一样的新管理员，如果输入旧管理员会报错用户已存在。完成设置后注销登录旧管理员把新建的这个删掉即可。    </p><h1 id="移除nextcloud"><a href="#移除nextcloud" class="headerlink" title="移除nextcloud"></a>移除nextcloud</h1><p>删掉源文件，数据文件，数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf &#x2F;var&#x2F;www&#x2F;example.com&#x2F;nextcloud</span><br><span class="line">sudo rm -rf &#x2F;srv&#x2F;hdd1&#x2F;nextcloud</span><br><span class="line">DROP DATABASE nextclouddb;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然搭建后才发觉和自己的需求有点偏差，不过其支持WebDAV协议还是有点用处。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://blog.mjyai.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下编译配置rTorrent+ruTorrent</title>
    <link href="https://blog.mjyai.com/2020/01/24/rtorrent-compile/"/>
    <id>https://blog.mjyai.com/2020/01/24/rtorrent-compile/</id>
    <published>2020-01-24T12:04:06.000Z</published>
    <updated>2020-06-03T02:22:24.029Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu 18.04官方源的rTorrent 0.9.6会导致误报上传，故从源码编译0.9.7。<br><a id="more"></a></p><h1 id="pt客户端比较"><a href="#pt客户端比较" class="headerlink" title="pt客户端比较"></a>pt客户端比较</h1><h2 id="qBittorrent"><a href="#qBittorrent" class="headerlink" title="qBittorrent"></a>qBittorrent</h2><p>++ GUI实用美观<br>++ 自带web ui且可设密码权限<br>– 体积稍大<br>– 内存占用稍高<br>– 无原生命令行控制<br>由上可知，qB更适合桌面图形环境使用。我的win10 htpc和笔记本装的就是它，必要时还可临时开启web界面远程控制。  </p><h2 id="Transmission"><a href="#Transmission" class="headerlink" title="Transmission"></a>Transmission</h2><p>++ 资源占用较低<br>++ <a href="https://github.com/ronggang/transmission-web-control" target="_blank" rel="noopener">Web Control</a>使用方便（批量改tracker）<br>– 无法针对单种限流<br>– 辅种时无法跳过哈希校验<br>– 树莓派下transmission-daemon2.94带700+种子在公网IP改变情况下有机率崩溃<br>主要缺点还是只能全局限流，无法单种限流。</p><h2 id="rTorrent"><a href="#rTorrent" class="headerlink" title="rTorrent"></a>rTorrent</h2><p>++ 资源占用低<br>++ 带800+占5T的种子运行稳定<br>++ 辅种时可跳过哈希校验<br>++ 第三方web界面<a href="https://github.com/Novik/ruTorrent" target="_blank" rel="noopener">ruTorrent</a>操作方便（批量改tracker，批量限流）<br>++ 配置选项多，可定制程度高<br>– 配置稍复杂  </p><h1 id="rtorrent"><a href="#rtorrent" class="headerlink" title="rtorrent"></a>rtorrent</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y build-essential subversion autoconf screen g++ gcc ntp curl comerr-dev pkg-config cfv libtool libssl-dev libncurses5-dev ncurses-term libsigc++-2.0-dev libcppunit-dev libcurl4-openssl-dev git zlib1g-dev</span><br></pre></td></tr></table></figure><h2 id="编译安装xmlrpc-c"><a href="#编译安装xmlrpc-c" class="headerlink" title="编译安装xmlrpc-c"></a>编译安装xmlrpc-c</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">svn co https://svn.code.sf.net/p/xmlrpc-c/code/stable ~/src/xmlrpc-c</span><br><span class="line"><span class="built_in">cd</span> ~/src/xmlrpc-c</span><br><span class="line">./configure --<span class="built_in">disable</span>-libwww-client --<span class="built_in">disable</span>-wininet-client --<span class="built_in">disable</span>-abyss-server --<span class="built_in">disable</span>-cgi-server</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="编译安装libtorrent-0-13-7"><a href="#编译安装libtorrent-0-13-7" class="headerlink" title="编译安装libtorrent-0.13.7"></a>编译安装libtorrent-0.13.7</h2><p>这里有个坑，官方发布的包没有加入对openssl1.1的支持，需要根据<a href="https://github.com/rakshasa/libtorrent/commit/4607bbf78040789dee29266878ce109136b984ef" target="_blank" rel="noopener">这个commit</a>手动打补丁。也可以<a href="https://download.cloudatcost.com/download/fnp0kfwrhkihqwix92yfnt3x8" target="_blank" rel="noopener">在这里下载改好的2个文件</a>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/src</span><br><span class="line">curl http://rtorrent.net/downloads/libtorrent-0.13.7.tar.gz | tar xz</span><br><span class="line"><span class="built_in">cd</span> libtorrent-0.13.7</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><h2 id="编译安装rtorrent-0-9-7"><a href="#编译安装rtorrent-0-9-7" class="headerlink" title="编译安装rtorrent-0.9.7"></a>编译安装rtorrent-0.9.7</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/src</span><br><span class="line">curl http://rtorrent.net/downloads/rtorrent-0.9.7.tar.gz | tar xz</span><br><span class="line"><span class="built_in">cd</span> rtorrent-0.9.7</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --with-xmlrpc-c</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><h2 id="配置rtorrent"><a href="#配置rtorrent" class="headerlink" title="配置rtorrent"></a>配置rtorrent</h2><p>创建相关文件夹，注意按需修改路径和用户名，用户组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;path&#x2F;to&#x2F;pt&#x2F;rtorrent&#x2F;&#123;log,.session,~watch&#125;</span><br><span class="line">sudo chown -R user:group &#x2F;path&#x2F;to&#x2F;pt</span><br></pre></td></tr></table></figure><br>修改<code>~/.rtorrent.rc</code>配置文件。我用来挂PT的机器是J1900+8G内存的ubuntu server，参考<a href="https://github.com/rakshasa/rtorrent/wiki/CONFIG-Template" target="_blank" rel="noopener">CONFIG-Template</a>和<a href="https://github.com/rakshasa/rtorrent/wiki/Performance-Tuning" target="_blank" rel="noopener">Performance-Tuning</a>稍作修改。注意按需修改路径和内存占用选项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">#############################################################################</span><br><span class="line"># A minimal rTorrent configuration that provides the basic features</span><br><span class="line"># you want to have in addition to the built-in defaults.</span><br><span class="line">#</span><br><span class="line"># See https:&#x2F;&#x2F;github.com&#x2F;rakshasa&#x2F;rtorrent&#x2F;wiki&#x2F;CONFIG-Template</span><br><span class="line"># for an up-to-date version.</span><br><span class="line">#############################################################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Instance layout (base paths)</span><br><span class="line">method.insert &#x3D; cfg.basedir,  private|const|string, (cat,&quot;&#x2F;path&#x2F;to&#x2F;pt&#x2F;rtorrent&#x2F;&quot;)</span><br><span class="line">method.insert &#x3D; cfg.download, private|const|string, (cat,&quot;&#x2F;path&#x2F;to&#x2F;pt&#x2F;&quot;)</span><br><span class="line">method.insert &#x3D; cfg.logs,     private|const|string, (cat,(cfg.basedir),&quot;log&#x2F;&quot;)</span><br><span class="line">method.insert &#x3D; cfg.logfile,  private|const|string, (cat,(cfg.logs),&quot;rtorrent-&quot;,(system.time),&quot;.log&quot;)</span><br><span class="line">method.insert &#x3D; cfg.session,  private|const|string, (cat,(cfg.basedir),&quot;.session&#x2F;&quot;)</span><br><span class="line">method.insert &#x3D; cfg.watch,    private|const|string, (cat,(cfg.basedir),&quot;watch&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Create instance directories</span><br><span class="line">execute.throw &#x3D; sh, -c, (cat,\</span><br><span class="line">    &quot;mkdir -p \&quot;&quot;,(cfg.download),&quot;\&quot; &quot;,\</span><br><span class="line">    &quot;\&quot;&quot;,(cfg.logs),&quot;\&quot; &quot;,\</span><br><span class="line">    &quot;\&quot;&quot;,(cfg.session),&quot;\&quot; &quot;,\</span><br><span class="line">    &quot;\&quot;&quot;,(cfg.watch),&quot;&#x2F;load\&quot; &quot;,\</span><br><span class="line">    &quot;\&quot;&quot;,(cfg.watch),&quot;&#x2F;start\&quot; &quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Listening port for incoming peer traffic (fixed; you can also randomize it)</span><br><span class="line">network.port_range.set &#x3D; 51400-51400</span><br><span class="line">network.port_random.set &#x3D; no</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Tracker-less torrent and UDP tracker support</span><br><span class="line">## (conservative settings for &#39;private&#39; trackers, change for &#39;public&#39;)</span><br><span class="line">dht.mode.set &#x3D; disable</span><br><span class="line">protocol.pex.set &#x3D; no</span><br><span class="line"></span><br><span class="line">trackers.use_udp.set &#x3D; no</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Peer settings</span><br><span class="line"># Global upload and download rate in KiB, &#96;0&#96; for unlimited (&#96;download_rate&#96;, &#96;upload_rate&#96;)</span><br><span class="line">throttle.global_down.max_rate.set_kb &#x3D; 0</span><br><span class="line">throttle.global_up.max_rate.set_kb   &#x3D; 0</span><br><span class="line"></span><br><span class="line"># Maximum number of simultaneous downloads and uploads slots (global slots!) (&#96;max_downloads_global&#96;, &#96;max_uploads_global&#96;)</span><br><span class="line">throttle.max_downloads.global.set &#x3D; 300</span><br><span class="line">throttle.max_uploads.global.set &#x3D; 300</span><br><span class="line"></span><br><span class="line"># Maximum and minimum number of peers to connect to per torrent while downloading (&#96;min_peers&#96;, &#96;max_peers&#96;) Default: &#96;100&#96; and &#96;200&#96; respectively</span><br><span class="line">throttle.min_peers.normal.set &#x3D; 99</span><br><span class="line">throttle.max_peers.normal.set &#x3D; 100</span><br><span class="line"></span><br><span class="line"># Same as above but for seeding completed torrents (seeds per torrent), &#96;-1&#96; for same as downloading (&#96;min_peers_seed&#96;, &#96;max_peers_seed&#96;) Default: &#96;-1&#96; for both</span><br><span class="line">throttle.min_peers.seed.set &#x3D; -1</span><br><span class="line">throttle.max_peers.seed.set &#x3D; -1</span><br><span class="line"></span><br><span class="line"># Maximum number of simultaneous downloads and uploads slots per torrent (&#96;max_uploads&#96;) Default: &#96;50&#96; for both</span><br><span class="line">throttle.max_downloads.set &#x3D; 50</span><br><span class="line">throttle.max_uploads.set &#x3D; 100</span><br><span class="line"></span><br><span class="line"># Set the numwant field sent to the tracker, which indicates how many peers we want.</span><br><span class="line">#  A negative value disables this feature. Default: &#96;-1&#96; (&#96;tracker_numwant&#96;)</span><br><span class="line">trackers.numwant.set &#x3D; 100</span><br><span class="line"></span><br><span class="line">protocol.encryption.set &#x3D; allow_incoming,try_outgoing,enable_retry</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Limits for file handle resources, this is optimized for</span><br><span class="line">## an &#96;ulimit&#96; of 1024 (a common default). You MUST leave</span><br><span class="line">## a ceiling of handles reserved for rTorrent&#39;s internal needs!</span><br><span class="line">network.http.max_open.set &#x3D; 99</span><br><span class="line">network.max_open_files.set &#x3D; 600</span><br><span class="line">network.max_open_sockets.set &#x3D; 999</span><br><span class="line"></span><br><span class="line">## Memory resource usage (increase if you have a large number of items loaded,</span><br><span class="line">## and&#x2F;or the available resources to spend)</span><br><span class="line">pieces.memory.max.set &#x3D; 4096M</span><br><span class="line"># Max packet size using xmlrpc. Default: &#96;524288&#96; (xmlrpc_size_limit)</span><br><span class="line">network.xmlrpc.size_limit.set &#x3D; 4M</span><br><span class="line"></span><br><span class="line"># Send and receive buffer size for socket. Disabled by default (&#96;0&#96;), this means the default is used by OS</span><br><span class="line">#  (you have to modify the system wide settings!) (&#96;send_buffer_size&#96;, &#96;receive_buffer_size&#96;)</span><br><span class="line"># Increasing buffer sizes may help reduce disk seeking, connection polling as more data is buffered each time</span><br><span class="line">#  the socket is written to. It will result higher memory usage (not visible in rtorrent process!).</span><br><span class="line">network.receive_buffer.size.set &#x3D;  4M</span><br><span class="line">network.send_buffer.size.set    &#x3D; 12M</span><br><span class="line"></span><br><span class="line"># Preloading a piece of a file. Default: &#96;0&#96; Possible values: &#96;0&#96; (Off) , &#96;1&#96; (Madvise) , &#96;2&#96; (Direct paging).</span><br><span class="line">pieces.preload.type.set &#x3D; 2</span><br><span class="line">#pieces.preload.min_size.set &#x3D; 262144</span><br><span class="line">#pieces.preload.min_rate.set &#x3D; 5120</span><br><span class="line"></span><br><span class="line"># TOS of peer connections. Default: &#96;throughput&#96;. If the option is set to &#96;default&#96; then the system default TOS</span><br><span class="line">#  is used. A hex value may be used for non-standard settings.  (&#96;tos&#96;)</span><br><span class="line"># Possible values: &#96;[default|lowdelay|throughput|reliability|mincost]&#96; or a hex value.</span><br><span class="line">#network.tos.set &#x3D; throughput</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Basic operational settings (no need to change these)</span><br><span class="line">session.path.set &#x3D; (cat, (cfg.session))</span><br><span class="line">directory.default.set &#x3D; (cat, (cfg.download))</span><br><span class="line">log.execute &#x3D; (cat, (cfg.logs), &quot;execute.log&quot;)</span><br><span class="line">#log.xmlrpc &#x3D; (cat, (cfg.logs), &quot;xmlrpc.log&quot;)</span><br><span class="line">execute.nothrow &#x3D; sh, -c, (cat, &quot;echo &gt;&quot;,\</span><br><span class="line">    (session.path), &quot;rtorrent.pid&quot;, &quot; &quot;,(system.pid))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Other operational settings (check &amp; adapt)</span><br><span class="line">encoding.add &#x3D; utf8</span><br><span class="line">system.umask.set &#x3D; 0022</span><br><span class="line">system.cwd.set &#x3D; (directory.default)</span><br><span class="line"></span><br><span class="line"># CURL option to lower DNS timeout. Default: &#96;60&#96;.</span><br><span class="line">network.http.dns_cache_timeout.set &#x3D; 25</span><br><span class="line"></span><br><span class="line">schedule2 &#x3D; monitor_diskspace, 15, 60, ((close_low_diskspace, 1000M))</span><br><span class="line">pieces.hash.on_completion.set &#x3D; no</span><br><span class="line">#view.sort_current &#x3D; seeding, greater&#x3D;d.ratio&#x3D;</span><br><span class="line">#keys.layout.set &#x3D; qwerty</span><br><span class="line">#network.http.capath.set &#x3D; &quot;&#x2F;etc&#x2F;ssl&#x2F;certs&quot;</span><br><span class="line"></span><br><span class="line"># CURL options to add support for nonofficial SSL trackers and peers</span><br><span class="line">network.http.ssl_verify_peer.set &#x3D; 0</span><br><span class="line">#network.http.ssl_verify_host.set &#x3D; 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Some additional values and commands</span><br><span class="line">method.insert &#x3D; system.startup_time, value|const, (system.time)</span><br><span class="line">method.insert &#x3D; d.data_path, simple,\</span><br><span class="line">    &quot;if&#x3D;(d.is_multi_file),\</span><br><span class="line">        (cat, (d.directory), &#x2F;),\</span><br><span class="line">        (cat, (d.directory), &#x2F;, (d.name))&quot;</span><br><span class="line">method.insert &#x3D; d.session_file, simple, &quot;cat&#x3D;(session.path), (d.hash), .torrent&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Watch directories (add more as you like, but use unique schedule names)</span><br><span class="line">## Add torrent</span><br><span class="line">schedule2 &#x3D; watch_load, 11, 10, ((load.verbose, (cat, (cfg.watch), &quot;load&#x2F;*.torrent&quot;)))</span><br><span class="line">## Add &amp; download straight away</span><br><span class="line">schedule2 &#x3D; watch_start, 10, 10, ((load.start_verbose, (cat, (cfg.watch), &quot;start&#x2F;*.torrent&quot;)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Run the rTorrent process as a daemon in the background</span><br><span class="line">## (and control via XMLRPC sockets)</span><br><span class="line">#system.daemon.set &#x3D; true</span><br><span class="line">#network.scgi.open_local &#x3D; (cat,(session.path),rpc.socket)</span><br><span class="line">#execute.nothrow &#x3D; chmod,770,(cat,(session.path),rpc.socket)</span><br><span class="line">scgi_port &#x3D; 127.0.0.1:5000</span><br><span class="line"></span><br><span class="line">## Logging:</span><br><span class="line">##   Levels &#x3D; critical error warn notice info debug</span><br><span class="line">##   Groups &#x3D; connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*</span><br><span class="line">print &#x3D; (cat, &quot;Logging to &quot;, (cfg.logfile))</span><br><span class="line">log.open_file &#x3D; &quot;log&quot;, (cfg.logfile)</span><br><span class="line">log.add_output &#x3D; &quot;info&quot;, &quot;log&quot;</span><br><span class="line">#log.add_output &#x3D; &quot;tracker_debug&quot;, &quot;log&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Save all the sessions in every 8 hours instead of the default 20 minutes.</span><br><span class="line">schedule2 &#x3D; session_save, 1200, 28800, ((session.save))</span><br><span class="line"></span><br><span class="line"># Prune file status in every 24 hours, this is the default setting.</span><br><span class="line">#schedule2 &#x3D; prune_file_status, 3600, 86400, ((system.file_status_cache.prune))</span><br><span class="line"></span><br><span class="line"># Whether to allocate disk space for a new torrent. Default: &#96;0&#96;</span><br><span class="line">system.file.allocate.set &#x3D; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### END of rtorrent.rc ###</span><br></pre></td></tr></table></figure><br>修改后运行<code>rtorrent</code>测试配置文件，无问题后<code>Ctrl+Q</code>退出。  </p><h2 id="设置服务开机运行"><a href="#设置服务开机运行" class="headerlink" title="设置服务开机运行"></a><a href="https://github.com/rakshasa/rtorrent/wiki/Common-Tasks-in-rTorrent#ubuntu-16-04-with-systemd" target="_blank" rel="noopener">设置服务开机运行</a></h2><p>创建<code>/etc/systemd/system/rtorrent.service</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;rtorrent (in tmux)</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;oneshot</span><br><span class="line">RemainAfterExit&#x3D;yes</span><br><span class="line">User&#x3D;yourname</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;tmux -2 new-session -d -s rtorrent rtorrent</span><br><span class="line">ExecStop&#x3D;&#x2F;usr&#x2F;bin&#x2F;tmux kill-session -t rtorrent</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;default.target</span><br></pre></td></tr></table></figure><br>启用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> rtorrent.service</span><br><span class="line">sudo systemctl start rtorrent.service</span><br></pre></td></tr></table></figure></p><h1 id="ruTorrent"><a href="#ruTorrent" class="headerlink" title="ruTorrent"></a>ruTorrent</h1><h2 id="安装配置apache"><a href="#安装配置apache" class="headerlink" title="安装配置apache"></a>安装配置apache</h2><p>选择apache是因为其对SCGI的支持比较好，且个人网站没有处理高并发的需求，故没选Nginx。<br>安装依赖。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2 libapache2-mod-php7.2</span><br><span class="line">sudo apt-get install php7.2-gd php7.2-json php7.2-curl php7.2-mbstring php7.2-intl php-imagick php7.2-xml php7.2-zip libapache2-mod-scgi</span><br></pre></td></tr></table></figure><br>启用<code>.htaccess</code>。修改<code>/etc/apache2/apache2.conf</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &#x2F;var&#x2F;www&#x2F;&gt;</span><br><span class="line">  AllowOverride All</span><br></pre></td></tr></table></figure><br>开启headers模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod headers</span><br></pre></td></tr></table></figure><br>复制默认https站点配置并在此基础上修改。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/example.com.conf</span><br><span class="line">sudo vi /etc/apache2/sites-available/example.com.conf</span><br></pre></td></tr></table></figure><br>设置HSTS。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_headers.c&gt;</span><br><span class="line">  Header always set Strict-Transport-Security &quot;max-age&#x3D;15552000; includeSubDomains&quot;</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure><br>启动ssl，禁用默认站点，启用本站配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod ssl</span><br><span class="line">sudo a2ensite example.com.conf</span><br><span class="line">sudo a2dissite 000-default.conf</span><br><span class="line">sudo systemctl reload apache2</span><br></pre></td></tr></table></figure></p><h2 id="修改php上传文件大小上限"><a href="#修改php上传文件大小上限" class="headerlink" title="修改php上传文件大小上限"></a>修改php上传文件大小上限</h2><p>以apache为例，修改<code>/etc/php/7.2/apache2/php.ini</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upload_max_filesize &#x3D; 64M</span><br><span class="line">max_file_uploads &#x3D; 200</span><br><span class="line">post_max_size &#x3D; 128M</span><br></pre></td></tr></table></figure><br>重启apache服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure></p><h2 id="安装web界面rutorrent"><a href="#安装web界面rutorrent" class="headerlink" title="安装web界面rutorrent"></a>安装web界面<a href="https://github.com/Novik/ruTorrent/wiki/WebSERVER" target="_blank" rel="noopener">rutorrent</a></h2><p>安装依赖。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zip unzip zlib1g-dev ffmpeg mediainfo unrar sox</span><br></pre></td></tr></table></figure><br>下载<a href="https://github.com/Novik/ruTorrent/releases" target="_blank" rel="noopener">ruTorrent</a>并解压。<br>复制到网页文件夹并修改权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r ruTorrent &#x2F;var&#x2F;www&#x2F;example.com</span><br><span class="line">sudo chown -R www-data:www-data &#x2F;var&#x2F;www&#x2F;example.com&#x2F;ruTorrent</span><br></pre></td></tr></table></figure><br><a href="https://github.com/Novik/ruTorrent/wiki/Plugins#uninstallation" target="_blank" rel="noopener">禁用不用的插件</a>，修改<code>ruTorrent/conf/plugins.ini</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[_cloudflare]</span><br><span class="line">enabled &#x3D; no</span><br></pre></td></tr></table></figure><br>启用访问密码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo htpasswd -c &#x2F;etc&#x2F;apache2&#x2F;.htpasswd yourname</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /var/www/example.com/ruTorrent/htaccess-example /var/www/example.com/ruTorrent/.htaccess</span><br><span class="line">sudo vi /var/www/example.com/ruTorrent/.htaccess</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AuthType Basic</span><br><span class="line">AuthName &quot;yourname&quot;</span><br><span class="line">AuthUserFile  &quot;&#x2F;etc&#x2F;apache2&#x2F;.htpasswd&quot;</span><br><span class="line">require valid-user</span><br></pre></td></tr></table></figure></p><h1 id="通过samba共享下载文件夹"><a href="#通过samba共享下载文件夹" class="headerlink" title="通过samba共享下载文件夹"></a>通过samba共享下载文件夹</h1><p>安装samba。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install samba samba-common-bin</span><br></pre></td></tr></table></figure><br>编辑<code>/etc/samba/smb.conf</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[pt]</span><br><span class="line">Comment &#x3D; pt download folder</span><br><span class="line">Path &#x3D; &#x2F;path&#x2F;to&#x2F;pt</span><br><span class="line">Browseable &#x3D; yes</span><br><span class="line">Writeable &#x3D; Yes</span><br><span class="line">only guest &#x3D; no</span><br><span class="line">create mask &#x3D; 0775</span><br><span class="line">directory mask &#x3D; 0775</span><br><span class="line">Public &#x3D; yes</span><br></pre></td></tr></table></figure><br>设置访问密码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo smbpasswd -a yourname</span><br></pre></td></tr></table></figure><br>重启服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service smbd restart</span><br></pre></td></tr></table></figure></p><h1 id="pyrocore（可选）"><a href="#pyrocore（可选）" class="headerlink" title="pyrocore（可选）"></a><a href="https://github.com/pyroscope/pyrocore" target="_blank" rel="noopener">pyrocore</a>（可选）</h1><p>强大的种子修改命令行工具集。需要python2的运行环境。</p><h2 id="安装conda"><a href="#安装conda" class="headerlink" title="安装conda"></a>安装conda</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;miniconda&#x2F;Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">bash Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>改为国内源，修改<code>~/.condarc</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;menpo&#x2F;</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;</span><br><span class="line">  - defaults</span><br><span class="line"></span><br><span class="line">show_channel_urls: true</span><br></pre></td></tr></table></figure><br>创建python2环境。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n py2 python&#x3D;2</span><br></pre></td></tr></table></figure></p><h2 id="安装pyroscope"><a href="#安装pyroscope" class="headerlink" title="安装pyroscope"></a>安装pyroscope</h2><p>安装依赖和创建安装文件夹。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python python-dev python-virtualenv python-pip python-setuptools python-pkg-resources git build-essential</span><br><span class="line">mkdir -p ~/bin ~/.<span class="built_in">local</span></span><br></pre></td></tr></table></figure><br>修改<code>~/.bashrc</code>，末尾添加此句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;$PATH:&#x2F;home&#x2F;yourname&#x2F;bin</span><br></pre></td></tr></table></figure><br>克隆源码，激活py2环境，安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone &quot;https:&#x2F;&#x2F;github.com&#x2F;pyroscope&#x2F;pyrocore.git&quot; ~&#x2F;.local&#x2F;pyroscope</span><br><span class="line">source activate py2</span><br><span class="line">~&#x2F;.local&#x2F;pyroscope&#x2F;update-to-head.sh</span><br></pre></td></tr></table></figure><br>运行<code>pyroadmin --version</code>以检查是否安装成功。  </p><h1 id="常用任务"><a href="#常用任务" class="headerlink" title="常用任务"></a>常用任务</h1><h2 id="批量改tracker"><a href="#批量改tracker" class="headerlink" title="批量改tracker"></a>批量改tracker</h2><p>左下角Trackers栏右键需要更改的网站，选中所有该站种子后停止，编辑种子，在弹出的窗口中修改新网址保存即可。  </p><h2 id="辅种时跳过哈希校验"><a href="#辅种时跳过哈希校验" class="headerlink" title="辅种时跳过哈希校验"></a>辅种时跳过哈希校验</h2><p>一般来说，添加种子时选中<code>Fast resume</code>即可跳过。但其使用的<code>rtorrent_fast_resume.pl</code><a href="https://github.com/rakshasa/rtorrent/issues/531" target="_blank" rel="noopener">有Bug</a>，如果有文件夹为纯数字则无法正常跳过校验。<br>这时就需要用到前面安装的<code>pyroscope</code>工具集中的<a href="https://pyrocore.readthedocs.io/en/latest/references.html#chtor" target="_blank" rel="noopener">chtor</a>来制作可跳过检验的种子。以某个无法用perl脚本跳过的IMDB大包为例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chtor -H <span class="string">'/path/to/pt/movie/IMDb.2017.09.29.Top.250.BluRay.1080p.x265.10bit.MNHD-FRDS'</span>  *.torrent -o ./new</span><br></pre></td></tr></table></figure><br>上述命令将把工作目录下所有的种子添加校验部分，并在’new’文件夹下生成新种子。没有’-o’选项则会直接修改种子。由于是和指定路径下文件简单比较大小，故比计算哈希值快得多。  </p><h2 id="修改已制作种子校验值和tracker方便多站发布"><a href="#修改已制作种子校验值和tracker方便多站发布" class="headerlink" title="修改已制作种子校验值和tracker方便多站发布"></a>修改已制作种子校验值和tracker方便多站发布</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chtor --reannounce-all=https://pt.site.com/announce.php *.torrent</span><br></pre></td></tr></table></figure><p>上述命令将把工作目录下所有的种子更改tracker并修改哈希值以免pt软件认为是同样的种子，直接跳过而无法辅种。方便在多个站点同时发布种子而不用重复制作种子。  </p><h2 id="手动保存session信息"><a href="#手动保存session信息" class="headerlink" title="手动保存session信息"></a>手动保存session信息</h2><p>注意前面给出的配置文件中，为了避免频繁读取硬盘所以将保存session的间隔是设为8小时。但有时也会碰到刚下完种子没多久需要重启维护的情况，这时需要手动保存session信息以免丢失刚下的种子进度信息而需要重新校验。<br>通过<code>tmux a -t rtorrent</code>进入rtorrent界面。用<code>Ctrl+x</code>调出命令行，输入<code>session.save=</code>并回车（别漏了最后的等号），稍等即可完成保存session信息。  </p><h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="Tracker-Peer-certificate-cannot-be-authenticated-with-given-CA-certificates"><a href="#Tracker-Peer-certificate-cannot-be-authenticated-with-given-CA-certificates" class="headerlink" title="Tracker: [Peer certificate cannot be authenticated with given CA certificates]"></a>Tracker: [Peer certificate cannot be authenticated with given CA certificates]</h2><p>原因是该pt站的ssl证书有问题，想跳过检验可在配置文件’~/.rtorrent.rc’添加这句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">network.http.ssl_verify_peer.set &#x3D; 0</span><br></pre></td></tr></table></figure></p><h2 id="No-connection-to-rTorrent-Check-if-it-is-really-running-Check-scgi-port-and-scgi-host-settings-in-config-php-and-scgi-port-in-rTorrent-configuration-file"><a href="#No-connection-to-rTorrent-Check-if-it-is-really-running-Check-scgi-port-and-scgi-host-settings-in-config-php-and-scgi-port-in-rTorrent-configuration-file" class="headerlink" title="No connection to rTorrent. Check if it is really running. Check $scgi_port and $scgi_host settings in config.php and scgi_port in rTorrent configuration file."></a>No connection to rTorrent. Check if it is really running. Check $scgi_port and $scgi_host settings in config.php and scgi_port in rTorrent configuration file.</h2><p>首先，运行<code>tmux ls</code>以确定rTorrent服务是否正常运行。若没有相关进程，则执行<code>rtorrent</code>并查看error信息。  </p><h2 id="rtorrent-Could-not-lock-session-directory"><a href="#rtorrent-Could-not-lock-session-directory" class="headerlink" title="rtorrent: Could not lock session directory"></a>rtorrent: Could not lock session directory</h2><p>这种情况通常发生在rtorrent非正常退出的情况。比如通过rutorrent删除大种子及文件。解决办法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;path&#x2F;to&#x2F;pt&#x2F;rtorrent&#x2F;.session</span><br><span class="line">rm -rf rtorrent.lock</span><br><span class="line">sudo systemctl restart rtorrent.service</span><br></pre></td></tr></table></figure><br>删除内容较多的大种子建议先通过rutorrent仅删除种子，再通过<code>ssh</code>或<code>samba</code>删除文件。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ubuntu 18.04官方源的rTorrent 0.9.6会导致误报上传，故从源码编译0.9.7。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="pt" scheme="https://blog.mjyai.com/tags/pt/"/>
    
  </entry>
  
  <entry>
    <title>用Docker部署64位ARM版的seafile</title>
    <link href="https://blog.mjyai.com/2019/05/20/seafile-docker-arm64/"/>
    <id>https://blog.mjyai.com/2019/05/20/seafile-docker-arm64/</id>
    <published>2019-05-20T02:39:33.000Z</published>
    <updated>2020-03-29T14:18:00.650Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.seafile.com/home/" target="_blank" rel="noopener">seafile</a>是开源的企业私有网盘，用法类似于百度网盘，但数据都是自己的，且上传下载仅限于带宽。但官方并未提供arm64的支持，所以我从源码编译了arm64版并制成docker镜像方便部署。<br><a id="more"></a>  </p><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>从<a href="https://www.seafile.com/download/" target="_blank" rel="noopener">官方下载页面</a>可见服务器端没有arm64，倒是有armhf(arm32v7)，但目前市面上用ARM的NAS基本上都是arm64的，且NAS的系统通常比较特殊，并不能像常见linux系统那样<a href="https://manual-cn.seafile.com/deploy/using_mysql.html" target="_blank" rel="noopener">部署Seafile服务器</a>，而<a href="https://hub.docker.com/r/seafileltd/seafile/tags" target="_blank" rel="noopener">官方提供的Docker镜像</a>只支持x86架构。<br>故需要做的工作有两件：  </p><ol><li>从<a href="https://github.com/haiwen/seafile-server" target="_blank" rel="noopener">源码</a>编译seafile的arm64架构服务器端。</li><li>制成docker镜像方便部署。</li></ol><h1 id="部署docker镜像"><a href="#部署docker镜像" class="headerlink" title="部署docker镜像"></a>部署docker镜像</h1><p>将<code>/opt/seafile</code>改成你的路径。端口<code>8000</code>用来访问seafile，<code>8080</code>用于WebDAV（需要<a href="https://manual-cn.seafile.com/extension/webdav.html" target="_blank" rel="noopener">启用</a>），<code>8082</code>用来访问管理页面seahub。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name seafile \</span><br><span class="line">  -v /opt/seafile:/home/seafile \</span><br><span class="line">  -p 8000:8000 \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -p 8082:8082 \</span><br><span class="line">  -ti mjysci/seafile:arm64v8</span><br></pre></td></tr></table></figure><br>第一次运行需要设置domain，管理员账户等。设置完毕后通过<code>Ctrl+P</code>和<code>Ctrl+Q</code>退出tty界面。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.seafile.com/home/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;seafile&lt;/a&gt;是开源的企业私有网盘，用法类似于百度网盘，但数据都是自己的，且上传下载仅限于带宽。但官方并未提供arm64的支持，所以我从源码编译了arm64版并制成docker镜像方便部署。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://blog.mjyai.com/tags/docker/"/>
    
      <category term="arm" scheme="https://blog.mjyai.com/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>树莓派3安装arm64版Ubuntu 18.04 Server</title>
    <link href="https://blog.mjyai.com/2019/05/20/rpi3-ubuntu-arm64/"/>
    <id>https://blog.mjyai.com/2019/05/20/rpi3-ubuntu-arm64/</id>
    <published>2019-05-20T02:02:38.000Z</published>
    <updated>2020-05-04T04:12:22.985Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派官方的Raspbian为了保持向下兼容仍然是32位，64位的树莓派3不跑64位系统和咸鱼有什么区别？<br><a id="more"></a></p><h1 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h1><p><a href="https://www.ubuntu.com/download/iot/raspberry-pi-2-3" target="_blank" rel="noopener">Ubuntu官方</a>已经提供了<a href="http://cdimage.ubuntu.com/releases/bionic/release/ubuntu-18.04.2-preinstalled-server-arm64+raspi3.img.xz" target="_blank" rel="noopener">树莓派3的镜像</a>，直接下载即可。</p><h1 id="刷TF卡"><a href="#刷TF卡" class="headerlink" title="刷TF卡"></a>刷TF卡</h1><p>如果打算玩docker建议至少32G以上，16G需要在调试的间隙清理掉无用的若干<none>容器和镜像以免空间不足。刷TF卡用<a href="https://www.balena.io/etcher/" target="_blank" rel="noopener">Etcher</a>即可。<br>默认用户名和密码均为<code>ubuntu</code>。</p><h1 id="改源"><a href="#改源" class="headerlink" title="改源"></a>改源</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>旧的源是<code>http://ports.ubuntu.com</code>，批量改成科大源并注释掉<code>deb-src</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:%s/http:\/\/ports.ubuntu.com/https:\/\/mirrors.ustc.edu.cn/g</span><br><span class="line">:%s/deb-src/<span class="comment">#deb-src/g</span></span><br></pre></td></tr></table></figure></p><h1 id="设置wifi"><a href="#设置wifi" class="headerlink" title="设置wifi"></a>设置wifi</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install network-manager</span><br><span class="line">sudo service network-manager start</span><br><span class="line">sudo nmtui</span><br></pre></td></tr></table></figure><h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="Unable-to-acquire-the-dpkg-frontend-lock-var-lib-dpkg-lock-frontend-is-another-process-using-it"><a href="#Unable-to-acquire-the-dpkg-frontend-lock-var-lib-dpkg-lock-frontend-is-another-process-using-it" class="headerlink" title="Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?"></a>Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/lib/dpkg/lock*</span><br><span class="line">sudo dpkg --configure -a</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h2 id="dpkg-error-parsing-file-‘-var-lib-dpkg-updates-0004’-near-line-0"><a href="#dpkg-error-parsing-file-‘-var-lib-dpkg-updates-0004’-near-line-0" class="headerlink" title="dpkg: error: parsing file ‘/var/lib/dpkg/updates/0004’ near line 0"></a>dpkg: error: parsing file ‘/var/lib/dpkg/updates/0004’ near line 0</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/lib/dpkg/updates &amp;&amp; sudo rm -rf 0004</span><br><span class="line">sudo dpkg --configure -a</span><br></pre></td></tr></table></figure><h1 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install sysbench</span><br><span class="line">sysbench --<span class="built_in">test</span>=cpu --cpu-max-prime=20000 run</span><br></pre></td></tr></table></figure><p>树莓派3B（BCM2837）测试结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">sysbench 1.0.11 (using system LuaJIT 2.1.0-beta3)</span><br><span class="line"></span><br><span class="line">Running the test with following options:</span><br><span class="line">Number of threads: 1</span><br><span class="line">Initializing random number generator from current time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Prime numbers limit: 20000</span><br><span class="line"></span><br><span class="line">Initializing worker threads...</span><br><span class="line"></span><br><span class="line">Threads started!</span><br><span class="line"></span><br><span class="line">CPU speed:</span><br><span class="line">    events per second:   220.37</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          10.0007s</span><br><span class="line">    total number of events:              2206</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                  4.21</span><br><span class="line">         avg:                                  4.53</span><br><span class="line">         max:                                  8.78</span><br><span class="line">         95th percentile:                      8.58</span><br><span class="line">         sum:                               9996.78</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg&#x2F;stddev):           2206.0000&#x2F;0.00</span><br><span class="line">    execution time (avg&#x2F;stddev):   9.9968&#x2F;0.00</span><br></pre></td></tr></table></figure><br>i5-8400<a href="https://blog.mjyai.com/2019/03/12/qemu-ubuntu-arm64/">用qemu模拟aarch64架构</a>在ubuntu 16.04下测试结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sysbench 0.4.12:  multi-threaded system evaluation benchmark</span><br><span class="line"></span><br><span class="line">Running the test with following options:</span><br><span class="line">Number of threads: 1</span><br><span class="line"></span><br><span class="line">Doing CPU performance benchmark</span><br><span class="line"></span><br><span class="line">Threads started!</span><br><span class="line">Done.</span><br><span class="line"></span><br><span class="line">Maximum prime number checked in CPU test: 20000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Test execution summary:</span><br><span class="line">    total time:                          45.2990s</span><br><span class="line">    total number of events:              10000</span><br><span class="line">    total time taken by event execution: 45.2838</span><br><span class="line">    per-request statistics:</span><br><span class="line">         min:                                  4.42ms</span><br><span class="line">         avg:                                  4.53ms</span><br><span class="line">         max:                                  5.26ms</span><br><span class="line">         approx.  95 percentile:               4.62ms</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg&#x2F;stddev):           10000.0000&#x2F;0.00</span><br><span class="line">    execution time (avg&#x2F;stddev):   45.2838&#x2F;0.00</span><br></pre></td></tr></table></figure><br>i5-8400在ubuntu 18.04下测试结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">sysbench 1.0.11 (using system LuaJIT 2.1.0-beta3)</span><br><span class="line"></span><br><span class="line">Running the test with following options:</span><br><span class="line">Number of threads: 1</span><br><span class="line">Initializing random number generator from current time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Prime numbers limit: 20000</span><br><span class="line"></span><br><span class="line">Initializing worker threads...</span><br><span class="line"></span><br><span class="line">Threads started!</span><br><span class="line"></span><br><span class="line">CPU speed:</span><br><span class="line">    events per second:   549.44</span><br><span class="line"></span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          10.0018s</span><br><span class="line">    total number of events:              5496</span><br><span class="line"></span><br><span class="line">Latency (ms):</span><br><span class="line">         min:                                  1.81</span><br><span class="line">         avg:                                  1.82</span><br><span class="line">         max:                                  5.85</span><br><span class="line">         95th percentile:                      1.86</span><br><span class="line">         sum:                              10000.89</span><br><span class="line"></span><br><span class="line">Threads fairness:</span><br><span class="line">    events (avg&#x2F;stddev):           5496.0000&#x2F;0.00</span><br><span class="line">    execution time (avg&#x2F;stddev):   10.0009&#x2F;0.00</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树莓派官方的Raspbian为了保持向下兼容仍然是32位，64位的树莓派3不跑64位系统和咸鱼有什么区别？&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="arm" scheme="https://blog.mjyai.com/tags/arm/"/>
    
      <category term="ubuntu" scheme="https://blog.mjyai.com/tags/ubuntu/"/>
    
      <category term="rpi" scheme="https://blog.mjyai.com/tags/rpi/"/>
    
  </entry>
  
  <entry>
    <title>解决win10下Ryzen平台间歇性卡顿问题</title>
    <link href="https://blog.mjyai.com/2019/04/23/fix-win10-ryzen-freeze/"/>
    <id>https://blog.mjyai.com/2019/04/23/fix-win10-ryzen-freeze/</id>
    <published>2019-04-23T06:17:10.000Z</published>
    <updated>2019-04-23T07:20:48.506Z</updated>
    
    <content type="html"><![CDATA[<p>具体现象为几十分钟内会有一次几十秒的卡顿，视频播放停止，鼠标不能动。<br><a id="more"></a><br>旧的客厅用htpc是J1900的，由于不支持硬解x265，而软解4k又比较卡，所以换成了ryzen apu，轻松播放<a href="http://madvr.com" target="_blank" rel="noopener">madVR</a>渲染的4k hevc高码率视频。只是换机后碰到播放视频间歇性卡顿的问题。  </p><h1 id="分析与尝试"><a href="#分析与尝试" class="headerlink" title="分析与尝试"></a>分析与尝试</h1><p>注意到卡顿时硬盘读取灯常亮，打开任务管理器观察磁盘占用达100%，但列表中并没有高I/O的程序。  </p><h2 id="安装avast替代Windows-Defender"><a href="#安装avast替代Windows-Defender" class="headerlink" title="安装avast替代Windows Defender"></a>安装avast替代Windows Defender</h2><p>Windows Defender有着空闲时扫描硬盘和CPU占用高的问题，虽然这在SSD和多核时代可以忽略，但我还是先用<a href="https://www.avast.com" target="_blank" rel="noopener">免费的avast</a>试试看。结果问题依旧。</p><h2 id="更新主板芯片驱动"><a href="#更新主板芯片驱动" class="headerlink" title="更新主板芯片驱动"></a>更新主板芯片驱动</h2><p>故怀疑是驱动问题，am4主板在早期曾爆出由于芯片组外包给祥硕，赶工导致的一些主板问题。主板是华擎的<a href="https://www.asrock.com/mb/AMD/A320M-HDV/index.asp#Download" target="_blank" rel="noopener">A320M-HDV</a>，官方提供了芯片+显卡的驱动合集包，已经安装，并且升级了显卡驱动。于是去AMD官方下载<a href="https://www.amd.com/en/support/chipsets/amd-socket-am4/a320" target="_blank" rel="noopener">AMD Chipset Drivers</a>，安装后问题依旧。  </p><h2 id="更新SATA控制器驱动"><a href="#更新SATA控制器驱动" class="headerlink" title="更新SATA控制器驱动"></a>更新SATA控制器驱动</h2><p>查看设备管理器，可见<code>IDE ATA/ATAPI控制器</code>依旧为2006年的<code>标准 SATA AHCI 控制器</code>，AMD官方芯片驱动并未更新此项。于是右键更新驱动程序，选手动，选定解压后的文件夹搜索，没有结果。选<code>可用驱动程序列表中选取</code>，取消<code>显示兼容硬件</code>，厂商<code>AMD</code>，装上<code>AMD SATA 控制器</code>。更新后问题依旧。</p><h2 id="查看事件查看器"><a href="#查看事件查看器" class="headerlink" title="查看事件查看器"></a>查看事件查看器</h2><p>Windows日志——系统，发现来源amdsata有很多<code>事件129</code>的警告。内容为：发出了对设备 \Device\RaidPort0 的重置。<br>故怀疑是SATA电源非正常进入节能模式导致的接口重置。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="解锁电源管理隐藏选项"><a href="#解锁电源管理隐藏选项" class="headerlink" title="解锁电源管理隐藏选项"></a>解锁电源管理隐藏选项</h2><p>以管理员模式打开cmd，运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercfg -attributes SUB_DISK 0b2d69d7-a2a1-449c-9680-f91c70521c60 -ATTRIB_HIDE</span><br></pre></td></tr></table></figure></p><h2 id="更改高级电源设置"><a href="#更改高级电源设置" class="headerlink" title="更改高级电源设置"></a>更改高级电源设置</h2><p>电源和睡眠设置——其他电源设置——更改计划设置——更改高级电源设置——更改当前不可用的设置——硬盘——AHCI Link Power Management - HIPM/DIPM<br>设置改为<code>Active</code>。问题解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;具体现象为几十分钟内会有一次几十秒的卡顿，视频播放停止，鼠标不能动。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="win" scheme="https://blog.mjyai.com/tags/win/"/>
    
  </entry>
  
  <entry>
    <title>通过pass实现更安全的docker登录方式</title>
    <link href="https://blog.mjyai.com/2019/03/14/docker-credential-login/"/>
    <id>https://blog.mjyai.com/2019/03/14/docker-credential-login/</id>
    <published>2019-03-14T03:41:20.000Z</published>
    <updated>2019-03-21T05:13:56.314Z</updated>
    
    <content type="html"><![CDATA[<p>docker默认登录是将密码明文存在本地的<code>~/.docker/config.json</code>，随便找个<a href="https://paulschou.com/tools/xlate/" target="_blank" rel="noopener">base64的解码器</a>就能还原，存在安全隐患。此文通过pass实现更安全的docker登录方式。<br><a id="more"></a><br>测试平台：Raspberry Pi 3B with ubuntu 18.04.2 server aarch64<br>由于官方只发布了amd64的helper，所以其他架构需要从源码编译。另外<code>secretservice</code><a href="https://github.com/docker/compose/issues/6023#issuecomment-401089768" target="_blank" rel="noopener">需要X11</a>，所以没有桌面的server还是用<code>pass</code>。  </p><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install golang-go libsecret-1-dev gpg pass</span><br></pre></td></tr></table></figure><h1 id="取得源码并编译docker-credential-helpers"><a href="#取得源码并编译docker-credential-helpers" class="headerlink" title="取得源码并编译docker-credential-helpers"></a>取得源码并编译docker-credential-helpers</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/docker/docker-credential-helpers</span><br><span class="line"><span class="built_in">cd</span> ~/go/src/github.com/docker/docker-credential-helpers</span><br><span class="line">make pass</span><br><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line">chmod +x docker-credential-pass &amp;&amp; sudo mv docker-credential-pass /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><p>编辑docker配置文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.docker/config.json</span><br></pre></td></tr></table></figure><br>添加以下内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;credsStore&quot;: &quot;pass&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="生成gpg2-key"><a href="#生成gpg2-key" class="headerlink" title="生成gpg2 key"></a>生成gpg2 key</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --generate-key</span><br></pre></td></tr></table></figure><p>不要使用passphrase，记住你的uid。</p><h1 id="pass初始化"><a href="#pass初始化" class="headerlink" title="pass初始化"></a>pass初始化</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pass init <span class="string">"你的uid"</span></span><br></pre></td></tr></table></figure><h1 id="登录docker"><a href="#登录docker" class="headerlink" title="登录docker"></a>登录docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="push-fails-‘denied-requested-access-to-the-resource-is-denied’"><a href="#push-fails-‘denied-requested-access-to-the-resource-is-denied’" class="headerlink" title="push fails: ‘denied: requested access to the resource is denied’"></a>push fails: ‘denied: requested access to the resource is denied’</h2><p>原因是创建gpg key时使用了passphrase，而helper并不会弹出让你输入passphrase的选项。<br>方法一：登录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pass</span><br><span class="line">pass docker-credential-helpers/&lt;一些字串&gt;/&lt;用户名&gt;</span><br></pre></td></tr></table></figure><br>第一个命令列出<code>pass</code>文件夹结构。第二个命令执行后输入passphrase。<br>然后再试。<br>方法二：删掉passphrase。</p><pre><code class="bash">gpg --edit-key <span class="string">"你的uid"</span>passwd</code></pre><p>输入passphrase，然后设置新passphrase为空。最后<code>quit</code>退出。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://hackernoon.com/getting-rid-of-docker-plain-text-credentials-88309e07640d" target="_blank" rel="noopener">Getting rid of Docker plain text credentials</a><br><a href="https://docs.docker.com/engine/reference/commandline/login/#credentials-store" target="_blank" rel="noopener">docker login credentials-store</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker默认登录是将密码明文存在本地的&lt;code&gt;~/.docker/config.json&lt;/code&gt;，随便找个&lt;a href=&quot;https://paulschou.com/tools/xlate/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;base64的解码器&lt;/a&gt;就能还原，存在安全隐患。此文通过pass实现更安全的docker登录方式。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://blog.mjyai.com/tags/docker/"/>
    
      <category term="ubuntu" scheme="https://blog.mjyai.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ARM平台qnap用Docker部署aria2</title>
    <link href="https://blog.mjyai.com/2019/03/12/aria2-docker-arm-qnap/"/>
    <id>https://blog.mjyai.com/2019/03/12/aria2-docker-arm-qnap/</id>
    <published>2019-03-12T15:01:08.000Z</published>
    <updated>2019-04-23T06:19:14.988Z</updated>
    
    <content type="html"><![CDATA[<p>亦适用于其他64位的ARM平台（arm64v8）。<br><a id="more"></a><br>踩了些坑后发觉还是aria2+浏览器插件的方式更为方便灵活，如果喜欢ariaNg可在客户端运行。</p><h1 id="浏览器登录NAS"><a href="#浏览器登录NAS" class="headerlink" title="浏览器登录NAS"></a>浏览器登录NAS</h1><h1 id="设置aria2-conf"><a href="#设置aria2-conf" class="headerlink" title="设置aria2.conf"></a>设置aria2.conf</h1><p>在NAS中建立容器挂载的文件夹，我是在<code>Download</code>下建立<code>aria2</code>文件夹，然后其中又新建<code>downloads</code>和<code>config</code>。并在config中新建<code>aria2.conf</code>和<code>aria2.session</code>文件。<br>其中<code>aria2.conf</code>内容如下，把<code>YOUR_RPC_TOKEN</code>改成自己的secret，其他按实际情况自行定制，如PT则要把dht关掉，删去<code>enable-dht</code>之后的全部内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">save-session&#x3D;&#x2F;config&#x2F;aria2.session</span><br><span class="line">input-file&#x3D;&#x2F;config&#x2F;aria2.session</span><br><span class="line">save-session-interval&#x3D;60</span><br><span class="line"></span><br><span class="line">dir&#x3D;&#x2F;downloads</span><br><span class="line"></span><br><span class="line">file-allocation&#x3D;prealloc</span><br><span class="line">disk-cache&#x3D;128M</span><br><span class="line"></span><br><span class="line">enable-rpc&#x3D;true</span><br><span class="line">rpc-listen-port&#x3D;6800</span><br><span class="line">rpc-allow-origin-all&#x3D;true</span><br><span class="line">rpc-listen-all&#x3D;true</span><br><span class="line"></span><br><span class="line">rpc-secret&#x3D;YOUR_RPC_TOKEN</span><br><span class="line"></span><br><span class="line">max-concurrent-downloads&#x3D;6</span><br><span class="line">max-connection-per-server&#x3D;16</span><br><span class="line">min-split-size&#x3D;10M</span><br><span class="line">split&#x3D;16</span><br><span class="line">continue&#x3D;true</span><br><span class="line">max-overall-download-limit&#x3D;0</span><br><span class="line">max-overall-upload-limit&#x3D;500K</span><br><span class="line"></span><br><span class="line">enable-dht&#x3D;true</span><br><span class="line">bt-enable-lpd&#x3D;true</span><br><span class="line">bt-request-peer-speed-limit&#x3D;1000K</span><br><span class="line">bt-save-metadata&#x3D;true</span><br><span class="line">bt-max-peers&#x3D;0</span><br><span class="line">bt-require-crypto&#x3D;true</span><br><span class="line">enable-peer-exchange&#x3D;true</span><br><span class="line">listen-port&#x3D;20000-30000</span><br><span class="line">dht-listen-port&#x3D;30000-40000</span><br><span class="line">dht-file-path&#x3D;&#x2F;config&#x2F;dht.dat</span><br><span class="line">dht-file-path6&#x3D;&#x2F;config&#x2F;dht6.dat</span><br><span class="line">bt-tracker&#x3D;udp:&#x2F;&#x2F;62.138.0.158:6969&#x2F;announce,http:&#x2F;&#x2F;185.225.17.100:1337&#x2F;announce,udp:&#x2F;&#x2F;51.15.4.13:1337&#x2F;announce,udp:&#x2F;&#x2F;208.83.20.20:6969&#x2F;announce,udp:&#x2F;&#x2F;128.1.203.23:8080&#x2F;announce,udp:&#x2F;&#x2F;184.105.151.164:6969&#x2F;announce,http:&#x2F;&#x2F;128.1.203.23:6961&#x2F;announce,udp:&#x2F;&#x2F;51.15.40.114:80&#x2F;announce,udp:&#x2F;&#x2F;5.2.79.219:1337&#x2F;announce,udp:&#x2F;&#x2F;5.2.79.22:6969&#x2F;announce,udp:&#x2F;&#x2F;51.15.76.199:6969&#x2F;announce,udp:&#x2F;&#x2F;91.216.110.52:451&#x2F;announce,udp:&#x2F;&#x2F;5.206.28.90:6969&#x2F;announce,udp:&#x2F;&#x2F;51.38.184.185:6969&#x2F;announce,udp:&#x2F;&#x2F;176.31.106.35:80&#x2F;announce,udp:&#x2F;&#x2F;37.235.174.46:2710&#x2F;announce,udp:&#x2F;&#x2F;188.246.227.212:80&#x2F;announce,udp:&#x2F;&#x2F;95.211.168.204:2710&#x2F;announce,udp:&#x2F;&#x2F;8.9.31.140:2000&#x2F;announce,udp:&#x2F;&#x2F;212.47.227.58:6969&#x2F;announce</span><br></pre></td></tr></table></figure></p><h1 id="安装Container-Station"><a href="#安装Container-Station" class="headerlink" title="安装Container Station"></a>安装Container Station</h1><p>App Center -&gt; All Apps -&gt; Container Station -&gt; Install</p><h1 id="获取arm版aria2镜像"><a href="#获取arm版aria2镜像" class="headerlink" title="获取arm版aria2镜像"></a>获取arm版aria2镜像</h1><p>用ssh登录NAS，然后执行以下命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mjysci/aria2:arm64v8</span><br></pre></td></tr></table></figure></p><h1 id="获得用户的uid与gid"><a href="#获得用户的uid与gid" class="headerlink" title="获得用户的uid与gid"></a>获得用户的uid与gid</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id &lt;你的用户名&gt;</span><br></pre></td></tr></table></figure><h1 id="运行aria2容器"><a href="#运行aria2容器" class="headerlink" title="运行aria2容器"></a>运行aria2容器</h1><p>将下面命令中的<code>/share/Download/aria2/downloads</code>和<code>/share/Download/aria2/config</code>换成自己喜欢的位置。<code>-u=1000:100</code>是用户的uid和gid，换成你的id。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  -d \</span><br><span class="line">  --name aria2 \</span><br><span class="line">  -u=1000:100 \</span><br><span class="line">  -v /share/Download/aria2/config:/config \</span><br><span class="line">  -v /share/Download/aria2/downloads:/downloads \</span><br><span class="line">  -p 6800:6800 \</span><br><span class="line">  --restart=on-failure:5 \</span><br><span class="line">  mjysci/aria2:arm64v8</span><br></pre></td></tr></table></figure></p><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>安装<a href="https://chrome.google.com/webstore/detail/yaaw-for-chrome/dennnbdlpgjgbcjfgaohdahloollfgoc" target="_blank" rel="noopener">YAAW for Chrome</a>。点开图标后将设置中的<code>JSON-RPC Path</code>改成<code>http://token:YOUR_RPC_TOKEN@ip:6800/jsonrpc</code>。右键下载的设置是分开的，右键插件图标-&gt;Options-&gt;JSON-RPC，改成一样的地址。<br>喜欢AriaNg则可以使用<a href="https://github.com/mayswind/AriaNg/releases" target="_blank" rel="noopener">本地网页版AllInOne</a>或无需浏览器的<a href="https://github.com/mayswind/AriaNg-Native/releases" target="_blank" rel="noopener">应用版</a>。  </p><h1 id="过期资料备份"><a href="#过期资料备份" class="headerlink" title="过期资料备份"></a>过期资料备份</h1><h2 id="登录AriaNg"><a href="#登录AriaNg" class="headerlink" title="登录AriaNg"></a>登录AriaNg</h2><p>浏览器访问NAS:<code>&lt;yourip&gt;:6888</code>。<br>第一次登录会提示认证失败。<code>AriaNg 设置 -&gt; RPC -&gt; Aria2 RPC 密钥</code>处填上前面设置的<code>YOUR_RPC_TOKEN</code>并刷新。  </p><h2 id="QTS-UI设置步骤（可选）"><a href="#QTS-UI设置步骤（可选）" class="headerlink" title="QTS UI设置步骤（可选）"></a>QTS UI设置步骤（可选）</h2><h3 id="Create-Container-gt-Advanced-Settings下设置容器运行参数"><a href="#Create-Container-gt-Advanced-Settings下设置容器运行参数" class="headerlink" title="Create Container -&gt; Advanced Settings下设置容器运行参数"></a>Create Container -&gt; Advanced Settings下设置容器运行参数</h3><h4 id="Evironment"><a href="#Evironment" class="headerlink" title="Evironment"></a>Evironment</h4><p>添加Name为<code>SECRET</code>的环境变量，Value为你连接aria2要用到的RPC令牌，待会有用。</p><h4 id="Network-gt-Port-Forwarding"><a href="#Network-gt-Port-Forwarding" class="headerlink" title="Network -&gt; Port Forwarding"></a>Network -&gt; Port Forwarding</h4><p>Container的端口已自动填好，只需填入Host对应的端口，注意不要占用NAS的<code>80</code>和<code>8080</code>端口，如<code>6080</code>，<code>6888</code>。</p><h4 id="Shared-Folder"><a href="#Shared-Folder" class="headerlink" title="Shared Folder"></a>Shared Folder</h4><p>此处不要用默认的<code>New volume</code>栏，而是从<code>Volume from host</code>选择容器内<code>/downloads</code>和<code>/config</code>对应NAS的文件夹。</p><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><h3 id="下载文件写权限问题"><a href="#下载文件写权限问题" class="headerlink" title="下载文件写权限问题"></a>下载文件写权限问题</h3><p>如果是<code>admin</code>用户就无此问题，但为了安全我是另建了管理员用户并禁用了<code>admin</code>。docker下创建的文件夹只有owner有写权限，管理员组没有。<br>首先，尝试过<a href="https://www.binss.me/blog/solve-docker-permission-problem-by-using-user-namespace/" target="_blank" rel="noopener">开启Docker User Namespace</a>，但qnap系统比较特殊，修改<code>subuid</code>和<code>subgid</code>无效，无法开启。此方法适用于主流系统，如raspbian和ubuntu等。<br>然后，尝试了<code>docker run -u &lt;youruid&gt;</code>选项，但从外部通过浏览器访问ariang出问题。权限不对。<br>可以添加<code>owncloud</code>之类的进行文件管理，但我的需求是从下载文件夹直接剪切到其他文件夹，而不是复制再通过文件管理删除。<br>目前解决方案是Container Station -&gt; aria2 -&gt; Terminal -&gt; 运行/bin/sh，为所有已下载文件添加组写权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 775 -R /data/_dl/*</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;亦适用于其他64位的ARM平台（arm64v8）。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://blog.mjyai.com/tags/docker/"/>
    
      <category term="arm" scheme="https://blog.mjyai.com/tags/arm/"/>
    
      <category term="nas" scheme="https://blog.mjyai.com/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>ARM平台NAS（qnap TS-212P3）用Docker部署签到站</title>
    <link href="https://blog.mjyai.com/2019/03/12/qiandao-docker-qnap-arm/"/>
    <id>https://blog.mjyai.com/2019/03/12/qiandao-docker-qnap-arm/</id>
    <published>2019-03-12T03:44:42.000Z</published>
    <updated>2019-03-12T04:40:27.487Z</updated>
    
    <content type="html"><![CDATA[<p>亦适用于其他64位的ARM平台（arm64v8）。<br><a id="more"></a></p><h1 id="浏览器登录NAS"><a href="#浏览器登录NAS" class="headerlink" title="浏览器登录NAS"></a>浏览器登录NAS</h1><h1 id="安装Container-Station"><a href="#安装Container-Station" class="headerlink" title="安装Container Station"></a>安装Container Station</h1><p>App Center -&gt; All Apps -&gt; Container Station -&gt; Install</p><h1 id="安装qiandao"><a href="#安装qiandao" class="headerlink" title="安装qiandao"></a>安装qiandao</h1><p>Container Station -&gt; Create -&gt; 搜索qiandao -&gt; Docker Hub -&gt; 选择mjysci/qiandao -&gt; Install -&gt; 选择arm64v8<br>Create Container -&gt; Advanced Settings -&gt; Network -&gt; Port Forwarding<br>其中Host选NAS的空闲端口，如<code>3000</code>，Container则是<code>80</code>,Protocol是默认的<code>TCP</code>。</p><h1 id="配置站点管理员"><a href="#配置站点管理员" class="headerlink" title="配置站点管理员"></a>配置站点管理员</h1><p>浏览器访问NAS:<code>&lt;yourip&gt;:3000</code>并注册一个账户。<br>ssh登录NAS。<br>进入容器管理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it qiandao /bin/bash</span><br></pre></td></tr></table></figure><br>设置站点管理员。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ./chrole.py &lt;刚才注册的账户邮箱&gt; admin</span><br></pre></td></tr></table></figure></p><h1 id="配置邮件提醒"><a href="#配置邮件提醒" class="headerlink" title="配置邮件提醒"></a>配置邮件提醒</h1><p>先去<a href="https://www.mailgun.com/" target="_blank" rel="noopener">mailgun</a>注册免费账户，取得api key。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi config.py</span><br></pre></td></tr></table></figure><br>填写<code>mail_domain</code>和<code>mailgun_key</code>。<br>注：如果只是在内网用，无域名，则<code>mail_domain</code>填写<code>sandbox******.mailgun.org</code>，此域名可在<code>Messages-&gt;Domains</code>处取得，sandbox域名需指定<code>Authorized Recipients</code>，填自己的收件邮箱即可。<br>退出并重启容器。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;亦适用于其他64位的ARM平台（arm64v8）。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://blog.mjyai.com/tags/docker/"/>
    
      <category term="arm" scheme="https://blog.mjyai.com/tags/arm/"/>
    
      <category term="nas" scheme="https://blog.mjyai.com/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>通过QEMU在x86计算机上搭建arm64版ubuntu开发环境</title>
    <link href="https://blog.mjyai.com/2019/03/12/qemu-ubuntu-arm64/"/>
    <id>https://blog.mjyai.com/2019/03/12/qemu-ubuntu-arm64/</id>
    <published>2019-03-12T02:17:23.000Z</published>
    <updated>2019-03-12T03:24:47.427Z</updated>
    
    <content type="html"><![CDATA[<p>没有arm64板子的临时解决办法。<br><a id="more"></a><br>其实手头上是有个四核A53的树莓派3B的，但raspbian只有32位版且另有他用不方便换系统。而其他的板子SoC都是32位的（全志A20，H8，BCM2835，BCM2836等），只好先用模拟器装arm64版的ubuntu16.04对付一下。  </p><h1 id="安装QEMU"><a href="#安装QEMU" class="headerlink" title="安装QEMU"></a>安装QEMU</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y qemu qemu-utils cloud-utils</span><br></pre></td></tr></table></figure><h1 id="下载镜像和UEFI固件"><a href="#下载镜像和UEFI固件" class="headerlink" title="下载镜像和UEFI固件"></a>下载镜像和UEFI固件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://cloud-images.ubuntu.com/releases/16.04/release/ubuntu-16.04-server-cloudimg-arm64-uefi1.img</span><br><span class="line">wget https://releases.linaro.org/components/kernel/uefi-linaro/latest/release/qemu64/QEMU_EFI.fd</span><br></pre></td></tr></table></figure><h1 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h1><p>复制本机rsa公钥。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><br>创建并编辑配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi cloud.txt</span><br></pre></td></tr></table></figure><br>填入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#cloud-config</span><br><span class="line">users:</span><br><span class="line">  - name: mjy</span><br><span class="line">    ssh-authorized-keys:</span><br><span class="line">      - ssh-rsa AAAAB...</span><br><span class="line">    sudo: [&#39;ALL&#x3D;(ALL) NOPASSWD:ALL&#39;]</span><br><span class="line">    groups: sudo</span><br><span class="line">    shell: &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><br>其中name为用户名，ssh-rsa为刚才复制的公钥，设置该用户使用sudo时无需输入密码。</p><h1 id="备份原始镜像（可选）"><a href="#备份原始镜像（可选）" class="headerlink" title="备份原始镜像（可选）"></a>备份原始镜像（可选）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ubuntu-16.04-server-cloudimg-arm64-uefi1.img ubuntu-16.04-server-cloudimg-arm64-uefi1.img.orig</span><br></pre></td></tr></table></figure><h1 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-aarch64 \</span><br><span class="line">    -smp 2 \</span><br><span class="line">    -m 2048 \</span><br><span class="line">    -M virt \</span><br><span class="line">    -cpu cortex-a57 \</span><br><span class="line">    -bios QEMU_EFI.fd \</span><br><span class="line">    -nographic \</span><br><span class="line">    -device virtio-blk-device,drive=image \</span><br><span class="line">    -drive <span class="keyword">if</span>=none,id=image,file=ubuntu-16.04-server-cloudimg-arm64-uefi1.img \</span><br><span class="line">    -device virtio-blk-device,drive=cloud \</span><br><span class="line">    -drive <span class="keyword">if</span>=none,id=cloud,file=cloud.img \</span><br><span class="line">    -device virtio-net-device,netdev=user0 \</span><br><span class="line">    -netdev user,id=user0 \</span><br><span class="line">    -redir tcp:2222::22</span><br></pre></td></tr></table></figure><p>参数解释</p><ul><li><code>-smp 2</code> - 双核</li><li><code>-m 2048</code> - 2G内存</li><li><code>-M virt</code> - 模拟通用QEMU ARM机器</li><li><code>-cpu cortex-a57</code> - 模拟的CPU型号，这里选择最常见的A57，其他型号可通过<code>qemu-system-aarch64 -M virt -cpu help</code>查询</li><li><code>-bios QEMU_EFI.fd</code> - BIOS固件</li><li><code>-nographic</code> - 无显示，故启动时的警告和花屏不用管，用ssh</li><li><code>-device virtio-blk-device,drive=image</code> - 创建名为”image”的虚拟块设备</li><li><code>-drive if=none,id=image,file=ubuntu-16.04-server-cloudimg-arm64-uefi1.img</code> - 用刚才的”image”设备和cloudimg镜像创建驱动器</li><li><code>-device virtio-blk-device,drive=cloud</code> - 创建名为”cloud”的虚拟块设备</li><li><code>-drive if=none,id=cloud,file=cloud.img</code> - 用刚才的”cloud”设备和配置好的cloud.img镜像创建驱动器</li><li><code>-device virtio-net-device,netdev=user0</code> - 创建名为”user0”的虚拟网络设备</li><li><code>-netdev user,id=user0</code> - 创建名为”user0”的用户模式网络栈</li><li><code>-redir tcp:2222::22</code> - 将虚拟机的22端口映射到本机的2222端口<br>注：第一次启动时间会长一些。  </li></ul><h1 id="ssh连接虚拟机"><a href="#ssh连接虚拟机" class="headerlink" title="ssh连接虚拟机"></a>ssh连接虚拟机</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 2222 mjy@localhost</span><br></pre></td></tr></table></figure><h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="error-no-such-device-root"><a href="#error-no-such-device-root" class="headerlink" title="error: no such device: root"></a>error: no such device: root</h2><p>其实不按键盘也能正常启动，是<a href="https://bugs.launchpad.net/cloud-images/+bug/1726476" target="_blank" rel="noopener">ubuntu镜像的bug</a>，可通过<code>sudo update-grub</code>解决。</p><h2 id="perl-warning-Please-check-that-your-locale-settings"><a href="#perl-warning-Please-check-that-your-locale-settings" class="headerlink" title="perl: warning: Please check that your locale settings"></a>perl: warning: Please check that your locale settings</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/default/locale</span><br></pre></td></tr></table></figure><p>添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE&#x3D;en_US.UTF-8</span><br><span class="line">LC_ALL&#x3D;en_US.UTF-8</span><br></pre></td></tr></table></figure></p><h2 id="unable-to-resolve-host-ubuntu"><a href="#unable-to-resolve-host-ubuntu" class="headerlink" title="unable to resolve host ubuntu"></a>unable to resolve host ubuntu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/hosts</span><br></pre></td></tr></table></figure><p>在localhost后面添加ubuntu。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost ubuntu</span><br></pre></td></tr></table></figure></p><h2 id="扩展虚拟机磁盘空间"><a href="#扩展虚拟机磁盘空间" class="headerlink" title="扩展虚拟机磁盘空间"></a>扩展虚拟机磁盘空间</h2><p>默认镜像的2G比较小，在host用<code>qemu-img</code>加多10G。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img resize ubuntu-16.04-server-cloudimg-arm64-uefi1.img +10G</span><br></pre></td></tr></table></figure></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnx-software.com/2016/05/10/how-to-run-ubuntu-16-04-aarch64-64-bit-arm-cloud-images-on-your-intelamd-linux-computer/" target="_blank" rel="noopener">How to Run Ubuntu 16.04 Aarch64 (64-bit ARM) Cloud Images on Your Intel/AMD Linux Computer with QEMU</a><br><a href="https://helpmanual.io/help/qemu-system-aarch64/" target="_blank" rel="noopener">qemu-system-aarch64 -h</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没有arm64板子的临时解决办法。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="arm" scheme="https://blog.mjyai.com/tags/arm/"/>
    
      <category term="ubuntu" scheme="https://blog.mjyai.com/tags/ubuntu/"/>
    
      <category term="qemu" scheme="https://blog.mjyai.com/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>树莓派（arm32v7）用Docker部署签到站</title>
    <link href="https://blog.mjyai.com/2019/03/11/rpi-docker-qiandao/"/>
    <id>https://blog.mjyai.com/2019/03/11/rpi-docker-qiandao/</id>
    <published>2019-03-11T13:05:07.000Z</published>
    <updated>2020-06-21T11:38:14.573Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/binux/qiandao" target="_blank" rel="noopener">qiandao</a>是基于HAR的自动签到框架，官方提供的docker镜像是x86的，树莓派用不了。所以我build了个arm32v7的镜像，除了树莓派2，3外，亦适用于其他32位的ARM平台。<br><a id="more"></a><br>注：树莓派3B之后用<a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2837/README.md" target="_blank" rel="noopener">BCM2837</a>的板子实际上是64位arm64v8的，但Raspbian为了兼容性问题依旧是32位，故编译环境依旧为32位。<br>关于树莓派的硬件改进历史可以参考<a href="https://elinux.org/RPi_HardwareHistory" target="_blank" rel="noopener">此处</a>。通过外观基本就能判断版本，如果仍不确定可以通过<code>cat /sys/firmware/devicetree/base/model</code>命令查看型号。</p><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>安装并启动docker，测试无误后设为自启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line">sudo service docker start</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><br>将当前用户加入docker组并重新登录，这样就不用sudo来跑docker了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker pi</span><br><span class="line">su - pi</span><br></pre></td></tr></table></figure></p><h1 id="部署qiandao"><a href="#部署qiandao" class="headerlink" title="部署qiandao"></a>部署qiandao</h1><h2 id="下载qiandao的镜像"><a href="#下载qiandao的镜像" class="headerlink" title="下载qiandao的镜像"></a>下载qiandao的镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mjysci/qiandao:arm32v7</span><br></pre></td></tr></table></figure><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/pi/qiandao/volume</span><br><span class="line">docker run -d -p 80:80 --name qiandao --restart=always -v /home/pi/qiandao/volume:/usr/src/app/volume mjysci/qiandao:arm32v7</span><br></pre></td></tr></table></figure><h2 id="配置站点管理员"><a href="#配置站点管理员" class="headerlink" title="配置站点管理员"></a>配置站点管理员</h2><p>浏览器访问树莓派ip地址并注册一个账户。<br>进入容器管理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it qiandao /bin/bash</span><br></pre></td></tr></table></figure><br>设置站点管理员。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ./chrole.py &lt;刚才注册的账户邮箱&gt; admin</span><br></pre></td></tr></table></figure><br>退出容器管理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><h1 id="备份与数据迁移"><a href="#备份与数据迁移" class="headerlink" title="备份与数据迁移"></a>备份与数据迁移</h1><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp qiandao:/usr/src/app/database.db ~/backup/qiandao/database.db</span><br></pre></td></tr></table></figure><h2 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp ~/backup/qiandao/database.db qiandao:/usr/src/app/database.db</span><br><span class="line">docker container restart qiandao</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/binux/qiandao/wiki/Docker%E9%83%A8%E7%BD%B2%E7%AD%BE%E5%88%B0%E7%AB%99%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">Docker部署签到站教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/binux/qiandao&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;qiandao&lt;/a&gt;是基于HAR的自动签到框架，官方提供的docker镜像是x86的，树莓派用不了。所以我build了个arm32v7的镜像，除了树莓派2，3外，亦适用于其他32位的ARM平台。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://blog.mjyai.com/tags/docker/"/>
    
      <category term="rpi" scheme="https://blog.mjyai.com/tags/rpi/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下安装与管理多个Linux内核</title>
    <link href="https://blog.mjyai.com/2019/03/05/install-manage-linux-kernel-ubuntu/"/>
    <id>https://blog.mjyai.com/2019/03/05/install-manage-linux-kernel-ubuntu/</id>
    <published>2019-03-05T00:37:09.000Z</published>
    <updated>2019-03-05T01:46:37.653Z</updated>
    
    <content type="html"><![CDATA[<p>亦适用于Linux Mint。<br><a id="more"></a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>多系统且系统间/boot独立的需进入BIOS将启动顺序改为准备折腾的系统所在硬盘。没有共享/boot是因为当其中一个损坏而又急着用时可以用备用系统的/boot进入生产力系统。如果只是单系统跳过此步。<br>安装自4.16后linux-headers对<a href="http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4.3_amd64.deb" target="_blank" rel="noopener">libssl1.1</a>的依赖。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libssl1.1_1.1.0g-2ubuntu4.3_amd64.deb</span><br></pre></td></tr></table></figure></p><h1 id="安装Linux内核"><a href="#安装Linux内核" class="headerlink" title="安装Linux内核"></a>安装Linux内核</h1><h2 id="使用工具安装"><a href="#使用工具安装" class="headerlink" title="使用工具安装"></a>使用工具安装</h2><p>不少人都推荐<a href="https://github.com/teejee2008/ukuu" target="_blank" rel="noopener">ukuu</a>，不过最近该作者<a href="https://teejeetech.in/2019/01/20/ukuu-v19-01/" target="_blank" rel="noopener">转为收费闭源了</a>，旧的开源版不再更新且<a href="https://github.com/teejee2008/ukuu/issues/49" target="_blank" rel="noopener">存在连接问题</a>。不推荐使用。<br>这里推荐<a href="https://github.com/pimlie/ubuntu-mainline-kernel.sh" target="_blank" rel="noopener">ubuntu-mainline-kernel脚本</a>。<br>安装指定版本内核。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-mainline-kernel.sh -i 4.19.26</span><br></pre></td></tr></table></figure><br>更新bootloader并重启。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub2</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></p><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>在<a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="noopener">kernel-ppa</a>处选择自己需要的版本，然后选择架构下载对应的deb包并按页面顺序依次安装headers_all, headers_generic, image, modules包。注意<code>lowlatency</code>是针对低延迟设备的，普通PC选<code>generic</code>即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i *.deb</span><br></pre></td></tr></table></figure><br>更新bootloader并重启。</p><h2 id="从源码编译安装"><a href="#从源码编译安装" class="headerlink" title="从源码编译安装"></a>从源码编译安装</h2><p><a href="https://www.cyberciti.biz/tips/compiling-linux-kernel-26.html" target="_blank" rel="noopener">参考这篇文章</a></p><h1 id="删除多余内核"><a href="#删除多余内核" class="headerlink" title="删除多余内核"></a>删除多余内核</h1><p>注：待删除内核不能为当前使用内核。</p><h2 id="使用工具删除"><a href="#使用工具删除" class="headerlink" title="使用工具删除"></a>使用工具删除</h2><p>推荐<a href="http://byobu.co/" target="_blank" rel="noopener">byobu</a>里面自带的purge-old-kernels，其中keep参数是指定保留的内核数，默认为2。</p><pre><code class="bash">sudo apt install byobusudo purge-old-kernels --keep 3</code></pre><p>也可以使用<code>ubuntu-mainline-kernel.sh -u</code>来指定版本逐个删除。</p><h2 id="手动删除"><a href="#手动删除" class="headerlink" title="手动删除"></a>手动删除</h2><p>用<code>sudo dpkg --purge</code>指定版本headers_all, headers_generic, image, modules的deb包，删除二进制及配置文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;亦适用于Linux Mint。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://blog.mjyai.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux Mint 18.2版本升级至19.1</title>
    <link href="https://blog.mjyai.com/2019/03/04/upgrade-linux-mint/"/>
    <id>https://blog.mjyai.com/2019/03/04/upgrade-linux-mint/</id>
    <published>2019-03-04T13:21:42.000Z</published>
    <updated>2019-03-04T14:31:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>用Update Manager进行逐步升级，timeshift可跳过。<br><a id="more"></a></p><h1 id="升级至18-3"><a href="#升级至18-3" class="headerlink" title="升级至18.3"></a>升级至18.3</h1><p>打开Update Manager，Edit——Upgrade to Linux Mint 18.3 Sylvia。如果是其他版本也是同样的位置，但升级版本不一样，每次升0.1。<br>完成后重启。  </p><h1 id="升级至19"><a href="#升级至19" class="headerlink" title="升级至19"></a>升级至19</h1><h2 id="建立系统快照（可选）"><a href="#建立系统快照（可选）" class="headerlink" title="建立系统快照（可选）"></a>建立系统快照（可选）</h2><p>官方强制要求要建立系统快照，但如果像我这样mint只是备用系统，用来折腾不怕搞坏则此步可跳过。<br>以下附上建立快照的步骤：<br>安装timeshift<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install timeshift</span><br></pre></td></tr></table></figure><br>Menu——Timeshift打开快照安装向导，选择快照类型（默认RSYNC），选择存储位置，完成向导。<br>Create建立快照。</p><h2 id="将显示管理器切换为LightDM"><a href="#将显示管理器切换为LightDM" class="headerlink" title="将显示管理器切换为LightDM"></a>将显示管理器切换为LightDM</h2><p>检查默认显示管理器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/X11/default-display-manager</span><br></pre></td></tr></table></figure><br>如果输出为<code>/usr/sbin/lightdm</code>则可跳过下面安装并切换LightDM的步骤。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install lightdm lightdm-settings slick-greeter</span><br></pre></td></tr></table></figure><br>安装过程中选择默认显示管理器为lightdm。<br>删除MDM。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove --purge mdm mint-mdm-themes*</span><br></pre></td></tr></table></figure><br>配置并重启。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure lightdm</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></p><h2 id="升级系统"><a href="#升级系统" class="headerlink" title="升级系统"></a>升级系统</h2><p>安装mintupgrade。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mintupgrade</span><br></pre></td></tr></table></figure><br>（可选）如果前面没有创建快照，执行以下命令以跳过timeshift检查。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/timeshift.json</span><br></pre></td></tr></table></figure><br>检查系统。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mintupgrade check</span><br></pre></td></tr></table></figure><br>检查过程中会给出依赖有冲突的包，用<code>apt remove</code>删掉即可，升级后再装回去。值得注意的是我之前还装了ros，删掉ros。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove ros-*</span><br></pre></td></tr></table></figure><br>另外建议想装<a href="http://www.ros.org/install/" target="_blank" rel="noopener">ROS</a>的老老实实在Ubuntu上弄，在Mint上经过一番折腾后也能用，但没必要把时间花在搭建环境的坑上。<br>预先下载好升级所需包。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mintupgrade download</span><br></pre></td></tr></table></figure><br>升级。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mintupgrade upgrade</span><br></pre></td></tr></table></figure></p><h1 id="升级至19-1"><a href="#升级至19-1" class="headerlink" title="升级至19.1"></a>升级至19.1</h1><p>此时如果是装了第三方显卡驱动可能桌面会崩溃并进入低分辨率安全模式，先不管它。<br>每次升级后源会重置，打开Software Sources改成国内源。<br>打开Update Manager，Edit——Upgrade to Linux Mint 19.1 Tessa。  </p><h1 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h1><p>解决桌面崩溃问题，重装nvidia显卡驱动。</p><pre><code class="bash">apt-get install --reinstall nvidia-415</code></pre><p>用的是这个源<code>sudo add-apt-repository ppa:graphics-drivers/ppa</code>。<br>如果还是不行就装<code>nvidia-396</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Update Manager进行逐步升级，timeshift可跳过。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://blog.mjyai.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://blog.mjyai.com/tags/linux/"/>
    
  </entry>
  
</feed>
