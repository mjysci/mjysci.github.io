<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>名实合为</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://majunyi.top/"/>
  <updated>2019-05-20T03:10:46.137Z</updated>
  <id>https://majunyi.top/</id>
  
  <author>
    <name>mjy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用Docker部署64位ARM版的seafile</title>
    <link href="https://majunyi.top/2019/05/20/seafile-docker-arm64/"/>
    <id>https://majunyi.top/2019/05/20/seafile-docker-arm64/</id>
    <published>2019-05-20T02:39:33.000Z</published>
    <updated>2019-05-20T03:10:46.137Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.seafile.com/home/" target="_blank" rel="external">seafile</a>是开源的企业私有网盘，用法类似于百度网盘，但数据都是自己的，且上传下载仅限于带宽。但官方并未提供arm64的支持，所以我从源码编译了arm64版并制成docker镜像方便部署。<br><a id="more"></a>  </p>
<h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>从<a href="https://www.seafile.com/download/" target="_blank" rel="external">官方下载页面</a>可见服务器端没有arm64，倒是有armhf(arm32v7)，但目前市面上用ARM的NAS基本上都是arm64的，且NAS的系统通常比较特殊，并不能像常见linux系统那样<a href="https://manual-cn.seafile.com/deploy/using_mysql.html" target="_blank" rel="external">部署Seafile服务器</a>，而<a href="https://hub.docker.com/r/seafileltd/seafile/tags" target="_blank" rel="external">官方提供的Docker镜像</a>只支持x86架构。<br>故需要做的工作有两件：  </p>
<ol>
<li>从<a href="https://github.com/haiwen/seafile-server" target="_blank" rel="external">源码</a>编译seafile的arm64架构服务器端。</li>
<li>制成docker镜像方便部署。</li>
</ol>
<h1 id="部署docker镜像"><a href="#部署docker镜像" class="headerlink" title="部署docker镜像"></a>部署docker镜像</h1><p>将<code>~/Downloads/seafile</code>改成你的路径。端口<code>8000</code>用来访问seafile，<code>8080</code>用于WebDAV（需要<a href="https://manual-cn.seafile.com/extension/webdav.html" target="_blank" rel="external">启用</a>），<code>8082</code>用来访问管理页面seahub。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker run --name seafile \</div><div class="line">  -v ~/Downloads/seafile:/home/seafile \</div><div class="line">  -p 8000:8000 \</div><div class="line">  -p 8080:8080 \</div><div class="line">  -p 8082:8082 \</div><div class="line">  -ti mjysci/seafile:arm64v8</div></pre></td></tr></table></figure></p>
<p>第一次运行需要设置domain，管理员账户等。设置完毕后通过<code>Ctrl+P</code>和<code>Ctrl+Q</code>退出tty界面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.seafile.com/home/&quot;&gt;seafile&lt;/a&gt;是开源的企业私有网盘，用法类似于百度网盘，但数据都是自己的，且上传下载仅限于带宽。但官方并未提供arm64的支持，所以我从源码编译了arm64版并制成docker镜像方便部署。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://majunyi.top/tags/docker/"/>
    
      <category term="arm" scheme="https://majunyi.top/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>树莓派3安装arm64版Ubuntu 18.04 Server</title>
    <link href="https://majunyi.top/2019/05/20/rpi3-ubuntu-arm64/"/>
    <id>https://majunyi.top/2019/05/20/rpi3-ubuntu-arm64/</id>
    <published>2019-05-20T02:02:38.000Z</published>
    <updated>2019-05-20T02:39:19.087Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派官方的Raspbian为了保持向下兼容仍然是32位，64位的树莓派3不跑64位系统和咸鱼有什么区别？<br><a id="more"></a></p>
<h1 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h1><p><a href="https://www.ubuntu.com/download/iot/raspberry-pi-2-3" target="_blank" rel="external">Ubuntu官方</a>已经提供了<a href="http://cdimage.ubuntu.com/releases/bionic/release/ubuntu-18.04.2-preinstalled-server-arm64+raspi3.img.xz" target="_blank" rel="external">树莓派3的镜像</a>，直接下载即可。</p>
<h1 id="刷TF卡"><a href="#刷TF卡" class="headerlink" title="刷TF卡"></a>刷TF卡</h1><p>如果打算玩docker建议至少32G以上，16G需要在调试的间隙清理掉无用的若干<none>容器和镜像以免空间不足。刷TF卡用<a href="https://www.balena.io/etcher/" target="_blank" rel="external">Etcher</a>即可。<br>默认用户名和密码均为<code>ubuntu</code>。</none></p>
<h1 id="改源"><a href="#改源" class="headerlink" title="改源"></a>改源</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/apt/sources.list</div></pre></td></tr></table></figure>
<p>旧的源是<code>http://ports.ubuntu.com</code>，批量改成科大源并注释掉<code>deb-src</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:%s/http:\/\/ports.ubuntu.com/https:\/\/mirrors.ustc.edu.cn/g</div><div class="line">:%s/deb-src/<span class="comment">#deb-src/g</span></div></pre></td></tr></table></figure></p>
<h1 id="设置wifi"><a href="#设置wifi" class="headerlink" title="设置wifi"></a>设置wifi</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt install network-manager</div><div class="line">sudo service network-manager start</div><div class="line">sudo nmtui</div></pre></td></tr></table></figure>
<h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="Unable-to-acquire-the-dpkg-frontend-lock-var-lib-dpkg-lock-frontend-is-another-process-using-it"><a href="#Unable-to-acquire-the-dpkg-frontend-lock-var-lib-dpkg-lock-frontend-is-another-process-using-it" class="headerlink" title="Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?"></a>Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo rm /var/lib/dpkg/lock*</div><div class="line">sudo dpkg --configure <span class="_">-a</span></div><div class="line">sudo apt update</div></pre></td></tr></table></figure>
<h2 id="dpkg-error-parsing-file-‘-var-lib-dpkg-updates-0004’-near-line-0"><a href="#dpkg-error-parsing-file-‘-var-lib-dpkg-updates-0004’-near-line-0" class="headerlink" title="dpkg: error: parsing file ‘/var/lib/dpkg/updates/0004’ near line 0"></a>dpkg: error: parsing file ‘/var/lib/dpkg/updates/0004’ near line 0</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/lib/dpkg/updates &amp;&amp; sudo rm -rf 0004</div><div class="line">sudo dpkg --configure <span class="_">-a</span></div></pre></td></tr></table></figure>
<h1 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt install sysbench</div><div class="line">sysbench --test=cpu --cpu-max-prime=20000 run</div></pre></td></tr></table></figure>
<p>树莓派3B（BCM2837）测试结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">sysbench 1.0.11 (using system LuaJIT 2.1.0-beta3)</div><div class="line"></div><div class="line">Running the test with following options:</div><div class="line">Number of threads: 1</div><div class="line">Initializing random number generator from current time</div><div class="line"></div><div class="line"></div><div class="line">Prime numbers limit: 20000</div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line">CPU speed:</div><div class="line">    events per second:   220.37</div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          10.0007s</div><div class="line">    total number of events:              2206</div><div class="line"></div><div class="line">Latency (ms):</div><div class="line">         min:                                  4.21</div><div class="line">         avg:                                  4.53</div><div class="line">         max:                                  8.78</div><div class="line">         95th percentile:                      8.58</div><div class="line">         sum:                               9996.78</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           2206.0000/0.00</div><div class="line">    execution time (avg/stddev):   9.9968/0.00</div></pre></td></tr></table></figure></p>
<p>i5-8400<a href="https://majunyi.top/2019/03/12/qemu-ubuntu-arm64/">用qemu模拟aarch64架构</a>在ubuntu 16.04下测试结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">sysbench 0.4.12:  multi-threaded system evaluation benchmark</div><div class="line"></div><div class="line">Running the test with following options:</div><div class="line">Number of threads: 1</div><div class="line"></div><div class="line">Doing CPU performance benchmark</div><div class="line"></div><div class="line">Threads started!</div><div class="line">Done.</div><div class="line"></div><div class="line">Maximum prime number checked in CPU test: 20000</div><div class="line"></div><div class="line"></div><div class="line">Test execution summary:</div><div class="line">    total time:                          45.2990s</div><div class="line">    total number of events:              10000</div><div class="line">    total time taken by event execution: 45.2838</div><div class="line">    per-request statistics:</div><div class="line">         min:                                  4.42ms</div><div class="line">         avg:                                  4.53ms</div><div class="line">         max:                                  5.26ms</div><div class="line">         approx.  95 percentile:               4.62ms</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           10000.0000/0.00</div><div class="line">    execution time (avg/stddev):   45.2838/0.00</div></pre></td></tr></table></figure></p>
<p>i5-8400在ubuntu 18.04下测试结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">sysbench 1.0.11 (using system LuaJIT 2.1.0-beta3)</div><div class="line"></div><div class="line">Running the test with following options:</div><div class="line">Number of threads: 1</div><div class="line">Initializing random number generator from current time</div><div class="line"></div><div class="line"></div><div class="line">Prime numbers limit: 20000</div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line">CPU speed:</div><div class="line">    events per second:   549.44</div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          10.0018s</div><div class="line">    total number of events:              5496</div><div class="line"></div><div class="line">Latency (ms):</div><div class="line">         min:                                  1.81</div><div class="line">         avg:                                  1.82</div><div class="line">         max:                                  5.85</div><div class="line">         95th percentile:                      1.86</div><div class="line">         sum:                              10000.89</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           5496.0000/0.00</div><div class="line">    execution time (avg/stddev):   10.0009/0.00</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树莓派官方的Raspbian为了保持向下兼容仍然是32位，64位的树莓派3不跑64位系统和咸鱼有什么区别？&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="arm" scheme="https://majunyi.top/tags/arm/"/>
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
      <category term="rpi" scheme="https://majunyi.top/tags/rpi/"/>
    
  </entry>
  
  <entry>
    <title>解决win10下Ryzen平台间歇性卡顿问题</title>
    <link href="https://majunyi.top/2019/04/23/fix-win10-ryzen-freeze/"/>
    <id>https://majunyi.top/2019/04/23/fix-win10-ryzen-freeze/</id>
    <published>2019-04-23T06:17:10.000Z</published>
    <updated>2019-04-23T07:20:48.506Z</updated>
    
    <content type="html"><![CDATA[<p>具体现象为几十分钟内会有一次几十秒的卡顿，视频播放停止，鼠标不能动。<br><a id="more"></a><br>旧的客厅用htpc是J1900的，由于不支持硬解x265，而软解4k又比较卡，所以换成了ryzen apu，轻松播放<a href="http://madvr.com" target="_blank" rel="external">madVR</a>渲染的4k hevc高码率视频。只是换机后碰到播放视频间歇性卡顿的问题。  </p>
<h1 id="分析与尝试"><a href="#分析与尝试" class="headerlink" title="分析与尝试"></a>分析与尝试</h1><p>注意到卡顿时硬盘读取灯常亮，打开任务管理器观察磁盘占用达100%，但列表中并没有高I/O的程序。  </p>
<h2 id="安装avast替代Windows-Defender"><a href="#安装avast替代Windows-Defender" class="headerlink" title="安装avast替代Windows Defender"></a>安装avast替代Windows Defender</h2><p>Windows Defender有着空闲时扫描硬盘和CPU占用高的问题，虽然这在SSD和多核时代可以忽略，但我还是先用<a href="https://www.avast.com" target="_blank" rel="external">免费的avast</a>试试看。结果问题依旧。</p>
<h2 id="更新主板芯片驱动"><a href="#更新主板芯片驱动" class="headerlink" title="更新主板芯片驱动"></a>更新主板芯片驱动</h2><p>故怀疑是驱动问题，am4主板在早期曾爆出由于芯片组外包给祥硕，赶工导致的一些主板问题。主板是华擎的<a href="https://www.asrock.com/mb/AMD/A320M-HDV/index.asp#Download" target="_blank" rel="external">A320M-HDV</a>，官方提供了芯片+显卡的驱动合集包，已经安装，并且升级了显卡驱动。于是去AMD官方下载<a href="https://www.amd.com/en/support/chipsets/amd-socket-am4/a320" target="_blank" rel="external">AMD Chipset Drivers</a>，安装后问题依旧。  </p>
<h2 id="更新SATA控制器驱动"><a href="#更新SATA控制器驱动" class="headerlink" title="更新SATA控制器驱动"></a>更新SATA控制器驱动</h2><p>查看设备管理器，可见<code>IDE ATA/ATAPI控制器</code>依旧为2006年的<code>标准 SATA AHCI 控制器</code>，AMD官方芯片驱动并未更新此项。于是右键更新驱动程序，选手动，选定解压后的文件夹搜索，没有结果。选<code>可用驱动程序列表中选取</code>，取消<code>显示兼容硬件</code>，厂商<code>AMD</code>，装上<code>AMD SATA 控制器</code>。更新后问题依旧。</p>
<h2 id="查看事件查看器"><a href="#查看事件查看器" class="headerlink" title="查看事件查看器"></a>查看事件查看器</h2><p>Windows日志——系统，发现来源amdsata有很多<code>事件129</code>的警告。内容为：发出了对设备 \Device\RaidPort0 的重置。<br>故怀疑是SATA电源非正常进入节能模式导致的接口重置。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="解锁电源管理隐藏选项"><a href="#解锁电源管理隐藏选项" class="headerlink" title="解锁电源管理隐藏选项"></a>解锁电源管理隐藏选项</h2><p>以管理员模式打开cmd，运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">powercfg -attributes SUB_DISK 0b2d69d7<span class="_">-a</span>2a1-449c-9680<span class="_">-f</span>91c70521c60 -ATTRIB_HIDE</div></pre></td></tr></table></figure></p>
<h2 id="更改高级电源设置"><a href="#更改高级电源设置" class="headerlink" title="更改高级电源设置"></a>更改高级电源设置</h2><p>电源和睡眠设置——其他电源设置——更改计划设置——更改高级电源设置——更改当前不可用的设置——硬盘——AHCI Link Power Management - HIPM/DIPM<br>设置改为<code>Active</code>。问题解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;具体现象为几十分钟内会有一次几十秒的卡顿，视频播放停止，鼠标不能动。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="win" scheme="https://majunyi.top/tags/win/"/>
    
  </entry>
  
  <entry>
    <title>通过pass实现更安全的docker登录方式</title>
    <link href="https://majunyi.top/2019/03/14/docker-credential-login/"/>
    <id>https://majunyi.top/2019/03/14/docker-credential-login/</id>
    <published>2019-03-14T03:41:20.000Z</published>
    <updated>2019-03-21T05:13:56.314Z</updated>
    
    <content type="html"><![CDATA[<p>docker默认登录是将密码明文存在本地的<code>~/.docker/config.json</code>，随便找个<a href="https://paulschou.com/tools/xlate/" target="_blank" rel="external">base64的解码器</a>就能还原，存在安全隐患。此文通过pass实现更安全的docker登录方式。<br><a id="more"></a><br>测试平台：Raspberry Pi 3B with ubuntu 18.04.2 server aarch64<br>由于官方只发布了amd64的helper，所以其他架构需要从源码编译。另外<code>secretservice</code><a href="https://github.com/docker/compose/issues/6023#issuecomment-401089768" target="_blank" rel="external">需要X11</a>，所以没有桌面的server还是用<code>pass</code>。  </p>
<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install golang-go libsecret-1-dev gpg pass</div></pre></td></tr></table></figure>
<h1 id="取得源码并编译docker-credential-helpers"><a href="#取得源码并编译docker-credential-helpers" class="headerlink" title="取得源码并编译docker-credential-helpers"></a>取得源码并编译docker-credential-helpers</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">go get github.com/docker/docker-credential-helpers</div><div class="line"><span class="built_in">cd</span> ~/go/src/github.com/docker/docker-credential-helpers</div><div class="line">make pass</div><div class="line"><span class="built_in">cd</span> bin</div><div class="line">chmod +x docker-credential-pass &amp;&amp; sudo mv docker-credential-pass /usr/<span class="built_in">local</span>/bin/</div></pre></td></tr></table></figure>
<p>编辑docker配置文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ~/.docker/config.json</div></pre></td></tr></table></figure></p>
<p>添加以下内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	&quot;credsStore&quot;: &quot;pass&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="生成gpg2-key"><a href="#生成gpg2-key" class="headerlink" title="生成gpg2 key"></a>生成gpg2 key</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gpg --generate-key</div></pre></td></tr></table></figure>
<p>不要使用passphrase，记住你的uid。</p>
<h1 id="pass初始化"><a href="#pass初始化" class="headerlink" title="pass初始化"></a>pass初始化</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pass init <span class="string">"你的uid"</span></div></pre></td></tr></table></figure>
<h1 id="登录docker"><a href="#登录docker" class="headerlink" title="登录docker"></a>登录docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker login</div></pre></td></tr></table></figure>
<h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="push-fails-‘denied-requested-access-to-the-resource-is-denied’"><a href="#push-fails-‘denied-requested-access-to-the-resource-is-denied’" class="headerlink" title="push fails: ‘denied: requested access to the resource is denied’"></a>push fails: ‘denied: requested access to the resource is denied’</h2><p>原因是创建gpg key时使用了passphrase，而helper并不会弹出让你输入passphrase的选项。<br>方法一：登录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pass</div><div class="line">pass docker-credential-helpers/&lt;一些字串&gt;/&lt;用户名&gt;</div></pre></td></tr></table></figure></p>
<p>第一个命令列出<code>pass</code>文件夹结构。第二个命令执行后输入passphrase。<br>然后再试。<br>方法二：删掉passphrase。</p>
<pre><code class="bash">gpg --edit-key <span class="string">"你的uid"</span>
passwd
</code></pre>
<p>输入passphrase，然后设置新passphrase为空。最后<code>quit</code>退出。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://hackernoon.com/getting-rid-of-docker-plain-text-credentials-88309e07640d" target="_blank" rel="external">Getting rid of Docker plain text credentials</a><br><a href="https://docs.docker.com/engine/reference/commandline/login/#credentials-store" target="_blank" rel="external">docker login credentials-store</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker默认登录是将密码明文存在本地的&lt;code&gt;~/.docker/config.json&lt;/code&gt;，随便找个&lt;a href=&quot;https://paulschou.com/tools/xlate/&quot;&gt;base64的解码器&lt;/a&gt;就能还原，存在安全隐患。此文通过pass实现更安全的docker登录方式。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://majunyi.top/tags/docker/"/>
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ARM平台qnap用Docker部署aria2</title>
    <link href="https://majunyi.top/2019/03/12/aria2-docker-arm-qnap/"/>
    <id>https://majunyi.top/2019/03/12/aria2-docker-arm-qnap/</id>
    <published>2019-03-12T15:01:08.000Z</published>
    <updated>2019-04-23T06:19:14.988Z</updated>
    
    <content type="html"><![CDATA[<p>亦适用于其他64位的ARM平台（arm64v8）。<br><a id="more"></a><br>踩了些坑后发觉还是aria2+浏览器插件的方式更为方便灵活，如果喜欢ariaNg可在客户端运行。</p>
<h1 id="浏览器登录NAS"><a href="#浏览器登录NAS" class="headerlink" title="浏览器登录NAS"></a>浏览器登录NAS</h1><h1 id="设置aria2-conf"><a href="#设置aria2-conf" class="headerlink" title="设置aria2.conf"></a>设置aria2.conf</h1><p>在NAS中建立容器挂载的文件夹，我是在<code>Download</code>下建立<code>aria2</code>文件夹，然后其中又新建<code>downloads</code>和<code>config</code>。并在config中新建<code>aria2.conf</code>和<code>aria2.session</code>文件。<br>其中<code>aria2.conf</code>内容如下，把<code>YOUR_RPC_TOKEN</code>改成自己的secret，其他按实际情况自行定制，如PT则要把dht关掉，删去<code>enable-dht</code>之后的全部内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">save-session=/config/aria2.session</div><div class="line">input-file=/config/aria2.session</div><div class="line">save-session-interval=60</div><div class="line"></div><div class="line">dir=/downloads</div><div class="line"></div><div class="line">file-allocation=prealloc</div><div class="line">disk-cache=128M</div><div class="line"></div><div class="line">enable-rpc=true</div><div class="line">rpc-listen-port=6800</div><div class="line">rpc-allow-origin-all=true</div><div class="line">rpc-listen-all=true</div><div class="line"></div><div class="line">rpc-secret=YOUR_RPC_TOKEN</div><div class="line"></div><div class="line">max-concurrent-downloads=6</div><div class="line">max-connection-per-server=16</div><div class="line">min-split-size=10M</div><div class="line">split=16</div><div class="line">continue=true</div><div class="line">max-overall-download-limit=0</div><div class="line">max-overall-upload-limit=500K</div><div class="line"></div><div class="line">enable-dht=true</div><div class="line">bt-enable-lpd=true</div><div class="line">bt-request-peer-speed-limit=1000K</div><div class="line">bt-save-metadata=true</div><div class="line">bt-max-peers=0</div><div class="line">bt-require-crypto=true</div><div class="line">enable-peer-exchange=true</div><div class="line">listen-port=20000-30000</div><div class="line">dht-listen-port=30000-40000</div><div class="line">dht-file-path=/config/dht.dat</div><div class="line">dht-file-path6=/config/dht6.dat</div><div class="line">bt-tracker=udp://62.138.0.158:6969/announce,http://185.225.17.100:1337/announce,udp://51.15.4.13:1337/announce,udp://208.83.20.20:6969/announce,udp://128.1.203.23:8080/announce,udp://184.105.151.164:6969/announce,http://128.1.203.23:6961/announce,udp://51.15.40.114:80/announce,udp://5.2.79.219:1337/announce,udp://5.2.79.22:6969/announce,udp://51.15.76.199:6969/announce,udp://91.216.110.52:451/announce,udp://5.206.28.90:6969/announce,udp://51.38.184.185:6969/announce,udp://176.31.106.35:80/announce,udp://37.235.174.46:2710/announce,udp://188.246.227.212:80/announce,udp://95.211.168.204:2710/announce,udp://8.9.31.140:2000/announce,udp://212.47.227.58:6969/announce</div></pre></td></tr></table></figure></p>
<h1 id="安装Container-Station"><a href="#安装Container-Station" class="headerlink" title="安装Container Station"></a>安装Container Station</h1><p>App Center -&gt; All Apps -&gt; Container Station -&gt; Install</p>
<h1 id="获取arm版aria2镜像"><a href="#获取arm版aria2镜像" class="headerlink" title="获取arm版aria2镜像"></a>获取arm版aria2镜像</h1><p>用ssh登录NAS，然后执行以下命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull mjysci/aria2:arm64v8</div></pre></td></tr></table></figure></p>
<h1 id="获得用户的uid与gid"><a href="#获得用户的uid与gid" class="headerlink" title="获得用户的uid与gid"></a>获得用户的uid与gid</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id &lt;你的用户名&gt;</div></pre></td></tr></table></figure>
<h1 id="运行aria2容器"><a href="#运行aria2容器" class="headerlink" title="运行aria2容器"></a>运行aria2容器</h1><p>将下面命令中的<code>/share/Download/aria2/downloads</code>和<code>/share/Download/aria2/config</code>换成自己喜欢的位置。<code>-u=1000:100</code>是用户的uid和gid，换成你的id。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker run \</div><div class="line">  <span class="_">-d</span> \</div><div class="line">  --name aria2 \</div><div class="line">  -u=1000:100 \</div><div class="line">  -v /share/Download/aria2/config:/config \</div><div class="line">  -v /share/Download/aria2/downloads:/downloads \</div><div class="line">  -p 6800:6800 \</div><div class="line">  --restart=on-failure:5 \</div><div class="line">  mjysci/aria2:arm64v8</div></pre></td></tr></table></figure></p>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>安装<a href="https://chrome.google.com/webstore/detail/yaaw-for-chrome/dennnbdlpgjgbcjfgaohdahloollfgoc" target="_blank" rel="external">YAAW for Chrome</a>。点开图标后将设置中的<code>JSON-RPC Path</code>改成<code>http://token:YOUR_RPC_TOKEN@ip:6800/jsonrpc</code>。右键下载的设置是分开的，右键插件图标-&gt;Options-&gt;JSON-RPC，改成一样的地址。<br>喜欢AriaNg则可以使用<a href="https://github.com/mayswind/AriaNg/releases" target="_blank" rel="external">本地网页版AllInOne</a>或无需浏览器的<a href="https://github.com/mayswind/AriaNg-Native/releases" target="_blank" rel="external">应用版</a>。  </p>
<h1 id="过期资料备份"><a href="#过期资料备份" class="headerlink" title="过期资料备份"></a>过期资料备份</h1><h2 id="登录AriaNg"><a href="#登录AriaNg" class="headerlink" title="登录AriaNg"></a>登录AriaNg</h2><p>浏览器访问NAS:<code>&lt;yourip&gt;:6888</code>。<br>第一次登录会提示认证失败。<code>AriaNg 设置 -&gt; RPC -&gt; Aria2 RPC 密钥</code>处填上前面设置的<code>YOUR_RPC_TOKEN</code>并刷新。  </p>
<h2 id="QTS-UI设置步骤（可选）"><a href="#QTS-UI设置步骤（可选）" class="headerlink" title="QTS UI设置步骤（可选）"></a>QTS UI设置步骤（可选）</h2><h3 id="Create-Container-gt-Advanced-Settings下设置容器运行参数"><a href="#Create-Container-gt-Advanced-Settings下设置容器运行参数" class="headerlink" title="Create Container -&gt; Advanced Settings下设置容器运行参数"></a>Create Container -&gt; Advanced Settings下设置容器运行参数</h3><h4 id="Evironment"><a href="#Evironment" class="headerlink" title="Evironment"></a>Evironment</h4><p>添加Name为<code>SECRET</code>的环境变量，Value为你连接aria2要用到的RPC令牌，待会有用。</p>
<h4 id="Network-gt-Port-Forwarding"><a href="#Network-gt-Port-Forwarding" class="headerlink" title="Network -&gt; Port Forwarding"></a>Network -&gt; Port Forwarding</h4><p>Container的端口已自动填好，只需填入Host对应的端口，注意不要占用NAS的<code>80</code>和<code>8080</code>端口，如<code>6080</code>，<code>6888</code>。</p>
<h4 id="Shared-Folder"><a href="#Shared-Folder" class="headerlink" title="Shared Folder"></a>Shared Folder</h4><p>此处不要用默认的<code>New volume</code>栏，而是从<code>Volume from host</code>选择容器内<code>/downloads</code>和<code>/config</code>对应NAS的文件夹。</p>
<h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><h3 id="下载文件写权限问题"><a href="#下载文件写权限问题" class="headerlink" title="下载文件写权限问题"></a>下载文件写权限问题</h3><p>如果是<code>admin</code>用户就无此问题，但为了安全我是另建了管理员用户并禁用了<code>admin</code>。docker下创建的文件夹只有owner有写权限，管理员组没有。<br>首先，尝试过<a href="https://www.binss.me/blog/solve-docker-permission-problem-by-using-user-namespace/" target="_blank" rel="external">开启Docker User Namespace</a>，但qnap系统比较特殊，修改<code>subuid</code>和<code>subgid</code>无效，无法开启。此方法适用于主流系统，如raspbian和ubuntu等。<br>然后，尝试了<code>docker run -u &lt;youruid&gt;</code>选项，但从外部通过浏览器访问ariang出问题。权限不对。<br>可以添加<code>owncloud</code>之类的进行文件管理，但我的需求是从下载文件夹直接剪切到其他文件夹，而不是复制再通过文件管理删除。<br>目前解决方案是Container Station -&gt; aria2 -&gt; Terminal -&gt; 运行/bin/sh，为所有已下载文件添加组写权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 775 -R /data/_dl/*</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;亦适用于其他64位的ARM平台（arm64v8）。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://majunyi.top/tags/docker/"/>
    
      <category term="arm" scheme="https://majunyi.top/tags/arm/"/>
    
      <category term="nas" scheme="https://majunyi.top/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>ARM平台NAS（qnap TS-212P3）用Docker部署签到站</title>
    <link href="https://majunyi.top/2019/03/12/qiandao-docker-qnap-arm/"/>
    <id>https://majunyi.top/2019/03/12/qiandao-docker-qnap-arm/</id>
    <published>2019-03-12T03:44:42.000Z</published>
    <updated>2019-03-12T04:40:27.487Z</updated>
    
    <content type="html"><![CDATA[<p>亦适用于其他64位的ARM平台（arm64v8）。<br><a id="more"></a></p>
<h1 id="浏览器登录NAS"><a href="#浏览器登录NAS" class="headerlink" title="浏览器登录NAS"></a>浏览器登录NAS</h1><h1 id="安装Container-Station"><a href="#安装Container-Station" class="headerlink" title="安装Container Station"></a>安装Container Station</h1><p>App Center -&gt; All Apps -&gt; Container Station -&gt; Install</p>
<h1 id="安装qiandao"><a href="#安装qiandao" class="headerlink" title="安装qiandao"></a>安装qiandao</h1><p>Container Station -&gt; Create -&gt; 搜索qiandao -&gt; Docker Hub -&gt; 选择mjysci/qiandao -&gt; Install -&gt; 选择arm64v8<br>Create Container -&gt; Advanced Settings -&gt; Network -&gt; Port Forwarding<br>其中Host选NAS的空闲端口，如<code>3000</code>，Container则是<code>80</code>,Protocol是默认的<code>TCP</code>。</p>
<h1 id="配置站点管理员"><a href="#配置站点管理员" class="headerlink" title="配置站点管理员"></a>配置站点管理员</h1><p>浏览器访问NAS:<code>&lt;yourip&gt;:3000</code>并注册一个账户。<br>ssh登录NAS。<br>进入容器管理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it qiandao /bin/bash</div></pre></td></tr></table></figure></p>
<p>设置站点管理员。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ./chrole.py &lt;刚才注册的账户邮箱&gt; admin</div></pre></td></tr></table></figure></p>
<h1 id="配置邮件提醒"><a href="#配置邮件提醒" class="headerlink" title="配置邮件提醒"></a>配置邮件提醒</h1><p>先去<a href="https://www.mailgun.com/" target="_blank" rel="external">mailgun</a>注册免费账户，取得api key。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi config.py</div></pre></td></tr></table></figure></p>
<p>填写<code>mail_domain</code>和<code>mailgun_key</code>。<br>注：如果只是在内网用，无域名，则<code>mail_domain</code>填写<code>sandbox******.mailgun.org</code>，此域名可在<code>Messages-&gt;Domains</code>处取得，sandbox域名需指定<code>Authorized Recipients</code>，填自己的收件邮箱即可。<br>退出并重启容器。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;亦适用于其他64位的ARM平台（arm64v8）。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://majunyi.top/tags/docker/"/>
    
      <category term="arm" scheme="https://majunyi.top/tags/arm/"/>
    
      <category term="nas" scheme="https://majunyi.top/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>通过QEMU在x86计算机上搭建arm64版ubuntu开发环境</title>
    <link href="https://majunyi.top/2019/03/12/qemu-ubuntu-arm64/"/>
    <id>https://majunyi.top/2019/03/12/qemu-ubuntu-arm64/</id>
    <published>2019-03-12T02:17:23.000Z</published>
    <updated>2019-03-12T03:24:47.427Z</updated>
    
    <content type="html"><![CDATA[<p>没有arm64板子的临时解决办法。<br><a id="more"></a><br>其实手头上是有个四核A53的树莓派3B的，但raspbian只有32位版且另有他用不方便换系统。而其他的板子SoC都是32位的（全志A20，H8，BCM2835，BCM2836等），只好先用模拟器装arm64版的ubuntu16.04对付一下。  </p>
<h1 id="安装QEMU"><a href="#安装QEMU" class="headerlink" title="安装QEMU"></a>安装QEMU</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install -y qemu qemu-utils cloud-utils</div></pre></td></tr></table></figure>
<h1 id="下载镜像和UEFI固件"><a href="#下载镜像和UEFI固件" class="headerlink" title="下载镜像和UEFI固件"></a>下载镜像和UEFI固件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://cloud-images.ubuntu.com/releases/16.04/release/ubuntu-16.04-server-cloudimg-arm64-uefi1.img</div><div class="line">wget https://releases.linaro.org/components/kernel/uefi-linaro/latest/release/qemu64/QEMU_EFI.fd</div></pre></td></tr></table></figure>
<h1 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h1><p>复制本机rsa公钥。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>创建并编辑配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi cloud.txt</div></pre></td></tr></table></figure></p>
<p>填入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#cloud-config</div><div class="line">users:</div><div class="line">  - name: mjy</div><div class="line">    ssh-authorized-keys:</div><div class="line">      - ssh-rsa AAAAB...</div><div class="line">    sudo: [&apos;ALL=(ALL) NOPASSWD:ALL&apos;]</div><div class="line">    groups: sudo</div><div class="line">    shell: /bin/bash</div></pre></td></tr></table></figure></p>
<p>其中name为用户名，ssh-rsa为刚才复制的公钥，设置该用户使用sudo时无需输入密码。</p>
<h1 id="备份原始镜像（可选）"><a href="#备份原始镜像（可选）" class="headerlink" title="备份原始镜像（可选）"></a>备份原始镜像（可选）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp ubuntu-16.04-server-cloudimg-arm64-uefi1.img ubuntu-16.04-server-cloudimg-arm64-uefi1.img.orig</div></pre></td></tr></table></figure>
<h1 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">qemu-system-aarch64 \</div><div class="line">    -smp 2 \</div><div class="line">    -m 2048 \</div><div class="line">    -M virt \</div><div class="line">    -cpu cortex<span class="_">-a</span>57 \</div><div class="line">    -bios QEMU_EFI.fd \</div><div class="line">    -nographic \</div><div class="line">    -device virtio-blk-device,drive=image \</div><div class="line">    -drive <span class="keyword">if</span>=none,id=image,file=ubuntu-16.04-server-cloudimg-arm64-uefi1.img \</div><div class="line">    -device virtio-blk-device,drive=cloud \</div><div class="line">    -drive <span class="keyword">if</span>=none,id=cloud,file=cloud.img \</div><div class="line">    -device virtio-net-device,netdev=user0 \</div><div class="line">    -netdev user,id=user0 \</div><div class="line">    -redir tcp:2222::22</div></pre></td></tr></table></figure>
<p>参数解释</p>
<ul>
<li><code>-smp 2</code> - 双核</li>
<li><code>-m 2048</code> - 2G内存</li>
<li><code>-M virt</code> - 模拟通用QEMU ARM机器</li>
<li><code>-cpu cortex-a57</code> - 模拟的CPU型号，这里选择最常见的A57，其他型号可通过<code>qemu-system-aarch64 -M virt -cpu help</code>查询</li>
<li><code>-bios QEMU_EFI.fd</code> - BIOS固件</li>
<li><code>-nographic</code> - 无显示，故启动时的警告和花屏不用管，用ssh</li>
<li><code>-device virtio-blk-device,drive=image</code> - 创建名为”image”的虚拟块设备</li>
<li><code>-drive if=none,id=image,file=ubuntu-16.04-server-cloudimg-arm64-uefi1.img</code> - 用刚才的”image”设备和cloudimg镜像创建驱动器</li>
<li><code>-device virtio-blk-device,drive=cloud</code> - 创建名为”cloud”的虚拟块设备</li>
<li><code>-drive if=none,id=cloud,file=cloud.img</code> - 用刚才的”cloud”设备和配置好的cloud.img镜像创建驱动器</li>
<li><code>-device virtio-net-device,netdev=user0</code> - 创建名为”user0”的虚拟网络设备</li>
<li><code>-netdev user,id=user0</code> - 创建名为”user0”的用户模式网络栈</li>
<li><code>-redir tcp:2222::22</code> - 将虚拟机的22端口映射到本机的2222端口<br>注：第一次启动时间会长一些。  </li>
</ul>
<h1 id="ssh连接虚拟机"><a href="#ssh连接虚拟机" class="headerlink" title="ssh连接虚拟机"></a>ssh连接虚拟机</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p 2222 mjy@localhost</div></pre></td></tr></table></figure>
<h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="error-no-such-device-root"><a href="#error-no-such-device-root" class="headerlink" title="error: no such device: root"></a>error: no such device: root</h2><p>其实不按键盘也能正常启动，是<a href="https://bugs.launchpad.net/cloud-images/+bug/1726476" target="_blank" rel="external">ubuntu镜像的bug</a>，可通过<code>sudo update-grub</code>解决。</p>
<h2 id="perl-warning-Please-check-that-your-locale-settings"><a href="#perl-warning-Please-check-that-your-locale-settings" class="headerlink" title="perl: warning: Please check that your locale settings"></a>perl: warning: Please check that your locale settings</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/default/locale</div></pre></td></tr></table></figure>
<p>添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LANGUAGE=en_US.UTF-8</div><div class="line">LC_ALL=en_US.UTF-8</div></pre></td></tr></table></figure></p>
<h2 id="unable-to-resolve-host-ubuntu"><a href="#unable-to-resolve-host-ubuntu" class="headerlink" title="unable to resolve host ubuntu"></a>unable to resolve host ubuntu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/hosts</div></pre></td></tr></table></figure>
<p>在localhost后面添加ubuntu。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 localhost ubuntu</div></pre></td></tr></table></figure></p>
<h2 id="扩展虚拟机磁盘空间"><a href="#扩展虚拟机磁盘空间" class="headerlink" title="扩展虚拟机磁盘空间"></a>扩展虚拟机磁盘空间</h2><p>默认镜像的2G比较小，在host用<code>qemu-img</code>加多10G。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qemu-img resize ubuntu-16.04-server-cloudimg-arm64-uefi1.img +10G</div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnx-software.com/2016/05/10/how-to-run-ubuntu-16-04-aarch64-64-bit-arm-cloud-images-on-your-intelamd-linux-computer/" target="_blank" rel="external">How to Run Ubuntu 16.04 Aarch64 (64-bit ARM) Cloud Images on Your Intel/AMD Linux Computer with QEMU</a><br><a href="https://helpmanual.io/help/qemu-system-aarch64/" target="_blank" rel="external">qemu-system-aarch64 -h</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没有arm64板子的临时解决办法。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="arm" scheme="https://majunyi.top/tags/arm/"/>
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
      <category term="qemu" scheme="https://majunyi.top/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>树莓派（arm32v7）用Docker部署签到站</title>
    <link href="https://majunyi.top/2019/03/11/rpi-docker-qiandao/"/>
    <id>https://majunyi.top/2019/03/11/rpi-docker-qiandao/</id>
    <published>2019-03-11T13:05:07.000Z</published>
    <updated>2019-03-11T13:33:24.205Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/binux/qiandao" target="_blank" rel="external">qiandao</a>是基于HAR的自动签到框架，官方提供的docker镜像是x86的，树莓派用不了。所以我build了个arm32v7的镜像，除了树莓派2，3外，亦适用于其他32位的ARM平台。<br><a id="more"></a><br>注：树莓派3B之后用<a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2837/README.md" target="_blank" rel="external">BCM2837</a>的板子实际上是64位arm64v8的，但Raspbian为了兼容性问题依旧是32位，故编译环境依旧为32位。<br>关于树莓派的硬件改进历史可以参考<a href="https://elinux.org/RPi_HardwareHistory" target="_blank" rel="external">此处</a>。通过外观基本就能判断版本，如果仍不确定可以通过<code>cat /sys/firmware/devicetree/base/model</code>命令查看型号。</p>
<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>安装并启动docker，测试无误后设为自启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl <span class="_">-s</span>SL https://get.daocloud.io/docker | sh</div><div class="line">sudo service docker start</div><div class="line">sudo systemctl <span class="built_in">enable</span> docker</div></pre></td></tr></table></figure></p>
<p>将当前用户加入docker组并重新登录，这样就不用sudo来跑docker了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo usermod <span class="_">-a</span>G docker pi</div><div class="line">su - pi</div></pre></td></tr></table></figure></p>
<h1 id="下载qiandao的镜像"><a href="#下载qiandao的镜像" class="headerlink" title="下载qiandao的镜像"></a>下载qiandao的镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull mjysci/qiandao:arm32v7</div></pre></td></tr></table></figure>
<h1 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /home/pi/volume</div><div class="line">docker run <span class="_">-d</span> -p 80:80 --name qiandao --restart=on-failure:5 -v /home/pi/volume:/usr/src/app/volume mjysci/qiandao:arm32v7</div></pre></td></tr></table></figure>
<h1 id="配置站点管理员"><a href="#配置站点管理员" class="headerlink" title="配置站点管理员"></a>配置站点管理员</h1><p>浏览器访问树莓派ip地址并注册一个账户。<br>进入容器管理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it qiandao /bin/bash</div></pre></td></tr></table></figure></p>
<p>设置站点管理员。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ./chrole.py &lt;刚才注册的账户邮箱&gt; admin</div></pre></td></tr></table></figure></p>
<p>退出容器管理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">exit</span></div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/binux/qiandao/wiki/Docker%E9%83%A8%E7%BD%B2%E7%AD%BE%E5%88%B0%E7%AB%99%E6%95%99%E7%A8%8B" target="_blank" rel="external">Docker部署签到站教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/binux/qiandao&quot;&gt;qiandao&lt;/a&gt;是基于HAR的自动签到框架，官方提供的docker镜像是x86的，树莓派用不了。所以我build了个arm32v7的镜像，除了树莓派2，3外，亦适用于其他32位的ARM平台。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://majunyi.top/tags/docker/"/>
    
      <category term="rpi" scheme="https://majunyi.top/tags/rpi/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下安装与管理多个Linux内核</title>
    <link href="https://majunyi.top/2019/03/05/install-manage-linux-kernel-ubuntu/"/>
    <id>https://majunyi.top/2019/03/05/install-manage-linux-kernel-ubuntu/</id>
    <published>2019-03-05T00:37:09.000Z</published>
    <updated>2019-03-05T01:46:37.653Z</updated>
    
    <content type="html"><![CDATA[<p>亦适用于Linux Mint。<br><a id="more"></a></p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>多系统且系统间/boot独立的需进入BIOS将启动顺序改为准备折腾的系统所在硬盘。没有共享/boot是因为当其中一个损坏而又急着用时可以用备用系统的/boot进入生产力系统。如果只是单系统跳过此步。<br>安装自4.16后linux-headers对<a href="http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4.3_amd64.deb" target="_blank" rel="external">libssl1.1</a>的依赖。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install libssl1.1_1.1.0g-2ubuntu4.3_amd64.deb</div></pre></td></tr></table></figure></p>
<h1 id="安装Linux内核"><a href="#安装Linux内核" class="headerlink" title="安装Linux内核"></a>安装Linux内核</h1><h2 id="使用工具安装"><a href="#使用工具安装" class="headerlink" title="使用工具安装"></a>使用工具安装</h2><p>不少人都推荐<a href="https://github.com/teejee2008/ukuu" target="_blank" rel="external">ukuu</a>，不过最近该作者<a href="https://teejeetech.in/2019/01/20/ukuu-v19-01/" target="_blank" rel="external">转为收费闭源了</a>，旧的开源版不再更新且<a href="https://github.com/teejee2008/ukuu/issues/49" target="_blank" rel="external">存在连接问题</a>。不推荐使用。<br>这里推荐<a href="https://github.com/pimlie/ubuntu-mainline-kernel.sh" target="_blank" rel="external">ubuntu-mainline-kernel脚本</a>。<br>安装指定版本内核。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ubuntu-mainline-kernel.sh -i 4.19.26</div></pre></td></tr></table></figure></p>
<p>更新bootloader并重启。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo update-grub2</div><div class="line">sudo reboot</div></pre></td></tr></table></figure></p>
<h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>在<a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="external">kernel-ppa</a>处选择自己需要的版本，然后选择架构下载对应的deb包并按页面顺序依次安装headers_all, headers_generic, image, modules包。注意<code>lowlatency</code>是针对低延迟设备的，普通PC选<code>generic</code>即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i *.deb</div></pre></td></tr></table></figure></p>
<p>更新bootloader并重启。</p>
<h2 id="从源码编译安装"><a href="#从源码编译安装" class="headerlink" title="从源码编译安装"></a>从源码编译安装</h2><p><a href="https://www.cyberciti.biz/tips/compiling-linux-kernel-26.html" target="_blank" rel="external">参考这篇文章</a></p>
<h1 id="删除多余内核"><a href="#删除多余内核" class="headerlink" title="删除多余内核"></a>删除多余内核</h1><p>注：待删除内核不能为当前使用内核。</p>
<h2 id="使用工具删除"><a href="#使用工具删除" class="headerlink" title="使用工具删除"></a>使用工具删除</h2><p>推荐<a href="http://byobu.co/" target="_blank" rel="external">byobu</a>里面自带的purge-old-kernels，其中keep参数是指定保留的内核数，默认为2。</p>
<pre><code class="bash">sudo apt install byobu
sudo purge-old-kernels --keep 3
</code></pre>
<p>也可以使用<code>ubuntu-mainline-kernel.sh -u</code>来指定版本逐个删除。</p>
<h2 id="手动删除"><a href="#手动删除" class="headerlink" title="手动删除"></a>手动删除</h2><p>用<code>sudo dpkg --purge</code>指定版本headers_all, headers_generic, image, modules的deb包，删除二进制及配置文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;亦适用于Linux Mint。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://majunyi.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux Mint 18.2版本升级至19.1</title>
    <link href="https://majunyi.top/2019/03/04/upgrade-linux-mint/"/>
    <id>https://majunyi.top/2019/03/04/upgrade-linux-mint/</id>
    <published>2019-03-04T13:21:42.000Z</published>
    <updated>2019-03-04T14:31:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>用Update Manager进行逐步升级，timeshift可跳过。<br><a id="more"></a></p>
<h1 id="升级至18-3"><a href="#升级至18-3" class="headerlink" title="升级至18.3"></a>升级至18.3</h1><p>打开Update Manager，Edit——Upgrade to Linux Mint 18.3 Sylvia。如果是其他版本也是同样的位置，但升级版本不一样，每次升0.1。<br>完成后重启。  </p>
<h1 id="升级至19"><a href="#升级至19" class="headerlink" title="升级至19"></a>升级至19</h1><h2 id="建立系统快照（可选）"><a href="#建立系统快照（可选）" class="headerlink" title="建立系统快照（可选）"></a>建立系统快照（可选）</h2><p>官方强制要求要建立系统快照，但如果像我这样mint只是备用系统，用来折腾不怕搞坏则此步可跳过。<br>以下附上建立快照的步骤：<br>安装timeshift<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install timeshift</div></pre></td></tr></table></figure></p>
<p>Menu——Timeshift打开快照安装向导，选择快照类型（默认RSYNC），选择存储位置，完成向导。<br>Create建立快照。</p>
<h2 id="将显示管理器切换为LightDM"><a href="#将显示管理器切换为LightDM" class="headerlink" title="将显示管理器切换为LightDM"></a>将显示管理器切换为LightDM</h2><p>检查默认显示管理器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/X11/default-display-manager</div></pre></td></tr></table></figure></p>
<p>如果输出为<code>/usr/sbin/lightdm</code>则可跳过下面安装并切换LightDM的步骤。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install lightdm lightdm-settings slick-greeter</div></pre></td></tr></table></figure></p>
<p>安装过程中选择默认显示管理器为lightdm。<br>删除MDM。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt remove --purge mdm mint-mdm-themes*</div></pre></td></tr></table></figure></p>
<p>配置并重启。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo dpkg-reconfigure lightdm</div><div class="line">sudo reboot</div></pre></td></tr></table></figure></p>
<h2 id="升级系统"><a href="#升级系统" class="headerlink" title="升级系统"></a>升级系统</h2><p>安装mintupgrade。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install mintupgrade</div></pre></td></tr></table></figure></p>
<p>（可选）如果前面没有创建快照，执行以下命令以跳过timeshift检查。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo touch /etc/timeshift.json</div></pre></td></tr></table></figure></p>
<p>检查系统。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mintupgrade check</div></pre></td></tr></table></figure></p>
<p>检查过程中会给出依赖有冲突的包，用<code>apt remove</code>删掉即可，升级后再装回去。值得注意的是我之前还装了ros，删掉ros。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get remove ros-*</div></pre></td></tr></table></figure></p>
<p>另外建议想装<a href="http://www.ros.org/install/" target="_blank" rel="external">ROS</a>的老老实实在Ubuntu上弄，在Mint上经过一番折腾后也能用，但没必要把时间花在搭建环境的坑上。<br>预先下载好升级所需包。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mintupgrade download</div></pre></td></tr></table></figure></p>
<p>升级。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mintupgrade upgrade</div></pre></td></tr></table></figure></p>
<h1 id="升级至19-1"><a href="#升级至19-1" class="headerlink" title="升级至19.1"></a>升级至19.1</h1><p>此时如果是装了第三方显卡驱动可能桌面会崩溃并进入低分辨率安全模式，先不管它。<br>每次升级后源会重置，打开Software Sources改成国内源。<br>打开Update Manager，Edit——Upgrade to Linux Mint 19.1 Tessa。  </p>
<h1 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h1><p>解决桌面崩溃问题，重装nvidia显卡驱动。</p>
<pre><code class="bash">apt-get install --reinstall nvidia-415
</code></pre>
<p>用的是这个源<code>sudo add-apt-repository ppa:graphics-drivers/ppa</code>。<br>如果还是不行就装<code>nvidia-396</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Update Manager进行逐步升级，timeshift可跳过。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://majunyi.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>极1s（hc5661）刷潘多拉固件</title>
    <link href="https://majunyi.top/2019/01/13/hc5661-pandorabox/"/>
    <id>https://majunyi.top/2019/01/13/hc5661-pandorabox/</id>
    <published>2019-01-13T02:00:49.000Z</published>
    <updated>2019-01-19T07:29:07.177Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了R6220后顺便把吃灰的极1s也更新一下，刷19.01潘多拉，功能和以前一样，以路由客户端形式实现科学上网专用路由。<br><a id="more"></a></p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>由于之前已经申请root并刷了<a href="https://breed.hackpascal.net/breed-mt7620-hiwifi-hc5761.bin" target="_blank" rel="external">Breed</a>，目前在用的是<a href="https://github.com/rssnsj/openwrt-hc5x61/tree/chaos_calmer" target="_blank" rel="external">rssnsj</a>的<a href="http://rssn.cn/roms/" target="_blank" rel="external">固件</a>，所以准备工作省了。<br>需注意极1s先后有两个版本，早期和极2芯片一致用<a href="https://www.mediatek.com/products/homeNetworking/mt7620n-a" target="_blank" rel="external">MT7620A</a>的hc5661和后续缩水用<a href="https://www.mediatek.com/products/homeNetworking/mt7628k-n-a" target="_blank" rel="external">MT7628</a>的hc5661a，从MTK官方介绍可知主要是缩掉了硬件网络加速(HWNAT)和存储加速，但软件上增加了AES128/256的加速。二者uboot和固件均不一样，不能混用。想确定版本见路由底部标签，另外ssh登录路由后通过<code>cat /proc/cpuinfo</code>也可进一步确认。  </p>
<h1 id="刷潘多拉固件"><a href="#刷潘多拉固件" class="headerlink" title="刷潘多拉固件"></a>刷潘多拉固件</h1><p>长按reset并开机，访问<code>192.168.1.1</code>进入breed。<br>选择<a href="https://downloads.pangubox.com/pandorabox/19.01/targets/ralink/mt7620/PandoraBox-ralink-mt7620-hc5661-2018-12-31-git-4b6a3d5ca-squashfs-sysupgrade.bin" target="_blank" rel="external">潘多拉19.01固件</a>并上传即可。</p>
<h1 id="设置以路由模式桥接"><a href="#设置以路由模式桥接" class="headerlink" title="设置以路由模式桥接"></a>设置以路由模式桥接</h1><p>由于是科学上网专用路由，故无需像<a href="https://majunyi.top/2019/01/08/r6220-relay-bridge/">之前R6220那样</a>弄成中继桥，简单不少。<br>无线——扫描——加入网络，输入主路由密码，其他配置默认并提交。<br>接口，添加接口，协议选AP，设置无线名称和密码，网络选lan，提交。这样方便无线设备也可连上此路由。<br>此时笔记本通过LAN和路由相连，路由通过2.4G无线与主路由连接<a href="http://www.speedtest.cn/" target="_blank" rel="external">测速</a>下行为45.78Mbps。</p>
<h1 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h1><p>这里主要参考<a href="https://cokebar.info/archives/664" target="_blank" rel="external">cokebar的这篇文章</a>，讲得很详细。但安装部分注意有改动：<br>系统——软件包处搜索并安装<code>luci-app-shadowsocks</code>，opkg会自动解决依赖装上<code>shadowsocks-libev</code>相关包。<br>同理装上<code>luci-app-ChinaDNS</code>。<br>但潘多拉的源里并未包含<code>DNS-forwarder</code>，需要到作者aa65535的<a href="https://github.com/aa65535/openwrt-dns-forwarder" target="_blank" rel="external">项目页面</a> 下载<a href="https://github.com/aa65535/openwrt-dns-forwarder/releases/download/v1.1.1/dns-forwarder_1.1.1-1_ramips_24kec.ipk" target="_blank" rel="external">dns-forwarder</a>和<a href="http://openwrt-dist.sourceforge.net/packages/luci/luci-app-dns-forwarder_1.6.2-1_all.ipk" target="_blank" rel="external">luci-app-dns-forwarder</a><br>scp上传到路由的root文件夹处。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp *.ipk root@192.168.1.1:/root</div></pre></td></tr></table></figure></p>
<p>ssh连上路由，需注意由于pandorabox改了mt7620的架构名称，直接opkg install会显示架构不支持，需对<code>opkg.conf</code>进行更改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/opkg.conf</div></pre></td></tr></table></figure></p>
<p>在文件末尾添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">arch all 100</div><div class="line">arch ramips 200</div><div class="line">arch ramips_24kec 300</div><div class="line">arch mipsel_24kec_dsp 400</div><div class="line">```  </div><div class="line">安装dns-forwarder。</div></pre></td></tr></table></figure></p>
<p>opkg update<br>opkg install dns-forwarder_1.1.1-1_ramips_24kec.ipk luci-app-dns-forwarder_1.6.2-1_all.ipk<br><code>``
之后从</code>二、shadowsocks 配置`照着配置即可。要点如下：  </p>
<h2 id="Shadowsocks配置"><a href="#Shadowsocks配置" class="headerlink" title="Shadowsocks配置"></a>Shadowsocks配置</h2><p><code>服务-影梭-服务器管理</code>处填写服务器配置。<br><code>访问控制</code>处被忽略IP列表为<code>ChinaDNS路由表</code>。<br><code>常规设置</code>处<code>透明代理-主服务器</code>选择刚才填好的服务器。</p>
<h2 id="DNS配置"><a href="#DNS配置" class="headerlink" title="DNS配置"></a>DNS配置</h2><p><code>服务-DNS转发</code>处<code>启用</code>，监听端口<code>5311</code>，监听地址<code>127.0.0.1</code>。<br><code>服务-ChinaDNS</code>处<code>启用</code>，本地端口<code>5353</code>，上游服务器<code>223.5.5.5,127.0.0.1#5311</code>。<br><code>网络-DHCP/DNS</code>处DNS转发<code>127.0.0.1#5353</code>，HOSTS和解析文件处<code>忽略解析文件</code><br>注：解析文件的默认位置是<code>/tmp/resolv.conf.auto</code>。    </p>
<p>最后在相同条件下测速下行47.49Mbps，居然比设置科学上网前还稍快，属正常波动范围，可认为开启三个服务后低负载情况下对路由性能影响甚微。<br>高负载目前不好测试，因为影响因素太多。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了R6220后顺便把吃灰的极1s也更新一下，刷19.01潘多拉，功能和以前一样，以路由客户端形式实现科学上网专用路由。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="firmware" scheme="https://majunyi.top/tags/firmware/"/>
    
      <category term="router" scheme="https://majunyi.top/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>R6220采用中继桥实现无线桥接</title>
    <link href="https://majunyi.top/2019/01/08/r6220-relay-bridge/"/>
    <id>https://majunyi.top/2019/01/08/r6220-relay-bridge/</id>
    <published>2019-01-08T03:35:23.000Z</published>
    <updated>2019-01-13T02:35:40.759Z</updated>
    
    <content type="html"><![CDATA[<p>htpc不能直连NAS和咸鱼有什么区别？采用中继桥实现同一网段后下行速度由100Mbps降为75Mbps，播放4K烤鸭测试视频不卡，可以接受。<br><a id="more"></a><br><a href="https://majunyi.top/2019/01/06/r6220-breed-pandora/">前情提要</a>，虽然远程桌面非刚需，但htpc无法直连主路由网段的NAS不能接受。还是需要桥接把副路由连接设备和主路由放在同一网段。  </p>
<h1 id="安装relay协议"><a href="#安装relay协议" class="headerlink" title="安装relay协议"></a>安装relay协议</h1><p>潘多拉默认未带，不过其应用层是和openwrt及luci兼容的，可装<a href="https://openwrt.org/packages/pkgdata/luci-proto-relay" target="_blank" rel="external">luci-proto-relay</a><br>ssh连上路由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@192.168.1.1</div></pre></td></tr></table></figure></p>
<p>更新并安装luci-proto-relay  </p>
<pre><code>opkg update
opkg install luci-proto-relay
</code></pre><p>注：潘多拉的web ui和openwrt基本一样，其实自带软件包管理项，不想输命令可登录web管理——系统——软件包处搜索并安装。  </p>
<h1 id="设置中继桥"><a href="#设置中继桥" class="headerlink" title="设置中继桥"></a>设置中继桥</h1><h2 id="修改LAN"><a href="#修改LAN" class="headerlink" title="修改LAN"></a>修改LAN</h2><p>接口——LAN，地址修改为和主路由不同的网段，如<code>192.168.2.1</code>。禁用DHCP。<br>将计算机连路由的接口取消自动获取IP, 改成静态IP<code>192.168.2.10</code>，默认网关<code>192.168.2.1</code>。断开与路由的连接然后重连。</p>
<h2 id="以无线客户端模式加入主路由网络"><a href="#以无线客户端模式加入主路由网络" class="headerlink" title="以无线客户端模式加入主路由网络"></a>以无线客户端模式加入主路由网络</h2><p>无线——扫描——加入网络，填入密码后记得<strong>把防火墙区域改成lan</strong>。    </p>
<h2 id="添加桥接接口"><a href="#添加桥接接口" class="headerlink" title="添加桥接接口"></a>添加桥接接口</h2><p>接口，添加接口，协议选<code>中继桥</code>（Relay bridge）。<br>在新接口设置界面勾选<code>lan</code>和<code>wwan</code>。<br>重启路由。  </p>
<p>注：以上步骤参考自官方的<a href="https://openwrt.org/docs/guide-user/network/wifi/relay_configuration#setup_with_luci_gui" target="_blank" rel="external">luci界面设置中继桥教程</a>。</p>
<h1 id="htpc连NAS"><a href="#htpc连NAS" class="headerlink" title="htpc连NAS"></a>htpc连NAS</h1><p>此步非必须。只是现在网络发现处NAS只出现在多媒体类别下，而不在计算机类别。<br>程序与功能——启用或关闭Windows功能——勾选SMB 1.0，重启win10。  </p>
<h1 id="备用资料"><a href="#备用资料" class="headerlink" title="备用资料"></a>备用资料</h1><p>附上R6220原版固件资料以备不时之需：<br><a href="https://www.netgear.com/support/product/R6220.aspx#download" target="_blank" rel="external">R6220官方支持页面</a><br><a href="https://kb.netgear.com/24108/How-do-I-configure-my-Nighthawk-router-as-a-wireless-repeater" target="_blank" rel="external">Netgear设置wireless repeater步骤</a><br><a href="http://www.downloads.netgear.com/files/GDC/R6220/R6220-V1.1.0.80_1.0.1.zip" target="_blank" rel="external">R6220官方固件V1.1.0.80_1.0.1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;htpc不能直连NAS和咸鱼有什么区别？采用中继桥实现同一网段后下行速度由100Mbps降为75Mbps，播放4K烤鸭测试视频不卡，可以接受。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Netgear R6220刷Breed和pandorabox固件</title>
    <link href="https://majunyi.top/2019/01/06/r6220-breed-pandora/"/>
    <id>https://majunyi.top/2019/01/06/r6220-breed-pandora/</id>
    <published>2019-01-06T14:21:52.000Z</published>
    <updated>2019-01-19T07:19:05.587Z</updated>
    
    <content type="html"><![CDATA[<p>刷了Breed后更新固件变得十分简单和安全，采用潘多拉固件不用担心硬件版本不同带来的分区问题。<br><a id="more"></a></p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>FAT32格式的U盘<br>下载<a href="https://breed.hackpascal.net/breed-mt7621-r6220.bin" target="_blank" rel="external">适配R6220的Breed</a>，并拷入U盘<br>下载<a href="https://downloads.pangubox.com/pandorabox/19.01/targets/ralink/mt7621/PandoraBox-ralink-mt7621-netgear-r6220-2019-01-01-git-3e8866933-squashfs-sysupgrade.bin" target="_blank" rel="external">适配R6220的潘多拉19.01</a>  </p>
<h1 id="刷Breed"><a href="#刷Breed" class="headerlink" title="刷Breed"></a>刷Breed</h1><p>Breed是用来替换官方Bootloader的，Web界面操作方便安全，<a href="https://www.right.com.cn/forum/thread-161906-1-1.html" target="_blank" rel="external">作者帖子</a>。<br>win10需开启telnet：<br>控制面板——程序和功能——启用或关闭Windows功能——Telnet客户端  </p>
<p>开启R6220的telnet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://10.0.0.1/setup.cgi?todo=debug</div></pre></td></tr></table></figure></p>
<p>连接R6220<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">telnet 10.0.0.1</div></pre></td></tr></table></figure></p>
<p>查看U盘挂载路径并进入，通常是U<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ls /mnt/shares</div><div class="line">cd /mnt/shares/U</div></pre></td></tr></table></figure></p>
<p>读取mtd分区表，备份eeprom<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat /proc/mtd</div><div class="line">dd if=/dev/mtd10 of=./mtd10.bin</div></pre></td></tr></table></figure></p>
<p>刷Breed<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mtd_write write breed-mt7621-r6220.bin Bootloader</div></pre></td></tr></table></figure></p>
<h1 id="刷PandoraBox固件"><a href="#刷PandoraBox固件" class="headerlink" title="刷PandoraBox固件"></a>刷PandoraBox固件</h1><p>选择PandoraBox主要是因为其“使用芯片厂家的闭源驱动,性能与稳定性比开源驱动有较大提升”，另外还有若干特性，详见<a href="https://bbs.pangubox.com/forum.php?mod=viewthread&amp;tid=561&amp;extra=" target="_blank" rel="external">官方介绍</a>。  </p>
<p>路由断电，长按reset开机，电源规律闪烁后访问192.168.1.1进入Breed Web恢复控制台，点固件更新，选择刚才下载的潘多拉固件上传，耐心等待路由更新重启。<br>访问192.168.1.1进入潘多拉管理界面，默认用户root，密码admin。  </p>
<h1 id="设置路由客户端模式"><a href="#设置路由客户端模式" class="headerlink" title="设置路由客户端模式"></a>设置路由客户端模式</h1><p><a href="https://majunyi.top/2019/01/05/choose-router/">之前的文章</a>提到将R6220作为htpc无线网卡时发现官方固件无法进行无线桥接。刷成潘多拉后按之前用openwrt的经验：  </p>
<ol>
<li>点“无线”，删掉默认的两个Master  </li>
<li>用5G无线扫描，加入主路由网络  </li>
<li>填入密码，其他设置默认  </li>
</ol>
<p>应用设置后通过网线连接R6220的htpc可以正常上网，测速达到100Mbps上下，看cbox的直播和爱奇艺的高清电影再无卡顿。<br>如果想让R6220也扩展无线信号可以将没用上的2.4G无线添加个AP接口即可。<br>如果离主路由较远，5G连接不稳定也可以将2.4G用来收，5G用来发，看需求如何了，但不要将同一个无线芯片用来同时收发，否则理论速率减半，降速严重。另外某些老旧设备或IoT只有2.4G，考虑兼容性还是推荐用2.4G作为AP。<br>科学上网设置可参考<a href="https://majunyi.top/2019/01/13/hc5661-pandorabox/">极1s这篇文章</a>。不同之处：<br>R6220的SoC是MT7621ST，架构是<a href="https://wikidevi.com/wiki/MIPS32#MIPS32_1004Kc_.2F_1004Kf" target="_blank" rel="external">MIPS32 1004Kc</a>，一开始装了mipsel_mips32的<code>dns-forwarder</code>但并不能正常工作。尝试<a href="https://dl.bintray.com/aa65535/openwrt/dns-forwarder/1.2.1/OpenWrt/ramips/:dns-forwarder_1.2.1-1_ramips_24kec.ipk" target="_blank" rel="external">rampis_24kec</a>可以兼容。需注意要先改<code>opkg.conf</code>添加兼容架构，不想输命令可以在luci中<code>系统-软件包-opkg配置-配置</code>处添加：  </p>
<pre><code>arch all 100
arch mipsel_1004kc_dsp 200
arch ramips 300
arch mipsel_24kc 400
arch ramips_24kec 500
</code></pre><p>其他步骤一致。<br>简单测速下行61.07Mbps，比极1s要好不少。  </p>
<h1 id="中继桥模式"><a href="#中继桥模式" class="headerlink" title="中继桥模式"></a>中继桥模式</h1><p>但这里有个问题，这并非桥接模式，而是隔了个路由组了个子网，其他机器无法直连R6220背后的htpc。潘多拉固件的无线接口模式中，如果不选Client选WDS，则会提示需要两个路由的芯片都是雷凌的才行，而我的主路由是博通的。通过查阅官方文档<a href="https://oldwiki.archive.openwrt.org/doc/howto/clientmode" target="_blank" rel="external">Client Mode Wireless</a>可知，我现有的是Routed Client Mode，而Bridged Client Mode需要博通的芯片……而用着BCM4706的华硕是主路由，且对openwrt兼容性不好，不过测试时作为副路由用merlin的桥接倒是很顺利。<br>剩下只有Bridged Client Mode (with relayd)这一种了，通过中继的方式模拟出桥接的效果。具体操作方式<a href="https://openwrt.org/docs/guide-user/network/wifi/relay_configuration#setup_with_luci_gui" target="_blank" rel="external">见此处</a>。但这种方式一大弊端就是降速。比起现在几乎不用的远程桌面直连htpc，似乎速度更重要。<a href="https://majunyi.top/2019/01/08/r6220-relay-bridge/">以后再弄吧</a>。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刷了Breed后更新固件变得十分简单和安全，采用潘多拉固件不用担心硬件版本不同带来的分区问题。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="firmware" scheme="https://majunyi.top/tags/firmware/"/>
    
  </entry>
  
  <entry>
    <title>购买路由注意事项</title>
    <link href="https://majunyi.top/2019/01/05/choose-router/"/>
    <id>https://majunyi.top/2019/01/05/choose-router/</id>
    <published>2019-01-05T11:50:58.000Z</published>
    <updated>2019-01-17T05:58:45.104Z</updated>
    
    <content type="html"><![CDATA[<p>简而言之，按自己需求选高端的高通方案或高性价比的雷凌方案的千兆LAN路由，是否用Merlin(华硕)或OpenWrt（避开博通），对发热比较敏感SoC选ARM架构。<br><a id="more"></a></p>
<h1 id="以下列出我用过的路由及其优缺点"><a href="#以下列出我用过的路由及其优缺点" class="headerlink" title="以下列出我用过的路由及其优缺点"></a>以下列出我用过的路由及其优缺点</h1><h2 id="TP-LINK-TL-WR847N-v3"><a href="#TP-LINK-TL-WR847N-v3" class="headerlink" title="TP-LINK TL-WR847N v3"></a>TP-LINK TL-WR847N v3</h2><p>++ 便宜<br>++ 支持WDS，支持桥接，可作为无线网卡发挥余热<br>– 百兆LAN<br>– 开启WDS作为无线网卡速度不稳定，实际只有11Mbps左右<br>– FLASH太小（2M），刷不了第三方固件<br>很久以前买的无线路由，以当时的需求（ADSL小水管，还没有openwrt）和机器本身的价格来看没什么缺点。但现在看来作为无线网卡都满足不了看网络高清直播，廉颇老矣。<br>其实那个时代有个神器，华为的电信定制路由HG255D，Flash 16M，RAM 32M，SoC是Ralink RT3052@384Mhz，电信原版的u-boot就是不死的，网络页面即可刷openwrt, dd-wrt等等。另外板上还提供了JTAG，有5个GPIO，这样玩法就更多了。想想后来大火的树莓派能做的事情，当时255D就能做到，比如成为WIFI控制的智能小车。  </p>
<h2 id="极路由-极1S-HC5661"><a href="#极路由-极1S-HC5661" class="headerlink" title="极路由 极1S HC5661"></a>极路由 极1S HC5661</h2><p>++ 便宜<br>++ 可刷openwrt<br>++ RAM 128M够大，FLASH 16M也够用<br>++ 可通过SD卡扩展空间安装插件<br>– LAN是百兆<br>– 官方插件库河蟹后没了去广告，科学上网等等，使得官方的定制系统很鸡肋<br>– 刷第三方固件前需先解锁<br>– 不支持5G<br>– 无USB接口，不方便挂移动硬盘下载和分享<br>这款路由就是用来刷原版openwrt的，方便不能装SS客户端的设备也能科学上网。主板其实有预留USB接口，可以自己焊上，但传输性能感人，且因为是百兆口，又不支持5G不久后被淘汰。另外SoC是MIPS架构的，toolchains相较ARM的比较老旧，不便于二次开发，合适版本的第三方软件不好找，很可能要自己动手。另外SoC用的是雷凌的MT7620A。</p>
<h2 id="Netgear-R6220"><a href="#Netgear-R6220" class="headerlink" title="Netgear R6220"></a>Netgear R6220</h2><p>++ 购买时较便宜<br>++ 千兆LAN<br>– 有线传输速度稳定在75MB/s上下，跑不满带宽<br>– 官方固件不支持无线桥接<br>– 刷机没有华硕或极路由方便，救砖麻烦<br>这款路由用的时间较长，由于是主路由，所以基于稳定的原因一直用官方的固件。直到买了NAS，NAS内部测试单盘速度达110MB/s，但从台式机复制文件到NAS的实际速度却只在75MB/s上下浮动。台式机源文件在SSD，千兆LAN口，CAT6的仅1.5米的网线，没开QoS，所以瓶颈很可能是在路由上了。SoC是雷凌的MT7621ST（MIPS架构，单核双线程），这和它的小弟MT7620A的感人io性能有点类似，但手头没有其他MT7621ST的机器，所以只是猜测。另外一个缺点则是打算将R6220作为htpc的无线网卡时才发现的问题：这货的官方固件竟然没有无线桥接功能！这可是连老掉牙的白菜价WR847N都带有的，网件居然阉割掉了。<br>要解决这个问题需要刷openwrt，先检查<a href="https://openwrt.org/toh/netgear/netgear_r6220" target="_blank" rel="external">R6220的openwrt官方支持页面</a>：无线完全支持，5G也没问题。但不同版本的Flash Layout有所不同，刷错会造成无线的出厂参数不对，无法正常工作，具体现象是LAN口MAC地址和设备标签不一致。另外用的是NAND的FLASH，编程器不像SPI FLASH的那么常见，救砖不方便：需要替换成SPI FLASH或者<a href="http://forgotfun.org/2016/03/NAND-Programmer.html" target="_blank" rel="external">自制NAND编程器</a>。有空再弄。  </p>
<h2 id="Asus-RT-AC66U"><a href="#Asus-RT-AC66U" class="headerlink" title="Asus RT-AC66U"></a>Asus RT-AC66U</h2><p>++ 性能强大，千兆LAN基本能跑满<br>++ 可刷<a href="https://sourceforge.net/projects/asuswrt-merlin/files/RT-AC66U/Release/" target="_blank" rel="external">Merlin</a>，在官方固件稳定，高性能的前提下通过脚本实现自动化功能<br>– SoC是博通的MIPS架构BCM4706，第三方软件不好找，Merlin<a href="https://github.com/RMerl/asuswrt-merlin/wiki/Supported-Devices" target="_blank" rel="external">只支持到legacy 380.xx</a><br>– openwrt不支持5G<br>目前在用的主路由，由于：1.已有NAS，下载机由htpc兼任；2.科学上网各常用设备都装了客户端，极少情况下才会使用有无法安装SS客户端的设备再开吃灰的极1S临时使用；3.IPTV走光猫专用接口，迅雷跑满也不影响电视盒子的高清直播，故对QoS无需求。所以只需路由功能，600MHz的单核SoC完全够用。<br>如果需要在路由端实现科学上网的建议上AC66U B1（AC68U马甲），有现成的SS ARM版客户端，双核应对通信加密的压力更轻一些。且多了USB3.0，可以挂移动硬盘用来做轻量级的下载和分享。<br>选择华硕就是选择了梅林固件，稳定高效但可玩性不如openwrt，另外要想得到384新特性和持续更新固件的话还是要选ARM芯片的华硕路由，至少是66U B1。  </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果玩OpenWrt是刚需的话<a href="https://openwrt.org/supported_devices" target="_blank" rel="external">官方推荐配置</a>是8M FLASH, 64M RAM。这个配置现在基本都能达到，所以看中某个型号后仍需去<a href="https://openwrt.org/toh/views/toh_available_864" target="_blank" rel="external">这里</a>查阅兼容性，特别是<strong>Unsupported Functions</strong>这一栏。高通的芯片优先，因其无线驱动开源。雷凌也开源了无线驱动，虽然性能差些，可考虑作为廉价openwrt平台的选择。博通的可用<a href="https://dd-wrt.com/support/router-database/" target="_blank" rel="external">dd-wrt</a>，因其采用了博通的闭源无线驱动，若用openwrt的话即便勉强支持其性能和稳定性也是灾难。各家芯片对开源的支持可<a href="https://en.wikipedia.org/wiki/Comparison_of_open-source_wireless_drivers" target="_blank" rel="external">参照此处</a>，可作为openwrt支持的另一个参考。<br>至于品牌选择，其实就是对官方固件的选择，否则刷了第三方固件就是硬件的比较了。目前来看华硕的官方固件最好用，无阉割，易用性好，响应也快，而且可以不经uboot和Merlin自由切换，方便安全。普联即便是白菜价的低端型号，功能也很全，把硬件性能压榨到极致，官方固件是专业风格，虽不够华硕简洁但熟悉后想找什么功能一目了然，响应速度还行。网件的官方固件则比较糟糕，分成了简易和进阶模式，默认简易模式，找不到还要跑进阶找，而且响应速度很慢，最重要的是一些功能被屏蔽掉了，只在高端型号开启。<br>此外，由于路由比较耐用，本文并未涉及较新的型号。比如普联的某些低端型号有用到VxWorks，由于是实时系统，理论上比linux更适合做路由，但很考验厂商的开发能力，不知功能和易用性如何。华硕的新一代高端路由是带<a href="https://www.asus.com/us/AiMesh/" target="_blank" rel="external">AiMesh</a>的，但Merlin<a href="https://github.com/RMerl/asuswrt-merlin.ng/blob/master/Changelog-NG.txt" target="_blank" rel="external">尚未支持</a>，如有需求则只能用官方固件。网件在高端型号上比同级别华硕要便宜，硬件有时还会稍好一些，部分型号可以刷Merlin，但步骤比华硕要繁琐许多，能忍受官方固件的话作为主路由也蛮不错。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简而言之，按自己需求选高端的高通方案或高性价比的雷凌方案的千兆LAN路由，是否用Merlin(华硕)或OpenWrt（避开博通），对发热比较敏感SoC选ARM架构。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="shopping" scheme="https://majunyi.top/tags/shopping/"/>
    
      <category term="firmware" scheme="https://majunyi.top/tags/firmware/"/>
    
      <category term="router" scheme="https://majunyi.top/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>升级cloudatcost的ubuntu至18.04</title>
    <link href="https://majunyi.top/2018/11/19/cac-upgrade-ubuntu/"/>
    <id>https://majunyi.top/2018/11/19/cac-upgrade-ubuntu/</id>
    <published>2018-11-19T07:10:09.000Z</published>
    <updated>2018-11-23T01:15:06.993Z</updated>
    
    <content type="html"><![CDATA[<p>升级发行版在本地没什么难度，不过远程通过ssh还是有些坑需要避免。<br><a id="more"></a><br>这个<a href="http://t.cn/E2gkWbY" target="_blank" rel="external">cac</a>的vps前一阵抽风，恢复后别说内容了，整个server都消失了。除了数据没保障外服务器也不稳定，io性能很差，且条款随意修改，现在需要年付9刀的管理费（不过收了管理费后服务质量稍有提升，但ticket仍然万年无回复），不知道什么时候会跑路。若不是专用机场部署简单且流量不限的话真不如扔掉，想要稳定又廉价的可以上<a href="http://t.cn/EwLt7Zp" target="_blank" rel="external">搬瓦工</a>年付19.99刀的车。  </p>
<p>原来为了稳定所以是用centos7的系统只搭机场。现在决定装ubuntu作为测试用服务器玩新东西。但cac只提供了老掉牙的14.04。故需要升级系统。</p>
<h1 id="升级内核开启bbr"><a href="#升级内核开启bbr" class="headerlink" title="升级内核开启bbr"></a>升级内核开启bbr</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh</div><div class="line">sudo ./bbr.sh</div></pre></td></tr></table></figure>
<p>内核选4.15.18。之前升完系统才升内核还选了最新的4.19.2结果翻车了。所以这里先升内核确保系统没挂且能正常开启bbr。升完后一般就会自动开启，运行<code>lsmod | grep bbr</code>查看结果。</p>
<h1 id="升级发行版"><a href="#升级发行版" class="headerlink" title="升级发行版"></a>升级发行版</h1><p>远程升级需要注意ssh连接的稳定性问题，和本地不一样，需要用神器tmux以便ssh不幸断开后任务仍会继续在后台执行。</p>
<p>另外一种方法是ssh设置防呆，在服务器端执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/ssh/sshd_config</div><div class="line">文件末尾添加ClientAliveInterval 60</div><div class="line">systemctl restart ssh     //需注意14.04用的是upstart, 15.04之后才是systemctl</div></pre></td></tr></table></figure></p>
<p>不过鉴于我国的特殊国情，防呆防不了断开，特别是晚上。所以还是要用tmux：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tmux new-session <span class="_">-s</span> ug</div><div class="line">apt update &amp;&amp; apt dist-upgrade</div><div class="line">apt-get autoremove  //删掉旧的内核免得/boot区满了</div><div class="line"><span class="keyword">do</span>-release-upgrade</div></pre></td></tr></table></figure>
<p>如果中途断开就用ssh重连，然后<code>tmux a -t ug</code>加载屏幕继续查看。升级完成后用<code>lsb_release -a</code>查看系统版本。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;升级发行版在本地没什么难度，不过远程通过ssh还是有些坑需要避免。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vps" scheme="https://majunyi.top/tags/vps/"/>
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>无人车开发工程师第一学期环境搭建</title>
    <link href="https://majunyi.top/2017/09/11/carnd-env/"/>
    <id>https://majunyi.top/2017/09/11/carnd-env/</id>
    <published>2017-09-11T03:55:06.000Z</published>
    <updated>2017-09-11T04:26:50.576Z</updated>
    
    <content type="html"><![CDATA[<p>第一学期项目主要用到python，opencv，tensorflow等，课程中提供的一键安装配置文件中各组件的版本太旧，再加上国内特殊网络环境的限制，故默认搭建方案并不适用。<br><a id="more"></a></p>
<p>虽然如此，官方的<a href="https://github.com/udacity/CarND-Term1-Starter-Kit/blob/master/environment-gpu.yml" target="_blank" rel="external">environment-gpu.yml</a>仍具有重要参考价值。</p>
<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p>OS: Linux Mint 18.2<br>GPU: NVIDIA GeForce GTX 1080 Ti</p>
<h2 id="建立新环境"><a href="#建立新环境" class="headerlink" title="建立新环境"></a>建立新环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda create -n carnd-term1 python=3</div></pre></td></tr></table></figure>
<h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conda install numpy matplotlib jupyter opencv pillow scikit-learn scikit-image scipy h5py flask-socketio seaborn pandas pyqt keras-gpu</div><div class="line">pip install eventlet imageio moviepy</div></pre></td></tr></table></figure>
<p>注意这里由于网络不畅，menpo通道的opencv3下载时经常掉线。装tuna源的opencv替代。所有包默认最新版，keras选gpu版会自动装上tensorflow-gpu及cuda、cudnn等。</p>
<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>直接跑<a href="https://github.com/udacity/CarND-Term1-Starter-Kit-Test" target="_blank" rel="external">测试程序</a>会出现以下报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ImportError: libopenblasp-r0-39a31c03.2.18.so: cannot open shared object file: No such file or directory</div><div class="line">ImportError: Importing the multiarray numpy extension module failed.</div><div class="line">Most likely you are trying to import a failed build of numpy.</div></pre></td></tr></table></figure></p>
<p>走了些mkl的弯路后发现解决方法简单粗暴，忽略conda已装的numpy，然后用pip装最新版numpy即可解决问题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --ignore-installed numpy</div></pre></td></tr></table></figure></p>
<h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><p>在测试notebook里直接执行以下代码下载安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import imageio</div><div class="line">imageio.plugins.ffmpeg.download()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一学期项目主要用到python，opencv，tensorflow等，课程中提供的一键安装配置文件中各组件的版本太旧，再加上国内特殊网络环境的限制，故默认搭建方案并不适用。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="udacity" scheme="https://majunyi.top/tags/udacity/"/>
    
      <category term="engineering" scheme="https://majunyi.top/tags/engineering/"/>
    
  </entry>
  
  <entry>
    <title>利用树莓派DIY运动检测监控</title>
    <link href="https://majunyi.top/2017/04/22/rpi-cctv-motion/"/>
    <id>https://majunyi.top/2017/04/22/rpi-cctv-motion/</id>
    <published>2017-04-22T02:38:56.000Z</published>
    <updated>2017-04-22T04:36:48.091Z</updated>
    
    <content type="html"><![CDATA[<p>出门在外，难免担心有贼入窃。恰好手头上有闲置的树莓派一件，加上摄像头配合motion可以搭一套带运动检测的监控系统，设置好后若检测到异常可以自动将短片，图像发送到指定邮箱。手机收到邮件提醒可以远程连上摄像头查看情况。即便监控被破坏，由于图像和短片已发送至邮件服务器，仍可用于取证。</p>
<a id="more"></a>
<h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><ol>
<li><a href="https://www.raspberrypi.org/products/" target="_blank" rel="external">树莓派Raspberry Pi 3</a></li>
<li><a href="http://www.waveshare.com/rpi-ir-cut-camera.htm" target="_blank" rel="external">RPi IR-CUT Camera</a></li>
</ol>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="启用摄像头"><a href="#启用摄像头" class="headerlink" title="启用摄像头"></a>启用摄像头</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/modules</div></pre></td></tr></table></figure>
<p>添加这一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bcm2835-v4l2</div></pre></td></tr></table></figure></p>
<p>重启后测试摄像头<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">raspistill -o image.jpg -t 10000     <span class="comment">#test camera</span></div></pre></td></tr></table></figure></p>
<h3 id="安装motionEye"><a href="#安装motionEye" class="headerlink" title="安装motionEye"></a>安装motionEye</h3><p>核心软件是<a href="http://www.lavrsen.dk/foswiki/bin/view/Motion/WebHome" target="_blank" rel="external">Motion</a>，我以前就是用它配合Mutt来实现前言的功能的，但配置稍麻烦，且自带的远程管理界面略简单。后来发现<a href="https://github.com/ccrisan/motioneye/wiki" target="_blank" rel="external">motionEye</a>，是用python写的Motion前端，十分好用。</p>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/ccrisan/motioneye/wiki/precompiled/ffmpeg_3.1.1-1_armhf.deb</div><div class="line">sudo dpkg -i ffmpeg_3.1.1-1_armhf.deb</div><div class="line"><span class="comment">#apt-get remove libavcodec-extra-56 libavformat56 libavresample2 libavutil54</span></div><div class="line">sudo apt-get install python-pip python-dev curl libssl-dev libcurl4-openssl-dev libjpeg-dev libx264-142 libavcodec56 libavformat56 libmysqlclient18 libswscale3 libpq5 v4l-utils</div><div class="line">wget https://github.com/Motion-Project/motion/releases/download/release-4.0.1/pi_jessie_motion_4.0.1-1_armhf.deb</div><div class="line">sudo dpkg -i pi_jessie_motion_4.0.1-1_armhf.deb</div></pre></td></tr></table></figure>
<h4 id="更改pip源为国内aliyun镜像"><a href="#更改pip源为国内aliyun镜像" class="headerlink" title="更改pip源为国内aliyun镜像"></a>更改pip源为国内aliyun镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir ~/.pip</div><div class="line">nano ~/.pip/pip.conf</div></pre></td></tr></table></figure>
<p>添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">trusted-host =  mirrors.aliyun.com</div><div class="line">index-url = http://mirrors.aliyun.com/pypi/simple</div></pre></td></tr></table></figure></p>
<h4 id="安装motionEye-1"><a href="#安装motionEye-1" class="headerlink" title="安装motionEye"></a>安装motionEye</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo pip install motioneye</div><div class="line">sudo mkdir -p /etc/motioneye</div><div class="line">sudo cp /usr/<span class="built_in">local</span>/share/motioneye/extra/motioneye.conf.sample /etc/motioneye/motioneye.conf</div><div class="line"></div><div class="line">sudo cp /usr/<span class="built_in">local</span>/share/motioneye/extra/motioneye.systemd-unit-local /etc/systemd/system/motioneye.service</div><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo systemctl <span class="built_in">enable</span> motioneye          <span class="comment">#设为开机启动，可选</span></div><div class="line">sudo systemctl start motioneye</div></pre></td></tr></table></figure>
<h4 id="更新（可选）"><a href="#更新（可选）" class="headerlink" title="更新（可选）"></a>更新（可选）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo pip install motioneye --upgrade</div><div class="line">sudo systemctl restart motioneye</div></pre></td></tr></table></figure>
<h2 id="配置motionEye"><a href="#配置motionEye" class="headerlink" title="配置motionEye"></a>配置motionEye</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/motioneye/motioneye.conf</div></pre></td></tr></table></figure>
<p>更改端口（可选）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">port 8765</div><div class="line">motion_control_port 7999</div></pre></td></tr></table></figure></p>
<p>相关配置文件位置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/motion/motion.conf</div><div class="line">sudo nano /etc/motioneye/thread-1.conf</div></pre></td></tr></table></figure></p>
<h3 id="通过前端配置邮件提醒"><a href="#通过前端配置邮件提醒" class="headerlink" title="通过前端配置邮件提醒"></a>通过前端配置邮件提醒</h3><p>浏览器打开<br>localhost:8765<br>默认login: admin 密码为空<br>Advanced Settings ON<br>163邮件参数<br>163mail 25 non-TLS</p>
<h2 id="控制夜视开关"><a href="#控制夜视开关" class="headerlink" title="控制夜视开关"></a>控制夜视开关</h2><p>我选用的摄像头为微雪的RPi IR-CUT Camera，没有led，而是将原来控制led的端口作为夜视开关，官方给出的控制方案为<a href="http://www.waveshare.com/wiki/RPi_IR-CUT_Camera" target="_blank" rel="external">额外接一根线到摄像头模块</a><br><img src="http://www.waveshare.com/w/thumb.php?f=Rpi-ir-cut-camera-faq-4.jpg&amp;width=400" alt=""><br>但这种方案不仅占用了一个外置GPIO端口，还降低了可靠性，特别是摄像头距主控较远的情况。其实<a href="https://www.raspberrypi.org/forums/viewtopic.php?p=891836&amp;sid=66eeecc88aa73bcad4f1f4109bfe54d2#p891836" target="_blank" rel="external">6by9已经指出</a>可以通过GPIO 32 (A+之后，3之前的板子) 或GPIO 5 (树莓派1)来控制camera led。</p>
<h3 id="RPi2设置"><a href="#RPi2设置" class="headerlink" title="RPi2设置"></a>RPi2设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /boot/config.txt</div></pre></td></tr></table></figure>
<p>添加以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">disable_camera_led=1</div></pre></td></tr></table></figure></p>
<p>编译cnv<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/mjysci/rpi-cam-night-vision-control</div><div class="line"><span class="built_in">cd</span> rpi-cam-night-vision-control</div><div class="line">gcc -Wall -o cnv cnv.c -lwiringPi</div></pre></td></tr></table></figure></p>
<p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnv</div></pre></td></tr></table></figure></p>
<h3 id="RPi3设置"><a href="#RPi3设置" class="headerlink" title="RPi3设置"></a>RPi3设置</h3><p>最新的rpi3内置GPIO有变动，disable_camera_led失效，由于是扩展GPIO，并不能直接控制。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/6by9/rpi3-gpiovirtbuf.git</div><div class="line"><span class="built_in">cd</span> rpi3-gpiovirtbuf</div><div class="line">make</div><div class="line">cp rpi3-gpiovirtbuf ~/bin/rpi3-gpiovirtbuf</div></pre></td></tr></table></figure></p>
<p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpi3-gpiovirtbuf s 134 1 #夜视模式关闭</div><div class="line">rpi3-gpiovirtbuf s 134 0 #夜视模式开启</div></pre></td></tr></table></figure></p>
<p>清空记录可以直接在前端操作，亦可通过rm实现<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm /var/lib/motioneye/Camera1/*.*</div></pre></td></tr></table></figure></p>
<h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>之前在rpi2按以上步骤没问题，但重新部署到rpi3时碰到refused to connect错误<br>查看服务状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl status motioneye.service <span class="_">-l</span></div></pre></td></tr></table></figure></p>
<p>不知何故安装时并未创建数据文件夹，手动建之<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /var/lib/motioneye</div></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/ccrisan/motioneye/wiki/Install-On-Raspbian" target="_blank" rel="external">motionEye wiki</a><br><a href="https://www.raspberrypi.org/forums/viewtopic.php?p=891836&amp;sid=66eeecc88aa73bcad4f1f4109bfe54d2#p891836" target="_blank" rel="external">Turning off camera LED</a><br><a href="https://www.raspberrypi.org/forums/viewtopic.php?f=43&amp;t=109137&amp;start=100#p989832" target="_blank" rel="external">Raw sensor access / CSI-2 receiver peripheral</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;出门在外，难免担心有贼入窃。恰好手头上有闲置的树莓派一件，加上摄像头配合motion可以搭一套带运动检测的监控系统，设置好后若检测到异常可以自动将短片，图像发送到指定邮箱。手机收到邮件提醒可以远程连上摄像头查看情况。即便监控被破坏，由于图像和短片已发送至邮件服务器，仍可用于取证。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="rpi" scheme="https://majunyi.top/tags/rpi/"/>
    
      <category term="motion" scheme="https://majunyi.top/tags/motion/"/>
    
  </entry>
  
  <entry>
    <title>通过proxifier配合代理安装GitHub Desktop</title>
    <link href="https://majunyi.top/2017/04/05/github-desktop/"/>
    <id>https://majunyi.top/2017/04/05/github-desktop/</id>
    <published>2017-04-05T02:41:32.000Z</published>
    <updated>2017-04-05T03:29:53.798Z</updated>
    
    <content type="html"><![CDATA[<p>手贱试了下<a href="https://desktop.github.com/" target="_blank" rel="external">GitHub Desktop</a>，结果GUI逻辑古怪，且功能不完善。Sublime Text + git bash的组合完爆之，遂卸载。不过解决蛋疼的在线安装模式的过程倒是值得记录下来。</p>
<p>GitHub Desktop用的是ClickOnce安装，程序又是放在amazon s3，由于众所周知的原因访问极不稳定，而ClickOnce并不能断点续传，所以在国内环境下总是安装失败。</p>
<p>因为机器还有别的程序在运行，不能使用全局代理，所以关键在于确定是哪个程序负责安装包的联网下载。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><a id="more"></a>
<ol>
<li>socks代理（比如SS）</li>
<li><a href="https://www.proxifier.com/" target="_blank" rel="external">proxifier</a></li>
</ol>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>代理设置略。</p>
<p>proxifer的操作很直观，不清楚可以参考官方文档，<a href="https://www.proxifier.com/documentation/v3/proxy.htm" target="_blank" rel="external">设置代理</a>，<a href="https://www.proxifier.com/documentation/v3/rules.htm" target="_blank" rel="external">添加规则</a></p>
<p>直接将安装包加入规则是行不通的，通过任务管理器的网络栏进行排序可获知安装包调用的是dfsvc.exe（ClickOnce），位于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%windir%\Microsoft.NET\Framework64\v4.0.30319\dfsvc.exe</div></pre></td></tr></table></figure></p>
<p>点击左上角Proxification Rules -&gt; Add<br>Name随意，如ClickOnce<br>点Browse选择dfsvc<br>Action选Proxy通道</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手贱试了下&lt;a href=&quot;https://desktop.github.com/&quot;&gt;GitHub Desktop&lt;/a&gt;，结果GUI逻辑古怪，且功能不完善。Sublime Text + git bash的组合完爆之，遂卸载。不过解决蛋疼的在线安装模式的过程倒是值得记录下来。&lt;/p&gt;
&lt;p&gt;GitHub Desktop用的是ClickOnce安装，程序又是放在amazon s3，由于众所周知的原因访问极不稳定，而ClickOnce并不能断点续传，所以在国内环境下总是安装失败。&lt;/p&gt;
&lt;p&gt;因为机器还有别的程序在运行，不能使用全局代理，所以关键在于确定是哪个程序负责安装包的联网下载。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="github" scheme="https://majunyi.top/tags/github/"/>
    
      <category term="proxy" scheme="https://majunyi.top/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>通过CSS高亮显示已访问链接</title>
    <link href="https://majunyi.top/2017/04/03/highlight-visited/"/>
    <id>https://majunyi.top/2017/04/03/highlight-visited/</id>
    <published>2017-04-02T23:18:07.000Z</published>
    <updated>2017-04-03T01:31:17.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>不少网站为了增加点击率通过CSS让已访问链接颜色不变，个别无节操门户网站甚至时不时改个标题让你以为是新文章，点进去发现已经看过。</p>
<a id="more"></a>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>最初的解决方案是安装<a href="https://chrome.google.com/webstore/detail/stylish-custom-themes-for/fjnbnpbmkenffdnngjfgmeleoegfcffe" target="_blank" rel="external">Stylish</a>，然后安装全局主题<a href="https://userstyles.org/styles/31267/global-dark-style-changes-everything-to-dark" target="_blank" rel="external">Global dark style</a>。</p>
<p>但用久了感觉这个主题适合夜晚使用，特别是阅读长文。其他情况下缺乏美感。</p>
<p>我主要是需要已访问链接高亮显示，于是选择了<a href="https://userstyles.org/styles/17357/red-visited-mark-visited-links-red-dm" target="_blank" rel="external">Red:visited</a>。不过默认的红色实在有点刺眼，我要其比未访问链接低调一些，记忆当中HTML标准的默认浅紫色就不错，完整的推荐设置<a href="https://www.w3.org/TR/html5/rendering.html#the-css-user-agent-style-sheet-and-presentational-hints" target="_blank" rel="external">在这里</a>。把主题里的#CC0000改成#551A8B即可。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>但新的问题产生了：对于背景颜色较深的网站，紫色很难看清，所以还要改下链接的背景色。最终结果如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>, <span class="selector-class">.fl</span><span class="selector-pseudo">:visited</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#551A8B</span> <span class="meta">!important</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span> <span class="meta">!important</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>如果背景是图片就无能为力了，去掉!important的话漏网之鱼又太多。想要解决的话应该是读取原有字体颜色，然后用lighten（依赖SASS）或者自己设计一个简单的数学变换来使其变浅。第一步需要javascript来实现。</p>
<p>去<a href="https://greasyfork.org" target="_blank" rel="external">GreasyFork</a>找了下没有实现类似功能的脚本，准备自己写一个却发现由于安全问题getComputedStyle并<a href="https://hacks.mozilla.org/2010/03/privacy-related-changes-coming-to-css-vistited/" target="_blank" rel="external">不能返回已访问链接颜色的正确结果</a>。这样就不能直接在循环内判断是否visited并根据原来颜色变浅了。js读取颜色后要另外再用CSS来判断并改色。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;不少网站为了增加点击率通过CSS让已访问链接颜色不变，个别无节操门户网站甚至时不时改个标题让你以为是新文章，点进去发现已经看过。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="css" scheme="https://majunyi.top/tags/css/"/>
    
      <category term="javascript" scheme="https://majunyi.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World! 静态博客Hexo部署于GitHub</title>
    <link href="https://majunyi.top/2017/04/02/hello-world/"/>
    <id>https://majunyi.top/2017/04/02/hello-world/</id>
    <published>2017-04-02T04:48:03.000Z</published>
    <updated>2019-01-05T16:26:09.436Z</updated>
    
    <content type="html"><![CDATA[<p>某网站注册不能用免费邮箱，一时冲动买了个域名来弄企业邮箱，另外也配合ngrok做内网穿透。只是这样的话有点浪费，于是顺便搭个静态博客来玩。</p>
<p>就需求来说，个人笔记以前用evernote就足够了，协作，共享都能实现，手机端操作十分方便。但私人笔记记录比较随意，注释都没几条，时间久了按步骤复现没问题，但背后原理难免有点模糊。发到博客上则能强制自己写仔细认真些。</p>
<h2 id="静态博客平台比较"><a href="#静态博客平台比较" class="headerlink" title="静态博客平台比较"></a>静态博客平台比较</h2><a id="more"></a>
<p>首先要按需求和前置技能选一个合适的平台，以下结论是google得来，除了Hexo另外两个并未亲自尝试，所以并不靠谱。以后有空会都试试再详细对比。</p>
<h3 id="Jekyll-JB-octopress"><a href="#Jekyll-JB-octopress" class="headerlink" title="Jekyll (JB, octopress)"></a>Jekyll (JB, octopress)</h3><p>++ Github原生支持<br>++ 插件众多<br>– 页面生成效率低<br>– ruby搭建环境对win不友好</p>
<h3 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h3><p>++ GO编写，性能强大，页面生成效率极高<br>++ 依赖少，单个可执行文件搭建环境简单<br>– 扩展性差</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>++ Node.js，搭建环境相对简单<br>++ 扩展性强<br>++ 页面生成效率不及Hugo，但远超Jekyll<br>– 社区偏小</p>
<p>由上可见性能和扩展性折中的Hexo更合适我个人使用。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a><a href="https://git-scm.com/download/" target="_blank" rel="external">Git</a></h3><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></h3><p>通过<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>安装nodejs。<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="external">win版nvm</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</div></pre></td></tr></table></figure></p>
<p>重启终端，然后安装node.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install stable</div></pre></td></tr></table></figure></p>
<p>若访问npmjs.org过慢，可换<a href="https://npm.taobao.org" target="_blank" rel="external">淘宝的源</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<h3 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a><a href="https://github.com/" target="_blank" rel="external">注册GitHub账号</a></h3><h3 id="配置SSH-keys"><a href="#配置SSH-keys" class="headerlink" title="配置SSH keys"></a>配置SSH keys</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.ssh</div></pre></td></tr></table></figure>
<p>若提示No such file or directory则需生成新Key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p>passphrase为每次提交项目输入的口令，若不想每次都输入的话可以<a href="https://help.github.com/articles/working-with-ssh-key-passphrases/" target="_blank" rel="external">通过ssh-agent来保存</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span></div><div class="line">touch .profile</div><div class="line">vim .profile	<span class="comment">#添加启动代码</span></div></pre></td></tr></table></figure></p>
<p>复制~\.ssh\id_rsa.pub的内容到<a href="https://github.com/settings/keys" target="_blank" rel="external">Github Settings</a><br>注：<a href="https://en.wikipedia.org/wiki/Environment_variable#Windows" target="_blank" rel="external">Windows环境变量</a><br>测试ssh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>设置用户信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"你的姓名"</span>	<span class="comment">#不是用户名</span></div><div class="line">$ git config --global user.email <span class="string">"你的邮箱"</span></div></pre></td></tr></table></figure></p>
<h2 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h2><p>安装hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<p>建立新文件夹，在bash中指向这个文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div><div class="line">$ npm install</div><div class="line">$ hexo generate		<span class="comment">#生成静态页面至public目录</span></div><div class="line">$ hexo server		<span class="comment">#http://localhost:4000 查看效果</span></div></pre></td></tr></table></figure></p>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>这里选用的是<a href="https://github.com/luuman/hexo-theme-spfk" target="_blank" rel="external">luuman的SPFK</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/luuman/hexo-theme-spfk.git themes/spfk</div></pre></td></tr></table></figure></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改以下文件</p>
<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="/_config.yml"></a>/_config.yml</h4><p>Site部分<br>url<br>theme: spfk<br>Deployment部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:username/username.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h4 id="themes-spfk-config-yml"><a href="#themes-spfk-config-yml" class="headerlink" title="/themes/spfk/_config.yml"></a>/themes/spfk/_config.yml</h4><p>启用youyan，注释掉另外两个<br>friends部分，添加友链<br>站长验证<br>流量统计</p>
<h4 id="themes-spfk-source-img"><a href="#themes-spfk-source-img" class="headerlink" title="/themes/spfk/source/img"></a>/themes/spfk/source/img</h4><p>替换favicon.png, head.jpg, alipayimg.jpg, wechatimg.jpg, apple-touch-icon.png</p>
<h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<h3 id="定制域名（可选）"><a href="#定制域名（可选）" class="headerlink" title="定制域名（可选）"></a>定制域名（可选）</h3><p>在public目录添加CNAME，内容为域名地址。<br>到DNS服务商处更改解析：添加A记录指向<a href="https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider" target="_blank" rel="external">185.199.108.153</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://hexo.io/docs/index.html" target="_blank" rel="external">Hexo Docs</a><br><a href="http://luuman.github.io/2015/12/27/Hexo/GitHubHexo/" target="_blank" rel="external">使用GitHub搭建Hexo博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;某网站注册不能用免费邮箱，一时冲动买了个域名来弄企业邮箱，另外也配合ngrok做内网穿透。只是这样的话有点浪费，于是顺便搭个静态博客来玩。&lt;/p&gt;
&lt;p&gt;就需求来说，个人笔记以前用evernote就足够了，协作，共享都能实现，手机端操作十分方便。但私人笔记记录比较随意，注释都没几条，时间久了按步骤复现没问题，但背后原理难免有点模糊。发到博客上则能强制自己写仔细认真些。&lt;/p&gt;
&lt;h2 id=&quot;静态博客平台比较&quot;&gt;&lt;a href=&quot;#静态博客平台比较&quot; class=&quot;headerlink&quot; title=&quot;静态博客平台比较&quot;&gt;&lt;/a&gt;静态博客平台比较&lt;/h2&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="github" scheme="https://majunyi.top/tags/github/"/>
    
      <category term="hexo" scheme="https://majunyi.top/tags/hexo/"/>
    
  </entry>
  
</feed>
