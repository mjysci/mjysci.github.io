<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>名实合为</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://majunyi.top/"/>
  <updated>2020-04-09T04:25:15.571Z</updated>
  <id>https://majunyi.top/</id>
  
  <author>
    <name>mjy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu下nginx作为前端配合apache作为后端</title>
    <link href="https://majunyi.top/2020/04/09/ubuntu-nginx-frontend-apache-backend/"/>
    <id>https://majunyi.top/2020/04/09/ubuntu-nginx-frontend-apache-backend/</id>
    <published>2020-04-09T03:10:56.000Z</published>
    <updated>2020-04-09T04:25:15.571Z</updated>
    
    <content type="html"><![CDATA[<p>nginx与apache的强强结合，前者处理高并发和静态页面并反向代理包括apache之类的服务，后者对动态页面的兼容性更好。另外有的应用官方只支持nginx，所以需要一个让两者共存的方案。本身设置并不难，就是由于nextcloud官方并没有二者结合的配置所以踩了些坑。<br><a id="more"></a><br>注意中转影响效率，并不适合单机，适合多对多服务器。但由于第二点的需求故仍然采用了这个方案。</p>
<h1 id="安装配置apache"><a href="#安装配置apache" class="headerlink" title="安装配置apache"></a>安装配置apache</h1><p>安装依赖。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apache2 libapache2-mod-php7.2</div><div class="line">sudo apt-get install php7.2-gd php7.2-json php7.2-curl php7.2-mbstring php7.2-intl php-imagick php7.2-xml php7.2-zip libapache2-mod-scgi</div></pre></td></tr></table></figure></p>
<p>启用<code>.htaccess</code>。修改<code>/etc/apache2/apache2.conf</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Directory /var/www/&gt;</div><div class="line">  AllowOverride All</div></pre></td></tr></table></figure></p>
<p>修改<code>/etc/apache2/ports.conf</code>。将默认的<code>80</code>和<code>443</code>端口改成其他以免和nginx冲突。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Listen 7080</div><div class="line"># 此项可选，若没有就不添加</div><div class="line">&lt;IfModule ssl_module&gt;</div><div class="line">        Listen 7443</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>
<p>新建http站点配置文件<code>/etc/apache2/sites-available/example.com.conf</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># 限制vhost仅</div><div class="line">&lt;VirtualHost 127.0.0.1:7080&gt;</div><div class="line">    Alias / &quot;/var/www/example.com/&quot;</div><div class="line"></div><div class="line">    &lt;Directory /var/www/example.com/&gt;</div><div class="line">        Options +FollowSymlinks</div><div class="line">        AllowOverride All</div><div class="line"></div><div class="line">        &lt;IfModule mod_dav.c&gt;</div><div class="line">            Dav off</div><div class="line">        &lt;/IfModule&gt;</div><div class="line"></div><div class="line">        SetEnv HOME /var/www/example.com</div><div class="line">        SetEnv HTTP_HOME /var/www/example.com</div><div class="line"></div><div class="line">        #此项可选，为nextcloud专用301跳转，没装不用加。</div><div class="line">        Redirect 301 /.well-known/carddav https://example.com/nextcloud/remote.php/dav</div><div class="line">        Redirect 301 /.well-known/caldav  https://example.com/nextcloud/remote.php/dav</div><div class="line">        Redirect 301 /.well-known/webdav  https://example.com/nextcloud/remote.php/dav</div><div class="line">    &lt;/Directory&gt;</div><div class="line"></div><div class="line">    ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</div><div class="line">    CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</div><div class="line"></div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>
<p>开启apache相关模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo a2enmod rewrite headers env dir mime</div></pre></td></tr></table></figure></p>
<p>禁用默认站点，启用本站配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo a2ensite example.com.conf</div><div class="line">sudo a2dissite 000-default.conf</div></pre></td></tr></table></figure></p>
<h2 id="修改php上传文件大小上限"><a href="#修改php上传文件大小上限" class="headerlink" title="修改php上传文件大小上限"></a>修改php上传文件大小上限</h2><p>以apache为例，修改<code>/etc/php/7.2/apache2/php.ini</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">upload_max_filesize = 64M</div><div class="line">max_file_uploads = 200</div><div class="line">post_max_size = 128M</div></pre></td></tr></table></figure></p>
<p>重启apache服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl reload apache2</div></pre></td></tr></table></figure></p>
<h1 id="安装配置nginx"><a href="#安装配置nginx" class="headerlink" title="安装配置nginx"></a>安装配置nginx</h1><p>安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install nginx</div></pre></td></tr></table></figure></p>
<p>编辑<code>/etc/nginx/nginx.conf</code>。这里只将用户和用户组改为和apache一致的<code>www-data</code>。其他设置可以参考<a href="https://www.nginx.com/resources/wiki/start/topics/examples/full/" target="_blank" rel="external">这里</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user www-data www-data;</div></pre></td></tr></table></figure></p>
<p>新建ssl站点配置文件<code>/etc/nginx/sites-available/example.com</code>。这个配置中<code>80</code>端口通过301跳转强制https访问，<code>8443</code>端口为https监听端口，若公网的<code>443</code>端口没封则可用<code>443</code>。然后将请求通过<code>proxy_pass</code>转给apache的<code>7080</code>。<br>关于ssl证书的签发见<a href="https://majunyi.top/2020/04/03/ubuntu-letsencrypt/">部署Let’s Encrypt</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    listen [::]:80;</div><div class="line">    return 301 https://$host$request_uri;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 8443 http2;</div><div class="line">    listen [::]:8443 http2;</div><div class="line">    server_name home.majunyi.top;</div><div class="line"></div><div class="line">    client_max_body_size 0;</div><div class="line">    underscores_in_headers on;</div><div class="line"></div><div class="line">    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubdomains&quot;;</div><div class="line"></div><div class="line">    ssl on;</div><div class="line">    ssl_certificate /etc/apache2/ssl/fullchain.cer;</div><div class="line">    ssl_certificate_key /etc/apache2/ssl/private/home.majunyi.top.key;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_set_header Host $host:$server_port;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_set_header  X-Forwarded-Proto   $scheme;</div><div class="line">        add_header Front-End-Https on;</div><div class="line">        add_header Strict-Transport-Security &quot;max-age=31536000; includeSubdomains&quot;;</div><div class="line"></div><div class="line">        proxy_headers_hash_max_size 512;</div><div class="line">        proxy_headers_hash_bucket_size 64;</div><div class="line"></div><div class="line">        proxy_buffering off;</div><div class="line">        proxy_redirect off;</div><div class="line">        proxy_max_temp_file_size 0;</div><div class="line">        proxy_pass http://127.0.0.1:7080;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启用站点。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ln <span class="_">-s</span> /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/</div><div class="line">sudo systemctl reload nginx</div></pre></td></tr></table></figure></p>
<h1 id="nextcloud相关设置"><a href="#nextcloud相关设置" class="headerlink" title="nextcloud相关设置"></a>nextcloud相关设置</h1><p>编辑<code>config.php</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&apos;overwritehost&apos; =&gt; &apos;example.com:8443&apos;,</div><div class="line">&apos;overwriteprotocol&apos; =&gt; &apos;https&apos;,</div><div class="line">&apos;overwrite.cli.url&apos; =&gt; &apos;https://example.com:8443/nextcloud/&apos;,</div><div class="line">&apos;trusted_proxies&apos; =&gt; [&apos;127.0.0.1&apos;],</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx与apache的强强结合，前者处理高并发和静态页面并反向代理包括apache之类的服务，后者对动态页面的兼容性更好。另外有的应用官方只支持nginx，所以需要一个让两者共存的方案。本身设置并不难，就是由于nextcloud官方并没有二者结合的配置所以踩了些坑。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
      <category term="web" scheme="https://majunyi.top/tags/web/"/>
    
      <category term="nextcloud" scheme="https://majunyi.top/tags/nextcloud/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下手动部署Let&#39;s Encrypt</title>
    <link href="https://majunyi.top/2020/04/03/ubuntu-letsencrypt/"/>
    <id>https://majunyi.top/2020/04/03/ubuntu-letsencrypt/</id>
    <published>2020-04-03T02:11:49.000Z</published>
    <updated>2020-04-03T03:10:52.927Z</updated>
    
    <content type="html"><![CDATA[<p>证书常用位置及权限设置，以及用脚本更新阿里云域名（ddns）。<br><a id="more"></a></p>
<h1 id="letsencrpyt"><a href="#letsencrpyt" class="headerlink" title="letsencrpyt"></a>letsencrpyt</h1><h2 id="创建相关文件夹并设置权限"><a href="#创建相关文件夹并设置权限" class="headerlink" title="创建相关文件夹并设置权限"></a>创建相关文件夹并设置权限</h2><p>不建议直接放到<code>/etc/ssl</code>文件夹，因为letsencrypt三个月就要改一次，而此处是设计放置长期证书的。这里以apache为例，若是nginx则可在<code>/etc/nginx</code>下新建。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /etc/apache2/ssl</div><div class="line">sudo mkdir /etc/apache2/ssl/private</div><div class="line">sudo chmod 755 /etc/apache2/ssl</div><div class="line">sudo chmod 710 /etc/apache2/ssl/private</div><div class="line">sudo chown -R root:root /etc/apache2/ssl/</div><div class="line">sudo chown -R root:ssl-cert /etc/apache2/ssl/private/</div></pre></td></tr></table></figure></p>
<h2 id="用acme-sh自动签发ssl证书"><a href="#用acme-sh自动签发ssl证书" class="headerlink" title="用acme.sh自动签发ssl证书"></a>用acme.sh自动签发ssl证书</h2><p>下载脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo su</div><div class="line">curl https://get.acme.sh | sh</div></pre></td></tr></table></figure></p>
<p>设置阿里云域名相关API。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> Ali_Key=<span class="string">"AccessKeyId"</span></div><div class="line"><span class="built_in">export</span> Ali_Secret=<span class="string">"AccessKeySecret"</span></div></pre></td></tr></table></figure></p>
<p>以DNS API模式通过验证。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">acme.sh --issue --dns dns_ali <span class="_">-d</span> example.com</div></pre></td></tr></table></figure></p>
<p>安装证书。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">acme.sh --installcert <span class="_">-d</span> example.com</div><div class="line">--key-file /etc/apache2/ssl/private/example.com.key</div><div class="line">--fullchain-file /etc/apache2/ssl/fullchain.cer</div><div class="line">--reloadcmd <span class="string">"service apache2 force-reload"</span></div></pre></td></tr></table></figure></p>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">acme.sh --uninstall</div></pre></td></tr></table></figure>
<h1 id="动态域名ddns"><a href="#动态域名ddns" class="headerlink" title="动态域名ddns"></a>动态域名ddns</h1><p>如果公网IP定期改变，则需定时去域名管理处更新IP。<br>切换为root并下载脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo su</div><div class="line"><span class="built_in">cd</span> ~</div><div class="line">wget https://raw.githubusercontent.com/h46incon/AliDDNSBash/master/ali_ddns.sh</div></pre></td></tr></table></figure></p>
<p>按<a href="https://github.com/h46incon/AliDDNSBash#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" target="_blank" rel="external">官方教程</a>编辑<code>ali_ddns.sh</code>。<br>启用并设置定时任务<code>cron</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/cron enable</div><div class="line">crontab -e</div></pre></td></tr></table></figure></p>
<p>在编辑器中添加一行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*/5 * * * * /bin/bash /root/ali_ddns.sh</div></pre></td></tr></table></figure></p>
<p>其中<code>*</code>依次为每分，每小时，每天，每月，每星期几。此处设置为每5分钟检查一次IP，有改变则上报域名管理更新记录。  </p>
<h1 id="caddy"><a href="#caddy" class="headerlink" title="caddy"></a><a href="https://caddyserver.com/" target="_blank" rel="external">caddy</a></h1><p>用caddy则比较轻松，会根据CaddyFile中的设置为每个域名自动签发和更新证书，这里仅记录下签发证书的位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/root/.caddy/acme/acme-v02.api.letsencrypt.org/sites/example.com/example.com.crt</div><div class="line">/root/.caddy/acme/acme-v02.api.letsencrypt.org/sites/example.com/example.com.key</div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/Neilpang/acme.sh/wiki/说明" target="_blank" rel="external">https://github.com/Neilpang/acme.sh/wiki/说明</a><br><a href="https://github.com/Neilpang/acme.sh/wiki/Options-and-Params" target="_blank" rel="external">https://github.com/Neilpang/acme.sh/wiki/Options-and-Params</a><br><a href="https://github.com/h46incon/AliDDNSBash#使用方法" target="_blank" rel="external">https://github.com/h46incon/AliDDNSBash#使用方法</a><br><a href="http://man7.org/linux/man-pages/man5/crontab.5.html" target="_blank" rel="external">http://man7.org/linux/man-pages/man5/crontab.5.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;证书常用位置及权限设置，以及用脚本更新阿里云域名（ddns）。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
      <category term="ssl" scheme="https://majunyi.top/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>慎用诸如tk之类的免费域名</title>
    <link href="https://majunyi.top/2020/03/29/no-tk/"/>
    <id>https://majunyi.top/2020/03/29/no-tk/</id>
    <published>2020-03-29T14:19:32.000Z</published>
    <updated>2020-03-29T15:35:53.710Z</updated>
    
    <content type="html"><![CDATA[<p>免费的是最贵的，结果是要么浪费时间要么浪费金钱。真有非主站的短期需求不如去廉价域名供应商如<a href="https://majunyi.top/go/namesilo">namesilo</a>之类的，最低$0.99省时省心。<br><a id="more"></a><br>免费域名tk的坑主要有三个，前两个我已经有准备了，故只是用来放一个自用的在线工具集的站点。没想到第三点让人无法忍受，所以费了点时间全迁走了。  </p>
<h1 id="SEO负优化"><a href="#SEO负优化" class="headerlink" title="SEO负优化"></a>SEO负优化</h1><p>这是老生常谈了，由于其免费，所以很多钓鱼网站也用这个域名，造成浏览器用户都对tk域名的网站第一印象很差，进而搜索引擎对这类网站的搜索结果排位不高。因此我的博客并没有使用，而是用来给一个服务器提供一个域名进而可开启SSL来安全地中转数据。  </p>
<h1 id="90天内至少25个独立访问者"><a href="#90天内至少25个独立访问者" class="headerlink" title="90天内至少25个独立访问者"></a>90天内至少25个独立访问者</h1><p>免费档似乎有限制90天内至少25个独立访问者，否则该域名会被回收。这个很容易达到，因为国内的环境基本每天IP都会变，只要正常使用就行。而且我还放了一些在线工具集，居然被google爬到了，根据站点统计远超了这个限制，但站养肥了点就触发了第三个坑。其实事后我搜了下这点限制<a href="http://dot-tk.wikidot.com/25-unique-visitor-requirement-explained" target="_blank" rel="external">似乎被取消了</a>。  </p>
<h1 id="域名会被强制收回，再用要付费"><a href="#域名会被强制收回，再用要付费" class="headerlink" title="域名会被强制收回，再用要付费"></a>域名会被强制收回，再用要付费</h1><p>站点小有名气后突然无法访问，去控制台发现域名被删，然后重新注册吧，结果我当时随意弄的名称被定为了<code>Special</code>组（<a href="https://www.freenom.com/en/freeandpaiddomains.html" target="_blank" rel="external">免费、付费、特别组的区别</a>），想继续用的话必须每年付$9.9。我看<code>ml</code>那里还可用于是就注册了这个，当然费了点时间把服务器端的相应域名改了，还好用的是caddy，所以证书也一并自动改签，还有几个客户端的设置没花多少时间。过了几天出于好奇，我去主页又搜了下那个名称，发现了他们的骚操作，其在<code>tk</code>下的域名又不是<code>Special</code>了，似乎是看我没上钩所以恢复免费。google了下还有不少类似案例，比如<a href="https://www.techelex.org/why-not-use-dot-tk-domain/" target="_blank" rel="external">这个哥们</a>，把<code>tk</code>用在了主站上，损失惨重。<br>鉴于其吃相太难看，我去<a href="https://majunyi.top/go/namesilo">namesilo</a>那弄了个域名迁过去，把freenom剩下没波及的免费域名直接删掉图个清净。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;免费的是最贵的，结果是要么浪费时间要么浪费金钱。真有非主站的短期需求不如去廉价域名供应商如&lt;a href=&quot;https://majunyi.top/go/namesilo&quot;&gt;namesilo&lt;/a&gt;之类的，最低$0.99省时省心。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu下搭建rss全文输出服务full-text-rss</title>
    <link href="https://majunyi.top/2020/03/23/ubuntu-full-text-rss/"/>
    <id>https://majunyi.top/2020/03/23/ubuntu-full-text-rss/</id>
    <published>2020-03-23T02:52:55.000Z</published>
    <updated>2020-03-23T04:06:48.809Z</updated>
    
    <content type="html"><![CDATA[<p>只有摘要的rss内容和咸鱼有什么区别？这里推荐一个比mercury-parser-api更好用的rss全文输出服务。<br><a id="more"></a><br>本文提供了搭建rss全文输出服务<a href="https://bitbucket.org/fivefilters/full-text-rss/src/master/" target="_blank" rel="external">full-text-rss</a>的步骤，对国内环境如何科学地抓取全文亦有所涉及，此服务配合<a href="https://majunyi.top/2020/03/22/ubuntu-ttrss/">自建rss阅读器tt-rss</a>使用效果更好。  </p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><h2 id="为什么不用mercury-parser-api"><a href="#为什么不用mercury-parser-api" class="headerlink" title="为什么不用mercury-parser-api"></a>为什么不用<a href="https://github.com/postlight/mercury-parser-api" target="_blank" rel="external">mercury-parser-api</a></h2><ol>
<li>没有权限设置选项<br>这意味者要么限制其和阅读器服务处于同一个服务器中（localhost），要么通过反代开放到公网并通过防火墙限制访问IP，否则就是向全网公开的服务，任何人都能使用。  </li>
<li>不支持代理<br>国内网络环境你懂的，这样就限制其只能部署在国外服务器才能发挥全部作用。  </li>
</ol>
<h2 id="fivefilters在线服务的不足之处"><a href="#fivefilters在线服务的不足之处" class="headerlink" title="fivefilters在线服务的不足之处"></a><a href="https://fivefilters.org/content-only/" target="_blank" rel="external">fivefilters在线服务</a>的不足之处</h2><ol>
<li>制作的feed链接为http<br>墙连全文都不用看，只检查url中的关键字就能拦截了。自行搭建可以设为全部走https，这样中间人只能知道你访问的域名，全文和域名以外的url是加密的。</li>
<li>免费服务有限制<br>主要是一次抓取的文章限制为3篇，且文末有一行文字链接的广告。  </li>
</ol>
<p>其实轻度使用足够了。本文推荐的<a href="https://bitbucket.org/fivefilters/full-text-rss/src/master/" target="_blank" rel="external">full-text-rss</a>比fivefilters的线上版本慢一版，不过自己搭建能使用全功能无限制。  </p>
<h1 id="安装配置apache"><a href="#安装配置apache" class="headerlink" title="安装配置apache"></a><a href="https://majunyi.top/2020/01/24/rtorrent-compile/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEapache">安装配置apache</a></h1><h1 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt install php-tidy</div><div class="line">sudo service apache2 reload</div></pre></td></tr></table></figure>
<h1 id="安装full-text-rss"><a href="#安装full-text-rss" class="headerlink" title="安装full-text-rss"></a>安装full-text-rss</h1><p>克隆源码。国内搭建建议为默认的文件夹<code>full-text-rss</code>改名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/www/example.com</div><div class="line">sudo -u www-data git <span class="built_in">clone</span> https://bitbucket.org/fivefilters/full-text-rss.git</div></pre></td></tr></table></figure></p>
<p>配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> full-text-rss</div><div class="line">sudo -u www-data cp config.php custom_config.php</div><div class="line">sudo -u www-data vi config.php</div></pre></td></tr></table></figure></p>
<p>修改以下选项。其中<code>api_keys</code>改成自用密码，设成需密码才能使用此服务，<code>proxy_servers</code>为http代理设置，此处示例为<code>privoxy</code>的默认设置。如此设置后ftr将全局走代理，所以设置<code>allow_proxy_override</code>为<code>true</code>，如果不需代理则在生成的全文feed地址后加上<code>&amp;proxy=0</code>。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$options-&gt;key_required = <span class="keyword">true</span>;</div><div class="line">$options-&gt;api_keys[<span class="number">1</span>] = <span class="string">'your-secret-token'</span>;</div><div class="line">$options-&gt;proxy_servers = <span class="keyword">array</span>(<span class="string">'privoxy'</span>=&gt;<span class="keyword">array</span>(<span class="string">'host'</span>=&gt;<span class="string">'127.0.0.1:8118'</span>));</div><div class="line">$options-&gt;allow_proxy_override = <span class="keyword">true</span>;</div></pre></td></tr></table></figure></p>
<p>注：国外服务器搭建则无需代理，<code>proxy_servers</code>不要修改，默认即可。  </p>
<h1 id="更新网站定制抓取规则"><a href="#更新网站定制抓取规则" class="headerlink" title="更新网站定制抓取规则"></a>更新网站定制抓取规则</h1><p>没有规则的ftr和咸鱼一样。克隆官方网站规则集。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/www/example.com/full-text-rss/site_config</div><div class="line">sudo rm -rf standard</div><div class="line">sudo -u www-data git <span class="built_in">clone</span> https://github.com/fivefilters/ftr-site-config.git standard</div></pre></td></tr></table></figure></p>
<h1 id="定制网站抓取规则"><a href="#定制网站抓取规则" class="headerlink" title="定制网站抓取规则"></a>定制网站抓取规则</h1><p>官方网站规则不带的网站可以自行设定抓取规则，好在fivefilters也提供了<a href="http://siteconfig.fivefilters.org/" target="_blank" rel="external">图形化的规则定制工具</a>。<br>输入需定制网站的任意一篇文章，点<code>Go</code>进入新页面，鼠标选定文章的全文范围，然后点击<code>Download Full-Text RSS site config</code>下载定制规则。<br>将规则文件上传到<code>site_config/custom/</code>文件夹下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;只有摘要的rss内容和咸鱼有什么区别？这里推荐一个比mercury-parser-api更好用的rss全文输出服务。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
      <category term="rss" scheme="https://majunyi.top/tags/rss/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下自建rss阅读器ttrss</title>
    <link href="https://majunyi.top/2020/03/22/ubuntu-ttrss/"/>
    <id>https://majunyi.top/2020/03/22/ubuntu-ttrss/</id>
    <published>2020-03-22T03:35:50.000Z</published>
    <updated>2020-03-22T08:19:13.347Z</updated>
    
    <content type="html"><![CDATA[<p>rss已死？对占有话语权的内容创作者当然希望这样，但就内容接收者而言，活用合适的rss工具能筛掉无用信息提升效率。本文提供docker之外手动本地搭建ttrss的方法。<br><a id="more"></a></p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><h2 id="为什么不用docker"><a href="#为什么不用docker" class="headerlink" title="为什么不用docker"></a>为什么不用docker</h2><p>对个人用户而言，docker仅适用于一种场合：权限不足的服务器（包括非root的定制linux操作系统，如NAS的系统）。docker还有一个好处就是部署方便，但：1.需要大规模部署的场景并不多；2.可通过编写脚本来简化部署。docker的缺点：1.性能损失，对本地无所谓，但购买服务器的话内存需要升一档多花钱了；2.调试不方便(docker exec -it …)，更适合稳定版产品的部署，可玩性差些。<br>不过，实在想用docker的话推荐Henry Wang的<a href="https://github.com/HenryQW/Awesome-TTRSS" target="_blank" rel="external">Awesome-TTRSS</a>。<br>注意，由于众所周知的原因，<strong>不建议本地或国内搭建</strong>，下文对如何科学地在国内搭建亦有所涉及。  </p>
<h2 id="为什么不用第三方服务"><a href="#为什么不用第三方服务" class="headerlink" title="为什么不用第三方服务"></a>为什么不用第三方服务</h2><p>国外的第三方服务速度慢，连接不畅或直接被墙，国内的有和谐不考虑。且免费服务限制颇多，如无法设置过滤规则，订阅数刷新率有限制，有广告等等。  </p>
<h1 id="安装配置apache"><a href="#安装配置apache" class="headerlink" title="安装配置apache"></a><a href="https://majunyi.top/2020/01/24/rtorrent-compile/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEapache">安装配置apache</a></h1><h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a><a href="https://majunyi.top/2020/03/15/ubuntu-nextcloud/#%E5%AE%89%E8%A3%85mysql">安装mysql</a></h1><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mysql -u root</div><div class="line">CREATE DATABASE ttrss;</div></pre></td></tr></table></figure>
<h1 id="克隆ttrss源码"><a href="#克隆ttrss源码" class="headerlink" title="克隆ttrss源码"></a>克隆ttrss源码</h1><p>注：若是国内域名建议更改默认文件夹名<code>tt-rss</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/www/example.com</div><div class="line">sudo -u www-data git <span class="built_in">clone</span> https://git.tt-rss.org/fox/tt-rss.git</div></pre></td></tr></table></figure></p>
<p>访问<code>https://example.com/tt-rss/install/</code>执行安装。<br>默认用户名<code>admin</code>，密码<code>password</code>。<br>有个官方不支持但提供的代理选项，编辑<code>/var/www/example.com/tt-rss/config.php</code>并添加一行<code>define (&#39;_CURL_HTTP_PROXY&#39;, &#39;127.0.0.1:8118&#39;);</code>，其中<code>8118</code>端口是通过<code>privoxy</code>设置的http代理，缺点：1.这样所有的更新都全局走代理，影响速度；2.似乎无效。故并未采用。  </p>
<h1 id="创建feed更新服务"><a href="#创建feed更新服务" class="headerlink" title="创建feed更新服务"></a>创建feed更新服务</h1><p>创建并编辑<code>/etc/systemd/system/ttrss_backend.service</code>文件。有一种科学方法即在此处将php通过<code>proxychains</code>之类的走代理，缺点：1.全局走代理，影响速度；2.易出错导致更新失败。故并未采用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=ttrss_backend</div><div class="line">After=network.target mysql.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">User=www-data</div><div class="line">ExecStart=/var/www/example.com/tt-rss/update_daemon2.php</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p>
<p>启用并开始服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo systemctl <span class="built_in">enable</span> ttrss_backend.service</div><div class="line">sudo systemctl start ttrss_backend.service</div></pre></td></tr></table></figure></p>
<h1 id="安装feed代理插件options-per-feed"><a href="#安装feed代理插件options-per-feed" class="headerlink" title="安装feed代理插件options_per_feed"></a>安装feed代理插件options_per_feed</h1><p>其中有代理选项，可对单个feed设置走代理线路。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /var/www/example.com/tt-rss/plugins</div><div class="line">sudo -u www-data git clone https://github.com/sergey-dryabzhinsky/options_per_feed</div></pre></td></tr></table></figure></p>
<p>克隆源码后刷新浏览器，在<code>Preferences-Plugins</code>处激活该插件。<br>此后右键点击feed，<code>编辑feed-Plugins</code>处可启用并设置代理。<br>但由于添加feed时是直连的，对于已经被墙的feed会添加失败，无法进入编辑页面设置代理，这种只能在别处添加并导出，然后tt-rss再导入并设置代理选项才行。  </p>
<h1 id="安装fever插件以支持更多移动客户端"><a href="#安装fever插件以支持更多移动客户端" class="headerlink" title="安装fever插件以支持更多移动客户端"></a>安装fever插件以支持更多移动客户端</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /var/www/example.com/tt-rss/plugins.local</div><div class="line">sudo -u www-data git clone https://github.com/DigitalDJ/tinytinyrss-fever-plugin fever</div></pre></td></tr></table></figure>
<p>需要在<code>Preferences-Fever Emulation</code>处设置fever的密码，用于客户端在<code>https://example.com/tt-rss/plugins.local/fever/</code>处登录用。  </p>
<h1 id="安装feedly主题tt-rss-feedly-theme"><a href="#安装feedly主题tt-rss-feedly-theme" class="headerlink" title="安装feedly主题tt-rss-feedly-theme"></a>安装feedly主题tt-rss-feedly-theme</h1><p>这是看起来比较顺眼，操作也和GR类似的主题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/levito/tt-rss-feedly-theme/archive/master.zip</div><div class="line">unzip master.zip</div><div class="line"><span class="built_in">cd</span> tt-rss-feedly-theme-master</div><div class="line">sudo -u www-data cp -r feedly* /var/www/example.com/tt-rss/themes.local/</div></pre></td></tr></table></figure></p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="取消默认展开文章"><a href="#取消默认展开文章" class="headerlink" title="取消默认展开文章"></a>取消默认展开文章</h2><p><code>Preferences-Articles</code>处取消<code>Always expand articles</code>。  </p>
<h2 id="其他主题"><a href="#其他主题" class="headerlink" title="其他主题"></a><a href="https://git.tt-rss.org/fox/tt-rss/wiki/Themes" target="_blank" rel="external">其他主题</a></h2><h2 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a><a href="https://git.tt-rss.org/fox/tt-rss/wiki/Plugins" target="_blank" rel="external">其他插件</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rss已死？对占有话语权的内容创作者当然希望这样，但就内容接收者而言，活用合适的rss工具能筛掉无用信息提升效率。本文提供docker之外手动本地搭建ttrss的方法。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
      <category term="rss" scheme="https://majunyi.top/tags/rss/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下搭建私人同步云盘nextcloud</title>
    <link href="https://majunyi.top/2020/03/15/ubuntu-nextcloud/"/>
    <id>https://majunyi.top/2020/03/15/ubuntu-nextcloud/</id>
    <published>2020-03-15T03:45:22.000Z</published>
    <updated>2020-04-09T04:25:01.406Z</updated>
    
    <content type="html"><![CDATA[<p>虽然搭建后才发觉和自己的需求有点偏差，不过其支持WebDAV协议还是有点用处。<br><a id="more"></a><br>最初的动机是为了解决QFile移动端自动上传照片的各种不便：  </p>
<ol>
<li>QFile移动版（包括安卓和iOS）不像群晖那样能设置自动连接，每次都要手动选择连接，所以做不到后台自动上传新拍照片。  </li>
<li>即便连上后，触发自动上传的时间不定，有时要亮屏放半天才会上传，且没有手动触发检测上传的选项。    </li>
<li>上传时必须保持亮屏，否则会停止。  </li>
</ol>
<p>但搭建好nextcloud后才发觉其软件定位不是备份文件，而是同步与分享。目前暂<strong>不支持单向同步</strong>，即我需要的手机照片自动上传，但不同步下载服务器的照片。后通过免费的<a href="https://www.tacit.dk/foldersync/" target="_blank" rel="external">FolderSync</a>解决这个问题。<br>不过其支持WebDAV协议，故可用来给如Joplin之类的第三方程序做同步用，故仍旧保留了。<br>本文没用<a href="https://hub.docker.com/_/nextcloud/" target="_blank" rel="external">Docker</a>或<a href="https://docs.nextcloud.com/server/17/admin_manual/installation/source_installation.html#example-installation-on-ubuntu-18-04-lts-server" target="_blank" rel="external">官方脚本</a>的方式安装，因为前者对性能有损失且设置有限、不利于调试，而后者适合新装好的系统只跑nextcloud。</p>
<h1 id="安装配置apache"><a href="#安装配置apache" class="headerlink" title="安装配置apache"></a><a href="https://majunyi.top/2020/01/24/rtorrent-compile/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEapache">安装配置apache</a></h1><h1 id="php设置"><a href="#php设置" class="headerlink" title="php设置"></a>php设置</h1><p>编辑<code>/etc/php/7.2/apache2/php.ini</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">memory_limit = 1024M</div><div class="line">post_max_size = 1024M</div><div class="line">upload_max_filesize = 1024M</div></pre></td></tr></table></figure></p>
<h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt install mariadb-server php7.2-mysql</div><div class="line">sudo mysql_secure_installation</div></pre></td></tr></table></figure>
<p>输入并记好root用户的密码。注意root权限的用户是通过<code>auth_socket</code>而并非密码来验证的，故通过<code>sudo mysql -u root -p</code>登录时不输入密码或任意密码都能成功登录，而不是密码未设置成功。想取消<code>auth_socket</code>可以<a href="https://unix.stackexchange.com/questions/385202/mariadb-accepts-any-password" target="_blank" rel="external">看这里</a>。<br>启用4字节字符支持，编辑<code>/etc/mysql/mariadb.cnf</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line">innodb_file_per_table=1</div><div class="line">character-set-server=utf8mb4</div></pre></td></tr></table></figure></p>
<p>重启mysql。  </p>
<h1 id="mysql创建nextcloud数据库"><a href="#mysql创建nextcloud数据库" class="headerlink" title="mysql创建nextcloud数据库"></a>mysql创建nextcloud数据库</h1><p>以root登录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mysql -u root</div></pre></td></tr></table></figure></p>
<p>创建nextcloud用户和数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE nextclouddb;</div><div class="line">CREATE USER &apos;nextcloud&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;PASSWORD&apos;;</div><div class="line">GRANT ALL PRIVILEGES ON nextclouddb.* TO &apos;nextcloud&apos;@&apos;localhost&apos;;</div><div class="line">FLUSH PRIVILEGES;</div><div class="line">exit</div></pre></td></tr></table></figure></p>
<h1 id="创建数据文件夹"><a href="#创建数据文件夹" class="headerlink" title="创建数据文件夹"></a>创建数据文件夹</h1><p>从数据安全和硬盘空间扩展的角度强烈建议将nextcloud的数据放到别的地方，而不是默认的<code>/var/www/html/nextcloud/data</code>，否则后期想做数据迁移时由于<a href="https://help.nextcloud.com/t/howto-change-move-data-directory-after-installation/17170" target="_blank" rel="external">官方不支持会很麻烦</a>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /srv/hdd1/nextcloud</div><div class="line">sudo chown -R www-data:www-data /srv/hdd1/nextcloud</div></pre></td></tr></table></figure></p>
<h1 id="安装nextcloud"><a href="#安装nextcloud" class="headerlink" title="安装nextcloud"></a>安装nextcloud</h1><p><a href="https://nextcloud.com/install/#instructions-server" target="_blank" rel="external">下载nextcloud源码</a>，解压并复制到网页服务器位置并修改权限为<code>www-data</code>，否则会报错<code>Internal Server Error</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /var/www/example.com</div><div class="line">sudo cp -r nextcloud /var/www/example.com</div><div class="line">sudo chown -R www-data:www-data /var/www/example.com/nextcloud/</div></pre></td></tr></table></figure></p>
<p>打开安装页面<code>https://example.com/nextcloud</code>并输入数据库相关配置执行安装初始化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nextcloud</div><div class="line">nextclouddb</div><div class="line">localhost</div></pre></td></tr></table></figure></p>
<p>如果安装正确则能进入网盘页面。<br>配置可信任域名。打开<code>/var/www/example.com/nextcloud/config/config.php</code>文件，添加域名和内网IP。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">'trusted_domains'</span> =&gt;</div><div class="line">  <span class="keyword">array</span> (</div><div class="line">   <span class="number">0</span> =&gt; <span class="string">'localhost'</span>,</div><div class="line">   <span class="number">1</span> =&gt; <span class="string">'example.com'</span>,</div><div class="line">   <span class="number">2</span> =&gt; <span class="string">'192.168.1.2'</span>,</div><div class="line">),</div></pre></td></tr></table></figure></p>
<h1 id="安装并启用Redis缓存提升性能（可选）"><a href="#安装并启用Redis缓存提升性能（可选）" class="headerlink" title="安装并启用Redis缓存提升性能（可选）"></a>安装并启用Redis缓存提升性能（可选）</h1><p>如果只是几个人轻度使用没必要用牛刀。<br>安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install php-apcu redis-server php-redis</div></pre></td></tr></table></figure></p>
<p>配置Redis。打开<code>/etc/redis/redis.conf</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">port 0</div><div class="line">unixsocket /var/run/redis/redis-server.sock</div><div class="line">unixsocketperm 770</div></pre></td></tr></table></figure></p>
<p>添加Apache用户<code>www-data</code>到<code>redis</code>组。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo usermod <span class="_">-a</span> -G redis www-data</div></pre></td></tr></table></figure></p>
<p>重启apache服务，开始redis服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo service apache2 restart</div><div class="line">sudo service redis-server start</div></pre></td></tr></table></figure></p>
<p>修改nextcloud配置文件<code>/var/www/example.com/nextcloud/config/config.php</code>，添加以下内容。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">'memcache.local'</span> =&gt; <span class="string">'\\OC\\Memcache\\Redis'</span>,</div><div class="line"><span class="string">'memcache.locking'</span> =&gt; <span class="string">'\\OC\\Memcache\\Redis'</span>,</div><div class="line"><span class="string">'filelocking.enabled'</span> =&gt; <span class="string">'true'</span>,</div><div class="line"><span class="string">'redis'</span> =&gt;</div><div class="line"><span class="keyword">array</span> (</div><div class="line"><span class="string">'host'</span> =&gt; <span class="string">'/var/run/redis/redis-server.sock'</span>,</div><div class="line"><span class="string">'port'</span> =&gt; <span class="number">0</span>,</div><div class="line"><span class="string">'timeout'</span> =&gt; <span class="number">0.0</span>,</div><div class="line">),</div></pre></td></tr></table></figure></p>
<p>启用redis服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl <span class="built_in">enable</span> redis-server</div></pre></td></tr></table></figure></p>
<p>测试redis服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo redis-cli <span class="_">-s</span> /var/run/redis/redis-server.sock ping</div></pre></td></tr></table></figure></p>
<p>正常会打印<code>PONG</code>。<br>重启服务器。  </p>
<h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><p>打开nextcloud管理员概览页面(<a href="https://example.com/nextcloud/index.php/settings/admin/overview" target="_blank" rel="external">https://example.com/nextcloud/index.php/settings/admin/overview</a> )，确保<code>安全与设置警告</code>测试全部通过。  </p>
<h2 id="Your-web-server-is-not-properly-set-up-to-resolve-“-well-known-caldav”"><a href="#Your-web-server-is-not-properly-set-up-to-resolve-“-well-known-caldav”" class="headerlink" title="Your web server is not properly set up to resolve “/.well-known/caldav”"></a>Your web server is not properly set up to resolve “/.well-known/caldav”</h2><p>由于之前并未将nextcloud装在网站根目录，故需通过rewrite进行301跳转。<br>启用rewrite模块。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo a2enmod rewrite</div></pre></td></tr></table></figure></p>
<p>编辑网站<strong>根目录</strong><code>/var/www/example.com/.htaccess</code>文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_rewrite.c&gt;</div><div class="line">  RewriteEngine on</div><div class="line">  RewriteRule ^\.well-known/host-meta /nextcloud/public.php?service=host-meta [QSA,L]</div><div class="line">  RewriteRule ^\.well-known/host-meta\.json /nextcloud/public.php?service=host-meta-json [QSA,L]</div><div class="line">  RewriteRule ^\.well-known/webfinger /nextcloud/public.php?service=webfinger [QSA,L]</div><div class="line">  RewriteRule ^\.well-known/carddav /nextcloud/remote.php/dav/ [R=301,L]</div><div class="line">  RewriteRule ^\.well-known/caldav /nextcloud/remote.php/dav/ [R=301,L]</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>
<p>注，如果用<a href="https://majunyi.top/2020/04/03/ubuntu-nginx-frontend-apache-backend/">nginx+apache方式搭建</a>则需把以上<code>RewriteRule</code>全部注释掉，在<code>example.com.conf</code>中设置301跳转。</p>
<h2 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h2><p>先检查redis-server是否正常工作，必要时注释掉<code>config.php</code>中redis的内容来查错。<br>这多出现于域名改变的情况，若<code>overwrite.cli.url</code>等设置改过仍无法解决，可以考虑重装。  </p>
<h2 id="重装nextcloud"><a href="#重装nextcloud" class="headerlink" title="重装nextcloud"></a>重装nextcloud</h2><p>在<code>config</code>文件夹下重命名<code>config.php</code>并新建<code>CAN_INSTALL</code>文件。<br>浏览器打开<code>https://example.com/nextcloud</code>会进入安装向导。输入数据库相关配置。<br>注意这里必须新建一个和旧管理员用户名不一样的新管理员，如果输入旧管理员会报错用户已存在。完成设置后注销登录旧管理员把新建的这个删掉即可。    </p>
<h1 id="移除nextcloud"><a href="#移除nextcloud" class="headerlink" title="移除nextcloud"></a>移除nextcloud</h1><p>删掉源文件，数据文件，数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo rm -rf /var/www/example.com/nextcloud</div><div class="line">sudo rm -rf /srv/hdd1/nextcloud</div><div class="line">DROP DATABASE nextclouddb;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然搭建后才发觉和自己的需求有点偏差，不过其支持WebDAV协议还是有点用处。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下编译配置rTorrent+ruTorrent</title>
    <link href="https://majunyi.top/2020/01/24/rtorrent-compile/"/>
    <id>https://majunyi.top/2020/01/24/rtorrent-compile/</id>
    <published>2020-01-24T12:04:06.000Z</published>
    <updated>2020-03-18T15:15:16.461Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu 18.04官方源的rTorrent 0.9.6会导致误报上传，故从源码编译0.9.7。<br><a id="more"></a></p>
<h1 id="pt客户端比较"><a href="#pt客户端比较" class="headerlink" title="pt客户端比较"></a>pt客户端比较</h1><h2 id="qBittorrent"><a href="#qBittorrent" class="headerlink" title="qBittorrent"></a>qBittorrent</h2><p>++ GUI实用美观<br>++ 自带web ui且可设密码权限<br>– 体积稍大<br>– 内存占用稍高<br>– 无原生命令行控制<br>由上可知，qB更适合桌面图形环境使用。我的win10 htpc和笔记本装的就是它，必要时还可临时开启web界面远程控制。  </p>
<h2 id="Transmission"><a href="#Transmission" class="headerlink" title="Transmission"></a>Transmission</h2><p>++ 资源占用较低<br>++ <a href="https://github.com/ronggang/transmission-web-control" target="_blank" rel="external">Web Control</a>使用方便（批量改tracker）<br>– 无法针对单种限流<br>– 辅种时无法跳过哈希校验<br>– 树莓派下transmission-daemon2.94带700+种子在公网IP改变情况下有机率崩溃<br>主要缺点还是只能全局限流，无法单种限流。</p>
<h2 id="rTorrent"><a href="#rTorrent" class="headerlink" title="rTorrent"></a>rTorrent</h2><p>++ 资源占用低<br>++ 带800+占5T的种子运行稳定<br>++ 辅种时可跳过哈希校验<br>++ 第三方web界面<a href="https://github.com/Novik/ruTorrent" target="_blank" rel="external">ruTorrent</a>操作方便（批量改tracker，批量限流）<br>++ 配置选项多，可定制程度高<br>– 配置稍复杂  </p>
<h1 id="rtorrent"><a href="#rtorrent" class="headerlink" title="rtorrent"></a>rtorrent</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -y build-essential subversion autoconf screen g++ gcc ntp curl comerr-dev pkg-config cfv libtool libssl-dev libncurses5-dev ncurses-term libsigc++-2.0-dev libcppunit-dev libcurl4-openssl-dev git zlib1g-dev</div></pre></td></tr></table></figure>
<h2 id="编译安装xmlrpc-c"><a href="#编译安装xmlrpc-c" class="headerlink" title="编译安装xmlrpc-c"></a>编译安装xmlrpc-c</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">svn co https://svn.code.sf.net/p/xmlrpc-c/code/stable ~/src/xmlrpc-c</div><div class="line"><span class="built_in">cd</span> ~/src/xmlrpc-c</div><div class="line">./configure --disable-libwww-client --disable-wininet-client --disable-abyss-server --disable-cgi-server</div><div class="line">make -j4</div><div class="line">sudo make install</div></pre></td></tr></table></figure>
<h2 id="编译安装libtorrent-0-13-7"><a href="#编译安装libtorrent-0-13-7" class="headerlink" title="编译安装libtorrent-0.13.7"></a>编译安装libtorrent-0.13.7</h2><p>这里有个坑，官方发布的包没有加入对openssl1.1的支持，需要根据<a href="https://github.com/rakshasa/libtorrent/commit/4607bbf78040789dee29266878ce109136b984ef" target="_blank" rel="external">这个commit</a>手动打补丁。也可以<a href="https://download.cloudatcost.com/download/fnp0kfwrhkihqwix92yfnt3x8" target="_blank" rel="external">在这里下载改好的2个文件</a>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/src</div><div class="line">curl http://rtorrent.net/downloads/libtorrent-0.13.7.tar.gz | tar xz</div><div class="line"><span class="built_in">cd</span> libtorrent-0.13.7</div><div class="line">./autogen.sh</div><div class="line">./configure</div><div class="line">make -j4</div><div class="line">sudo make install</div></pre></td></tr></table></figure></p>
<h2 id="编译安装rtorrent-0-9-7"><a href="#编译安装rtorrent-0-9-7" class="headerlink" title="编译安装rtorrent-0.9.7"></a>编译安装rtorrent-0.9.7</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/src</div><div class="line">curl http://rtorrent.net/downloads/rtorrent-0.9.7.tar.gz | tar xz</div><div class="line"><span class="built_in">cd</span> rtorrent-0.9.7</div><div class="line">./autogen.sh</div><div class="line">./configure --with-xmlrpc-c</div><div class="line">make -j4</div><div class="line">sudo make install</div><div class="line">sudo ldconfig</div></pre></td></tr></table></figure>
<h2 id="配置rtorrent"><a href="#配置rtorrent" class="headerlink" title="配置rtorrent"></a>配置rtorrent</h2><p>创建相关文件夹，注意按需修改路径和用户名，用户组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /path/to/pt/rtorrent/&#123;log,.session,~watch&#125;</div><div class="line">sudo chown -R user:group /path/to/pt</div></pre></td></tr></table></figure></p>
<p>修改<code>~/.rtorrent.rc</code>配置文件。我用来挂PT的机器是J1900+8G内存的ubuntu server，参考<a href="https://github.com/rakshasa/rtorrent/wiki/CONFIG-Template" target="_blank" rel="external">CONFIG-Template</a>和<a href="https://github.com/rakshasa/rtorrent/wiki/Performance-Tuning" target="_blank" rel="external">Performance-Tuning</a>稍作修改。注意按需修改路径和内存占用选项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div></pre></td><td class="code"><pre><div class="line">#############################################################################</div><div class="line"># A minimal rTorrent configuration that provides the basic features</div><div class="line"># you want to have in addition to the built-in defaults.</div><div class="line">#</div><div class="line"># See https://github.com/rakshasa/rtorrent/wiki/CONFIG-Template</div><div class="line"># for an up-to-date version.</div><div class="line">#############################################################################</div><div class="line"></div><div class="line"></div><div class="line">## Instance layout (base paths)</div><div class="line">method.insert = cfg.basedir,  private|const|string, (cat,&quot;/path/to/pt/rtorrent/&quot;)</div><div class="line">method.insert = cfg.download, private|const|string, (cat,&quot;/path/to/pt/&quot;)</div><div class="line">method.insert = cfg.logs,     private|const|string, (cat,(cfg.basedir),&quot;log/&quot;)</div><div class="line">method.insert = cfg.logfile,  private|const|string, (cat,(cfg.logs),&quot;rtorrent-&quot;,(system.time),&quot;.log&quot;)</div><div class="line">method.insert = cfg.session,  private|const|string, (cat,(cfg.basedir),&quot;.session/&quot;)</div><div class="line">method.insert = cfg.watch,    private|const|string, (cat,(cfg.basedir),&quot;watch/&quot;)</div><div class="line"></div><div class="line"></div><div class="line">## Create instance directories</div><div class="line">execute.throw = sh, -c, (cat,\</div><div class="line">    &quot;mkdir -p \&quot;&quot;,(cfg.download),&quot;\&quot; &quot;,\</div><div class="line">    &quot;\&quot;&quot;,(cfg.logs),&quot;\&quot; &quot;,\</div><div class="line">    &quot;\&quot;&quot;,(cfg.session),&quot;\&quot; &quot;,\</div><div class="line">    &quot;\&quot;&quot;,(cfg.watch),&quot;/load\&quot; &quot;,\</div><div class="line">    &quot;\&quot;&quot;,(cfg.watch),&quot;/start\&quot; &quot;)</div><div class="line"></div><div class="line"></div><div class="line">## Listening port for incoming peer traffic (fixed; you can also randomize it)</div><div class="line">network.port_range.set = 51400-51400</div><div class="line">network.port_random.set = no</div><div class="line"></div><div class="line"></div><div class="line">## Tracker-less torrent and UDP tracker support</div><div class="line">## (conservative settings for &apos;private&apos; trackers, change for &apos;public&apos;)</div><div class="line">dht.mode.set = disable</div><div class="line">protocol.pex.set = no</div><div class="line"></div><div class="line">trackers.use_udp.set = no</div><div class="line"></div><div class="line"></div><div class="line">## Peer settings</div><div class="line"># Global upload and download rate in KiB, `0` for unlimited (`download_rate`, `upload_rate`)</div><div class="line">throttle.global_down.max_rate.set_kb = 0</div><div class="line">throttle.global_up.max_rate.set_kb   = 0</div><div class="line"></div><div class="line"># Maximum number of simultaneous downloads and uploads slots (global slots!) (`max_downloads_global`, `max_uploads_global`)</div><div class="line">throttle.max_downloads.global.set = 300</div><div class="line">throttle.max_uploads.global.set = 300</div><div class="line"></div><div class="line"># Maximum and minimum number of peers to connect to per torrent while downloading (`min_peers`, `max_peers`) Default: `100` and `200` respectively</div><div class="line">throttle.min_peers.normal.set = 99</div><div class="line">throttle.max_peers.normal.set = 100</div><div class="line"></div><div class="line"># Same as above but for seeding completed torrents (seeds per torrent), `-1` for same as downloading (`min_peers_seed`, `max_peers_seed`) Default: `-1` for both</div><div class="line">throttle.min_peers.seed.set = -1</div><div class="line">throttle.max_peers.seed.set = -1</div><div class="line"></div><div class="line"># Maximum number of simultaneous downloads and uploads slots per torrent (`max_uploads`) Default: `50` for both</div><div class="line">throttle.max_downloads.set = 50</div><div class="line">throttle.max_uploads.set = 100</div><div class="line"></div><div class="line"># Set the numwant field sent to the tracker, which indicates how many peers we want.</div><div class="line">#  A negative value disables this feature. Default: `-1` (`tracker_numwant`)</div><div class="line">trackers.numwant.set = 100</div><div class="line"></div><div class="line">protocol.encryption.set = allow_incoming,try_outgoing,enable_retry</div><div class="line"></div><div class="line"></div><div class="line">## Limits for file handle resources, this is optimized for</div><div class="line">## an `ulimit` of 1024 (a common default). You MUST leave</div><div class="line">## a ceiling of handles reserved for rTorrent&apos;s internal needs!</div><div class="line">network.http.max_open.set = 99</div><div class="line">network.max_open_files.set = 600</div><div class="line">network.max_open_sockets.set = 999</div><div class="line"></div><div class="line">## Memory resource usage (increase if you have a large number of items loaded,</div><div class="line">## and/or the available resources to spend)</div><div class="line">pieces.memory.max.set = 4096M</div><div class="line"># Max packet size using xmlrpc. Default: `524288` (xmlrpc_size_limit)</div><div class="line">network.xmlrpc.size_limit.set = 4M</div><div class="line"></div><div class="line"># Send and receive buffer size for socket. Disabled by default (`0`), this means the default is used by OS</div><div class="line">#  (you have to modify the system wide settings!) (`send_buffer_size`, `receive_buffer_size`)</div><div class="line"># Increasing buffer sizes may help reduce disk seeking, connection polling as more data is buffered each time</div><div class="line">#  the socket is written to. It will result higher memory usage (not visible in rtorrent process!).</div><div class="line">network.receive_buffer.size.set =  4M</div><div class="line">network.send_buffer.size.set    = 12M</div><div class="line"></div><div class="line"># Preloading a piece of a file. Default: `0` Possible values: `0` (Off) , `1` (Madvise) , `2` (Direct paging).</div><div class="line">pieces.preload.type.set = 2</div><div class="line">#pieces.preload.min_size.set = 262144</div><div class="line">#pieces.preload.min_rate.set = 5120</div><div class="line"></div><div class="line"># TOS of peer connections. Default: `throughput`. If the option is set to `default` then the system default TOS</div><div class="line">#  is used. A hex value may be used for non-standard settings.  (`tos`)</div><div class="line"># Possible values: `[default|lowdelay|throughput|reliability|mincost]` or a hex value.</div><div class="line">#network.tos.set = throughput</div><div class="line"></div><div class="line"></div><div class="line">## Basic operational settings (no need to change these)</div><div class="line">session.path.set = (cat, (cfg.session))</div><div class="line">directory.default.set = (cat, (cfg.download))</div><div class="line">log.execute = (cat, (cfg.logs), &quot;execute.log&quot;)</div><div class="line">#log.xmlrpc = (cat, (cfg.logs), &quot;xmlrpc.log&quot;)</div><div class="line">execute.nothrow = sh, -c, (cat, &quot;echo &gt;&quot;,\</div><div class="line">    (session.path), &quot;rtorrent.pid&quot;, &quot; &quot;,(system.pid))</div><div class="line"></div><div class="line"></div><div class="line">## Other operational settings (check &amp; adapt)</div><div class="line">encoding.add = utf8</div><div class="line">system.umask.set = 0022</div><div class="line">system.cwd.set = (directory.default)</div><div class="line"></div><div class="line"># CURL option to lower DNS timeout. Default: `60`.</div><div class="line">network.http.dns_cache_timeout.set = 25</div><div class="line"></div><div class="line">schedule2 = monitor_diskspace, 15, 60, ((close_low_diskspace, 1000M))</div><div class="line">pieces.hash.on_completion.set = no</div><div class="line">#view.sort_current = seeding, greater=d.ratio=</div><div class="line">#keys.layout.set = qwerty</div><div class="line">#network.http.capath.set = &quot;/etc/ssl/certs&quot;</div><div class="line"></div><div class="line"># CURL options to add support for nonofficial SSL trackers and peers</div><div class="line">network.http.ssl_verify_peer.set = 0</div><div class="line">#network.http.ssl_verify_host.set = 0</div><div class="line"></div><div class="line"></div><div class="line">## Some additional values and commands</div><div class="line">method.insert = system.startup_time, value|const, (system.time)</div><div class="line">method.insert = d.data_path, simple,\</div><div class="line">    &quot;if=(d.is_multi_file),\</div><div class="line">        (cat, (d.directory), /),\</div><div class="line">        (cat, (d.directory), /, (d.name))&quot;</div><div class="line">method.insert = d.session_file, simple, &quot;cat=(session.path), (d.hash), .torrent&quot;</div><div class="line"></div><div class="line"></div><div class="line">## Watch directories (add more as you like, but use unique schedule names)</div><div class="line">## Add torrent</div><div class="line">schedule2 = watch_load, 11, 10, ((load.verbose, (cat, (cfg.watch), &quot;load/*.torrent&quot;)))</div><div class="line">## Add &amp; download straight away</div><div class="line">schedule2 = watch_start, 10, 10, ((load.start_verbose, (cat, (cfg.watch), &quot;start/*.torrent&quot;)))</div><div class="line"></div><div class="line"></div><div class="line">## Run the rTorrent process as a daemon in the background</div><div class="line">## (and control via XMLRPC sockets)</div><div class="line">#system.daemon.set = true</div><div class="line">#network.scgi.open_local = (cat,(session.path),rpc.socket)</div><div class="line">#execute.nothrow = chmod,770,(cat,(session.path),rpc.socket)</div><div class="line">scgi_port = 127.0.0.1:5000</div><div class="line"></div><div class="line">## Logging:</div><div class="line">##   Levels = critical error warn notice info debug</div><div class="line">##   Groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*</div><div class="line">print = (cat, &quot;Logging to &quot;, (cfg.logfile))</div><div class="line">log.open_file = &quot;log&quot;, (cfg.logfile)</div><div class="line">log.add_output = &quot;info&quot;, &quot;log&quot;</div><div class="line">#log.add_output = &quot;tracker_debug&quot;, &quot;log&quot;</div><div class="line"></div><div class="line"></div><div class="line"># Save all the sessions in every 8 hours instead of the default 20 minutes.</div><div class="line">schedule2 = session_save, 1200, 28800, ((session.save))</div><div class="line"></div><div class="line"># Prune file status in every 24 hours, this is the default setting.</div><div class="line">#schedule2 = prune_file_status, 3600, 86400, ((system.file_status_cache.prune))</div><div class="line"></div><div class="line"># Whether to allocate disk space for a new torrent. Default: `0`</div><div class="line">system.file.allocate.set = 1</div><div class="line"></div><div class="line"></div><div class="line">### END of rtorrent.rc ###</div></pre></td></tr></table></figure></p>
<p>修改后运行<code>rtorrent</code>测试配置文件，无问题后<code>Ctrl+Q</code>退出。  </p>
<h2 id="设置服务开机运行"><a href="#设置服务开机运行" class="headerlink" title="设置服务开机运行"></a><a href="https://github.com/rakshasa/rtorrent/wiki/Common-Tasks-in-rTorrent#ubuntu-16-04-with-systemd" target="_blank" rel="external">设置服务开机运行</a></h2><p>创建<code>/etc/systemd/system/rtorrent.service</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=rtorrent (in tmux)</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=oneshot</div><div class="line">RemainAfterExit=yes</div><div class="line">User=yourname</div><div class="line">ExecStart=/usr/bin/tmux -2 new-session -d -s rtorrent rtorrent</div><div class="line">ExecStop=/usr/bin/tmux kill-session -t rtorrent</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=default.target</div></pre></td></tr></table></figure></p>
<p>启用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo systemctl <span class="built_in">enable</span> rtorrent.service</div><div class="line">sudo systemctl start rtorrent.service</div></pre></td></tr></table></figure></p>
<h1 id="ruTorrent"><a href="#ruTorrent" class="headerlink" title="ruTorrent"></a>ruTorrent</h1><h2 id="安装配置apache"><a href="#安装配置apache" class="headerlink" title="安装配置apache"></a>安装配置apache</h2><p>选择apache是因为其对SCGI的支持比较好，且个人网站没有处理高并发的需求，故没选Nginx。<br>安装依赖。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apache2 libapache2-mod-php7.2</div><div class="line">sudo apt-get install php7.2-gd php7.2-json php7.2-curl php7.2-mbstring php7.2-intl php-imagick php7.2-xml php7.2-zip libapache2-mod-scgi</div></pre></td></tr></table></figure></p>
<p>启用<code>.htaccess</code>。修改<code>/etc/apache2/apache2.conf</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Directory /var/www/&gt;</div><div class="line">  AllowOverride All</div></pre></td></tr></table></figure></p>
<p>开启headers模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo a2enmod headers</div></pre></td></tr></table></figure></p>
<p>复制默认https站点配置并在此基础上修改。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/example.com.conf</div><div class="line">sudo vi /etc/apache2/sites-available/example.com.conf</div></pre></td></tr></table></figure></p>
<p>设置HSTS。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_headers.c&gt;</div><div class="line">  Header always set Strict-Transport-Security &quot;max-age=15552000; includeSubDomains&quot;</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>
<p>启动ssl，禁用默认站点，启用本站配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo a2enmod ssl</div><div class="line">sudo a2ensite example.com.conf</div><div class="line">sudo a2dissite 000-default.conf</div><div class="line">sudo systemctl reload apache2</div></pre></td></tr></table></figure></p>
<h2 id="修改php上传文件大小上限"><a href="#修改php上传文件大小上限" class="headerlink" title="修改php上传文件大小上限"></a>修改php上传文件大小上限</h2><p>以apache为例，修改<code>/etc/php/7.2/apache2/php.ini</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">upload_max_filesize = 64M</div><div class="line">max_file_uploads = 200</div><div class="line">post_max_size = 128M</div></pre></td></tr></table></figure></p>
<p>重启apache服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service apache2 restart</div></pre></td></tr></table></figure></p>
<h2 id="安装web界面rutorrent"><a href="#安装web界面rutorrent" class="headerlink" title="安装web界面rutorrent"></a>安装web界面<a href="https://github.com/Novik/ruTorrent/wiki/WebSERVER" target="_blank" rel="external">rutorrent</a></h2><p>安装依赖。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install zip unzip zlib1g-dev ffmpeg mediainfo unrar sox</div></pre></td></tr></table></figure></p>
<p>下载<a href="https://github.com/Novik/ruTorrent/releases" target="_blank" rel="external">ruTorrent</a>并解压。<br>复制到网页文件夹并修改权限。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cp -r ruTorrent /var/www/example.com</div><div class="line">sudo chown -R www-data:www-data /var/www/example.com/ruTorrent</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/Novik/ruTorrent/wiki/Plugins#uninstallation" target="_blank" rel="external">禁用不用的插件</a>，修改<code>ruTorrent/conf/plugins.ini</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[_cloudflare]</div><div class="line">enabled = no</div></pre></td></tr></table></figure></p>
<p>启用访问密码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo htpasswd -c /etc/apache2/.htpasswd yourname</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mv /var/www/example.com/ruTorrent/htaccess-example /var/www/example.com/ruTorrent/.htaccess</div><div class="line">sudo vi /var/www/example.com/ruTorrent/.htaccess</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">AuthType Basic</div><div class="line">AuthName &quot;yourname&quot;</div><div class="line">AuthUserFile  &quot;/etc/apache2/.htpasswd&quot;</div><div class="line">require valid-user</div></pre></td></tr></table></figure>
<h1 id="通过samba共享下载文件夹"><a href="#通过samba共享下载文件夹" class="headerlink" title="通过samba共享下载文件夹"></a>通过samba共享下载文件夹</h1><p>安装samba。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install samba samba-common-bin</div></pre></td></tr></table></figure></p>
<p>编辑<code>/etc/samba/smb.conf</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[pt]</div><div class="line">Comment = pt download folder</div><div class="line">Path = /path/to/pt</div><div class="line">Browseable = yes</div><div class="line">Writeable = Yes</div><div class="line">only guest = no</div><div class="line">create mask = 0775</div><div class="line">directory mask = 0775</div><div class="line">Public = yes</div></pre></td></tr></table></figure></p>
<p>设置访问密码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo smbpasswd <span class="_">-a</span> yourname</div></pre></td></tr></table></figure></p>
<p>重启服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service smbd restart</div></pre></td></tr></table></figure></p>
<h1 id="pyrocore（可选）"><a href="#pyrocore（可选）" class="headerlink" title="pyrocore（可选）"></a><a href="https://github.com/pyroscope/pyrocore" target="_blank" rel="external">pyrocore</a>（可选）</h1><p>强大的种子修改命令行工具集。需要python2的运行环境。</p>
<h2 id="安装conda"><a href="#安装conda" class="headerlink" title="安装conda"></a>安装conda</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh</div><div class="line">bash Miniconda3-latest-Linux-x86_64.sh</div></pre></td></tr></table></figure>
<p>改为国内源，修改<code>~/.condarc</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">channels:</div><div class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</div><div class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</div><div class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/</div><div class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</div><div class="line">  - defaults</div><div class="line"></div><div class="line">show_channel_urls: true</div></pre></td></tr></table></figure></p>
<p>创建python2环境。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda create -n py2 python=2</div></pre></td></tr></table></figure></p>
<h2 id="安装pyroscope"><a href="#安装pyroscope" class="headerlink" title="安装pyroscope"></a>安装pyroscope</h2><p>安装依赖和创建安装文件夹。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python python-dev python-virtualenv python-pip python-setuptools python-pkg-resources git build-essential</div><div class="line">mkdir -p ~/bin ~/.local</div></pre></td></tr></table></figure></p>
<p>修改<code>~/.bashrc</code>，末尾添加此句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=$PATH:/home/yourname/bin</div></pre></td></tr></table></figure></p>
<p>克隆源码，激活py2环境，安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git clone &quot;https://github.com/pyroscope/pyrocore.git&quot; ~/.local/pyroscope</div><div class="line">source activate py2</div><div class="line">~/.local/pyroscope/update-to-head.sh</div></pre></td></tr></table></figure></p>
<p>运行<code>pyroadmin --version</code>以检查是否安装成功。  </p>
<h1 id="常用任务"><a href="#常用任务" class="headerlink" title="常用任务"></a>常用任务</h1><h2 id="批量改tracker"><a href="#批量改tracker" class="headerlink" title="批量改tracker"></a>批量改tracker</h2><p>左下角Trackers栏右键需要更改的网站，选中所有该站种子后停止，编辑种子，在弹出的窗口中修改新网址保存即可。  </p>
<h2 id="辅种时跳过哈希校验"><a href="#辅种时跳过哈希校验" class="headerlink" title="辅种时跳过哈希校验"></a>辅种时跳过哈希校验</h2><p>一般来说，添加种子时选中<code>Fast resume</code>即可跳过。但其使用的<code>rtorrent_fast_resume.pl</code><a href="https://github.com/rakshasa/rtorrent/issues/531" target="_blank" rel="external">有Bug</a>，如果有文件夹为纯数字则无法正常跳过校验。<br>这时就需要用到前面安装的<code>pyroscope</code>工具集中的<a href="https://pyrocore.readthedocs.io/en/latest/references.html#chtor" target="_blank" rel="external">chtor</a>来制作可跳过检验的种子。以某个无法用perl脚本跳过的IMDB大包为例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chtor -H <span class="string">'/path/to/pt/movie/IMDb.2017.09.29.Top.250.BluRay.1080p.x265.10bit.MNHD-FRDS'</span>  *.torrent -o ./new</div></pre></td></tr></table></figure></p>
<p>上述命令将把工作目录下所有的种子添加校验部分，并在’new’文件夹下生成新种子。没有’-o’选项则会直接修改种子。由于是和指定路径下文件简单比较大小，故比计算哈希值快得多。  </p>
<h2 id="修改已制作种子校验值和tracker方便多站发布"><a href="#修改已制作种子校验值和tracker方便多站发布" class="headerlink" title="修改已制作种子校验值和tracker方便多站发布"></a>修改已制作种子校验值和tracker方便多站发布</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chtor --reannounce-all=https://pt.site.com/announce.php *.torrent</div></pre></td></tr></table></figure>
<p>上述命令将把工作目录下所有的种子更改tracker并修改哈希值以免pt软件认为是同样的种子，直接跳过而无法辅种。方便在多个站点同时发布种子而不用重复制作种子。</p>
<h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="Tracker-Peer-certificate-cannot-be-authenticated-with-given-CA-certificates"><a href="#Tracker-Peer-certificate-cannot-be-authenticated-with-given-CA-certificates" class="headerlink" title="Tracker: [Peer certificate cannot be authenticated with given CA certificates]"></a>Tracker: [Peer certificate cannot be authenticated with given CA certificates]</h2><p>原因是该pt站的ssl证书有问题，想跳过检验可在配置文件’~/.rtorrent.rc’添加这句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">network.http.ssl_verify_peer.set = 0</div></pre></td></tr></table></figure></p>
<h2 id="No-connection-to-rTorrent-Check-if-it-is-really-running-Check-scgi-port-and-scgi-host-settings-in-config-php-and-scgi-port-in-rTorrent-configuration-file"><a href="#No-connection-to-rTorrent-Check-if-it-is-really-running-Check-scgi-port-and-scgi-host-settings-in-config-php-and-scgi-port-in-rTorrent-configuration-file" class="headerlink" title="No connection to rTorrent. Check if it is really running. Check $scgi_port and $scgi_host settings in config.php and scgi_port in rTorrent configuration file."></a>No connection to rTorrent. Check if it is really running. Check $scgi_port and $scgi_host settings in config.php and scgi_port in rTorrent configuration file.</h2><p>首先，运行<code>tmux ls</code>以确定rTorrent服务是否正常运行。若没有相关进程，则执行<code>rtorrent</code>并查看error信息。  </p>
<h2 id="rtorrent-Could-not-lock-session-directory"><a href="#rtorrent-Could-not-lock-session-directory" class="headerlink" title="rtorrent: Could not lock session directory"></a>rtorrent: Could not lock session directory</h2><p>这种情况通常发生在rtorrent非正常退出的情况。比如通过rutorrent删除大种子及文件。解决办法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /path/to/pt/rtorrent/.session</div><div class="line">rm -rf rtorrent.lock</div><div class="line">sudo systemctl restart rtorrent.service</div></pre></td></tr></table></figure></p>
<p>删除内容较多的大种子建议先通过rutorrent仅删除种子，再通过<code>ssh</code>或<code>samba</code>删除文件。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ubuntu 18.04官方源的rTorrent 0.9.6会导致误报上传，故从源码编译0.9.7。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="pt" scheme="https://majunyi.top/tags/pt/"/>
    
  </entry>
  
  <entry>
    <title>用Docker部署64位ARM版的seafile</title>
    <link href="https://majunyi.top/2019/05/20/seafile-docker-arm64/"/>
    <id>https://majunyi.top/2019/05/20/seafile-docker-arm64/</id>
    <published>2019-05-20T02:39:33.000Z</published>
    <updated>2020-03-29T14:18:00.650Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.seafile.com/home/" target="_blank" rel="external">seafile</a>是开源的企业私有网盘，用法类似于百度网盘，但数据都是自己的，且上传下载仅限于带宽。但官方并未提供arm64的支持，所以我从源码编译了arm64版并制成docker镜像方便部署。<br><a id="more"></a>  </p>
<h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>从<a href="https://www.seafile.com/download/" target="_blank" rel="external">官方下载页面</a>可见服务器端没有arm64，倒是有armhf(arm32v7)，但目前市面上用ARM的NAS基本上都是arm64的，且NAS的系统通常比较特殊，并不能像常见linux系统那样<a href="https://manual-cn.seafile.com/deploy/using_mysql.html" target="_blank" rel="external">部署Seafile服务器</a>，而<a href="https://hub.docker.com/r/seafileltd/seafile/tags" target="_blank" rel="external">官方提供的Docker镜像</a>只支持x86架构。<br>故需要做的工作有两件：  </p>
<ol>
<li>从<a href="https://github.com/haiwen/seafile-server" target="_blank" rel="external">源码</a>编译seafile的arm64架构服务器端。</li>
<li>制成docker镜像方便部署。</li>
</ol>
<h1 id="部署docker镜像"><a href="#部署docker镜像" class="headerlink" title="部署docker镜像"></a>部署docker镜像</h1><p>将<code>/opt/seafile</code>改成你的路径。端口<code>8000</code>用来访问seafile，<code>8080</code>用于WebDAV（需要<a href="https://manual-cn.seafile.com/extension/webdav.html" target="_blank" rel="external">启用</a>），<code>8082</code>用来访问管理页面seahub。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker run --name seafile \</div><div class="line">  -v /opt/seafile:/home/seafile \</div><div class="line">  -p 8000:8000 \</div><div class="line">  -p 8080:8080 \</div><div class="line">  -p 8082:8082 \</div><div class="line">  -ti mjysci/seafile:arm64v8</div></pre></td></tr></table></figure></p>
<p>第一次运行需要设置domain，管理员账户等。设置完毕后通过<code>Ctrl+P</code>和<code>Ctrl+Q</code>退出tty界面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.seafile.com/home/&quot;&gt;seafile&lt;/a&gt;是开源的企业私有网盘，用法类似于百度网盘，但数据都是自己的，且上传下载仅限于带宽。但官方并未提供arm64的支持，所以我从源码编译了arm64版并制成docker镜像方便部署。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://majunyi.top/tags/docker/"/>
    
      <category term="arm" scheme="https://majunyi.top/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>树莓派3安装arm64版Ubuntu 18.04 Server</title>
    <link href="https://majunyi.top/2019/05/20/rpi3-ubuntu-arm64/"/>
    <id>https://majunyi.top/2019/05/20/rpi3-ubuntu-arm64/</id>
    <published>2019-05-20T02:02:38.000Z</published>
    <updated>2019-05-20T02:39:19.087Z</updated>
    
    <content type="html"><![CDATA[<p>树莓派官方的Raspbian为了保持向下兼容仍然是32位，64位的树莓派3不跑64位系统和咸鱼有什么区别？<br><a id="more"></a></p>
<h1 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h1><p><a href="https://www.ubuntu.com/download/iot/raspberry-pi-2-3" target="_blank" rel="external">Ubuntu官方</a>已经提供了<a href="http://cdimage.ubuntu.com/releases/bionic/release/ubuntu-18.04.2-preinstalled-server-arm64+raspi3.img.xz" target="_blank" rel="external">树莓派3的镜像</a>，直接下载即可。</p>
<h1 id="刷TF卡"><a href="#刷TF卡" class="headerlink" title="刷TF卡"></a>刷TF卡</h1><p>如果打算玩docker建议至少32G以上，16G需要在调试的间隙清理掉无用的若干<none>容器和镜像以免空间不足。刷TF卡用<a href="https://www.balena.io/etcher/" target="_blank" rel="external">Etcher</a>即可。<br>默认用户名和密码均为<code>ubuntu</code>。</none></p>
<h1 id="改源"><a href="#改源" class="headerlink" title="改源"></a>改源</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/apt/sources.list</div></pre></td></tr></table></figure>
<p>旧的源是<code>http://ports.ubuntu.com</code>，批量改成科大源并注释掉<code>deb-src</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:%s/http:\/\/ports.ubuntu.com/https:\/\/mirrors.ustc.edu.cn/g</div><div class="line">:%s/deb-src/<span class="comment">#deb-src/g</span></div></pre></td></tr></table></figure></p>
<h1 id="设置wifi"><a href="#设置wifi" class="headerlink" title="设置wifi"></a>设置wifi</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt install network-manager</div><div class="line">sudo service network-manager start</div><div class="line">sudo nmtui</div></pre></td></tr></table></figure>
<h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="Unable-to-acquire-the-dpkg-frontend-lock-var-lib-dpkg-lock-frontend-is-another-process-using-it"><a href="#Unable-to-acquire-the-dpkg-frontend-lock-var-lib-dpkg-lock-frontend-is-another-process-using-it" class="headerlink" title="Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?"></a>Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it?</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo rm /var/lib/dpkg/lock*</div><div class="line">sudo dpkg --configure <span class="_">-a</span></div><div class="line">sudo apt update</div></pre></td></tr></table></figure>
<h2 id="dpkg-error-parsing-file-‘-var-lib-dpkg-updates-0004’-near-line-0"><a href="#dpkg-error-parsing-file-‘-var-lib-dpkg-updates-0004’-near-line-0" class="headerlink" title="dpkg: error: parsing file ‘/var/lib/dpkg/updates/0004’ near line 0"></a>dpkg: error: parsing file ‘/var/lib/dpkg/updates/0004’ near line 0</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/lib/dpkg/updates &amp;&amp; sudo rm -rf 0004</div><div class="line">sudo dpkg --configure <span class="_">-a</span></div></pre></td></tr></table></figure>
<h1 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt install sysbench</div><div class="line">sysbench --test=cpu --cpu-max-prime=20000 run</div></pre></td></tr></table></figure>
<p>树莓派3B（BCM2837）测试结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">sysbench 1.0.11 (using system LuaJIT 2.1.0-beta3)</div><div class="line"></div><div class="line">Running the test with following options:</div><div class="line">Number of threads: 1</div><div class="line">Initializing random number generator from current time</div><div class="line"></div><div class="line"></div><div class="line">Prime numbers limit: 20000</div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line">CPU speed:</div><div class="line">    events per second:   220.37</div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          10.0007s</div><div class="line">    total number of events:              2206</div><div class="line"></div><div class="line">Latency (ms):</div><div class="line">         min:                                  4.21</div><div class="line">         avg:                                  4.53</div><div class="line">         max:                                  8.78</div><div class="line">         95th percentile:                      8.58</div><div class="line">         sum:                               9996.78</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           2206.0000/0.00</div><div class="line">    execution time (avg/stddev):   9.9968/0.00</div></pre></td></tr></table></figure></p>
<p>i5-8400<a href="https://majunyi.top/2019/03/12/qemu-ubuntu-arm64/">用qemu模拟aarch64架构</a>在ubuntu 16.04下测试结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">sysbench 0.4.12:  multi-threaded system evaluation benchmark</div><div class="line"></div><div class="line">Running the test with following options:</div><div class="line">Number of threads: 1</div><div class="line"></div><div class="line">Doing CPU performance benchmark</div><div class="line"></div><div class="line">Threads started!</div><div class="line">Done.</div><div class="line"></div><div class="line">Maximum prime number checked in CPU test: 20000</div><div class="line"></div><div class="line"></div><div class="line">Test execution summary:</div><div class="line">    total time:                          45.2990s</div><div class="line">    total number of events:              10000</div><div class="line">    total time taken by event execution: 45.2838</div><div class="line">    per-request statistics:</div><div class="line">         min:                                  4.42ms</div><div class="line">         avg:                                  4.53ms</div><div class="line">         max:                                  5.26ms</div><div class="line">         approx.  95 percentile:               4.62ms</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           10000.0000/0.00</div><div class="line">    execution time (avg/stddev):   45.2838/0.00</div></pre></td></tr></table></figure></p>
<p>i5-8400在ubuntu 18.04下测试结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">sysbench 1.0.11 (using system LuaJIT 2.1.0-beta3)</div><div class="line"></div><div class="line">Running the test with following options:</div><div class="line">Number of threads: 1</div><div class="line">Initializing random number generator from current time</div><div class="line"></div><div class="line"></div><div class="line">Prime numbers limit: 20000</div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line">CPU speed:</div><div class="line">    events per second:   549.44</div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          10.0018s</div><div class="line">    total number of events:              5496</div><div class="line"></div><div class="line">Latency (ms):</div><div class="line">         min:                                  1.81</div><div class="line">         avg:                                  1.82</div><div class="line">         max:                                  5.85</div><div class="line">         95th percentile:                      1.86</div><div class="line">         sum:                              10000.89</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           5496.0000/0.00</div><div class="line">    execution time (avg/stddev):   10.0009/0.00</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树莓派官方的Raspbian为了保持向下兼容仍然是32位，64位的树莓派3不跑64位系统和咸鱼有什么区别？&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
      <category term="arm" scheme="https://majunyi.top/tags/arm/"/>
    
      <category term="rpi" scheme="https://majunyi.top/tags/rpi/"/>
    
  </entry>
  
  <entry>
    <title>解决win10下Ryzen平台间歇性卡顿问题</title>
    <link href="https://majunyi.top/2019/04/23/fix-win10-ryzen-freeze/"/>
    <id>https://majunyi.top/2019/04/23/fix-win10-ryzen-freeze/</id>
    <published>2019-04-23T06:17:10.000Z</published>
    <updated>2019-04-23T07:20:48.506Z</updated>
    
    <content type="html"><![CDATA[<p>具体现象为几十分钟内会有一次几十秒的卡顿，视频播放停止，鼠标不能动。<br><a id="more"></a><br>旧的客厅用htpc是J1900的，由于不支持硬解x265，而软解4k又比较卡，所以换成了ryzen apu，轻松播放<a href="http://madvr.com" target="_blank" rel="external">madVR</a>渲染的4k hevc高码率视频。只是换机后碰到播放视频间歇性卡顿的问题。  </p>
<h1 id="分析与尝试"><a href="#分析与尝试" class="headerlink" title="分析与尝试"></a>分析与尝试</h1><p>注意到卡顿时硬盘读取灯常亮，打开任务管理器观察磁盘占用达100%，但列表中并没有高I/O的程序。  </p>
<h2 id="安装avast替代Windows-Defender"><a href="#安装avast替代Windows-Defender" class="headerlink" title="安装avast替代Windows Defender"></a>安装avast替代Windows Defender</h2><p>Windows Defender有着空闲时扫描硬盘和CPU占用高的问题，虽然这在SSD和多核时代可以忽略，但我还是先用<a href="https://www.avast.com" target="_blank" rel="external">免费的avast</a>试试看。结果问题依旧。</p>
<h2 id="更新主板芯片驱动"><a href="#更新主板芯片驱动" class="headerlink" title="更新主板芯片驱动"></a>更新主板芯片驱动</h2><p>故怀疑是驱动问题，am4主板在早期曾爆出由于芯片组外包给祥硕，赶工导致的一些主板问题。主板是华擎的<a href="https://www.asrock.com/mb/AMD/A320M-HDV/index.asp#Download" target="_blank" rel="external">A320M-HDV</a>，官方提供了芯片+显卡的驱动合集包，已经安装，并且升级了显卡驱动。于是去AMD官方下载<a href="https://www.amd.com/en/support/chipsets/amd-socket-am4/a320" target="_blank" rel="external">AMD Chipset Drivers</a>，安装后问题依旧。  </p>
<h2 id="更新SATA控制器驱动"><a href="#更新SATA控制器驱动" class="headerlink" title="更新SATA控制器驱动"></a>更新SATA控制器驱动</h2><p>查看设备管理器，可见<code>IDE ATA/ATAPI控制器</code>依旧为2006年的<code>标准 SATA AHCI 控制器</code>，AMD官方芯片驱动并未更新此项。于是右键更新驱动程序，选手动，选定解压后的文件夹搜索，没有结果。选<code>可用驱动程序列表中选取</code>，取消<code>显示兼容硬件</code>，厂商<code>AMD</code>，装上<code>AMD SATA 控制器</code>。更新后问题依旧。</p>
<h2 id="查看事件查看器"><a href="#查看事件查看器" class="headerlink" title="查看事件查看器"></a>查看事件查看器</h2><p>Windows日志——系统，发现来源amdsata有很多<code>事件129</code>的警告。内容为：发出了对设备 \Device\RaidPort0 的重置。<br>故怀疑是SATA电源非正常进入节能模式导致的接口重置。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="解锁电源管理隐藏选项"><a href="#解锁电源管理隐藏选项" class="headerlink" title="解锁电源管理隐藏选项"></a>解锁电源管理隐藏选项</h2><p>以管理员模式打开cmd，运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">powercfg -attributes SUB_DISK 0b2d69d7<span class="_">-a</span>2a1-449c-9680<span class="_">-f</span>91c70521c60 -ATTRIB_HIDE</div></pre></td></tr></table></figure></p>
<h2 id="更改高级电源设置"><a href="#更改高级电源设置" class="headerlink" title="更改高级电源设置"></a>更改高级电源设置</h2><p>电源和睡眠设置——其他电源设置——更改计划设置——更改高级电源设置——更改当前不可用的设置——硬盘——AHCI Link Power Management - HIPM/DIPM<br>设置改为<code>Active</code>。问题解决。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;具体现象为几十分钟内会有一次几十秒的卡顿，视频播放停止，鼠标不能动。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="win" scheme="https://majunyi.top/tags/win/"/>
    
  </entry>
  
  <entry>
    <title>通过pass实现更安全的docker登录方式</title>
    <link href="https://majunyi.top/2019/03/14/docker-credential-login/"/>
    <id>https://majunyi.top/2019/03/14/docker-credential-login/</id>
    <published>2019-03-14T03:41:20.000Z</published>
    <updated>2019-03-21T05:13:56.314Z</updated>
    
    <content type="html"><![CDATA[<p>docker默认登录是将密码明文存在本地的<code>~/.docker/config.json</code>，随便找个<a href="https://paulschou.com/tools/xlate/" target="_blank" rel="external">base64的解码器</a>就能还原，存在安全隐患。此文通过pass实现更安全的docker登录方式。<br><a id="more"></a><br>测试平台：Raspberry Pi 3B with ubuntu 18.04.2 server aarch64<br>由于官方只发布了amd64的helper，所以其他架构需要从源码编译。另外<code>secretservice</code><a href="https://github.com/docker/compose/issues/6023#issuecomment-401089768" target="_blank" rel="external">需要X11</a>，所以没有桌面的server还是用<code>pass</code>。  </p>
<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install golang-go libsecret-1-dev gpg pass</div></pre></td></tr></table></figure>
<h1 id="取得源码并编译docker-credential-helpers"><a href="#取得源码并编译docker-credential-helpers" class="headerlink" title="取得源码并编译docker-credential-helpers"></a>取得源码并编译docker-credential-helpers</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">go get github.com/docker/docker-credential-helpers</div><div class="line"><span class="built_in">cd</span> ~/go/src/github.com/docker/docker-credential-helpers</div><div class="line">make pass</div><div class="line"><span class="built_in">cd</span> bin</div><div class="line">chmod +x docker-credential-pass &amp;&amp; sudo mv docker-credential-pass /usr/<span class="built_in">local</span>/bin/</div></pre></td></tr></table></figure>
<p>编辑docker配置文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ~/.docker/config.json</div></pre></td></tr></table></figure></p>
<p>添加以下内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	&quot;credsStore&quot;: &quot;pass&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="生成gpg2-key"><a href="#生成gpg2-key" class="headerlink" title="生成gpg2 key"></a>生成gpg2 key</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gpg --generate-key</div></pre></td></tr></table></figure>
<p>不要使用passphrase，记住你的uid。</p>
<h1 id="pass初始化"><a href="#pass初始化" class="headerlink" title="pass初始化"></a>pass初始化</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pass init <span class="string">"你的uid"</span></div></pre></td></tr></table></figure>
<h1 id="登录docker"><a href="#登录docker" class="headerlink" title="登录docker"></a>登录docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker login</div></pre></td></tr></table></figure>
<h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="push-fails-‘denied-requested-access-to-the-resource-is-denied’"><a href="#push-fails-‘denied-requested-access-to-the-resource-is-denied’" class="headerlink" title="push fails: ‘denied: requested access to the resource is denied’"></a>push fails: ‘denied: requested access to the resource is denied’</h2><p>原因是创建gpg key时使用了passphrase，而helper并不会弹出让你输入passphrase的选项。<br>方法一：登录。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pass</div><div class="line">pass docker-credential-helpers/&lt;一些字串&gt;/&lt;用户名&gt;</div></pre></td></tr></table></figure></p>
<p>第一个命令列出<code>pass</code>文件夹结构。第二个命令执行后输入passphrase。<br>然后再试。<br>方法二：删掉passphrase。</p>
<pre><code class="bash">gpg --edit-key <span class="string">"你的uid"</span>
passwd
</code></pre>
<p>输入passphrase，然后设置新passphrase为空。最后<code>quit</code>退出。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://hackernoon.com/getting-rid-of-docker-plain-text-credentials-88309e07640d" target="_blank" rel="external">Getting rid of Docker plain text credentials</a><br><a href="https://docs.docker.com/engine/reference/commandline/login/#credentials-store" target="_blank" rel="external">docker login credentials-store</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker默认登录是将密码明文存在本地的&lt;code&gt;~/.docker/config.json&lt;/code&gt;，随便找个&lt;a href=&quot;https://paulschou.com/tools/xlate/&quot;&gt;base64的解码器&lt;/a&gt;就能还原，存在安全隐患。此文通过pass实现更安全的docker登录方式。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
      <category term="docker" scheme="https://majunyi.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ARM平台qnap用Docker部署aria2</title>
    <link href="https://majunyi.top/2019/03/12/aria2-docker-arm-qnap/"/>
    <id>https://majunyi.top/2019/03/12/aria2-docker-arm-qnap/</id>
    <published>2019-03-12T15:01:08.000Z</published>
    <updated>2019-04-23T06:19:14.988Z</updated>
    
    <content type="html"><![CDATA[<p>亦适用于其他64位的ARM平台（arm64v8）。<br><a id="more"></a><br>踩了些坑后发觉还是aria2+浏览器插件的方式更为方便灵活，如果喜欢ariaNg可在客户端运行。</p>
<h1 id="浏览器登录NAS"><a href="#浏览器登录NAS" class="headerlink" title="浏览器登录NAS"></a>浏览器登录NAS</h1><h1 id="设置aria2-conf"><a href="#设置aria2-conf" class="headerlink" title="设置aria2.conf"></a>设置aria2.conf</h1><p>在NAS中建立容器挂载的文件夹，我是在<code>Download</code>下建立<code>aria2</code>文件夹，然后其中又新建<code>downloads</code>和<code>config</code>。并在config中新建<code>aria2.conf</code>和<code>aria2.session</code>文件。<br>其中<code>aria2.conf</code>内容如下，把<code>YOUR_RPC_TOKEN</code>改成自己的secret，其他按实际情况自行定制，如PT则要把dht关掉，删去<code>enable-dht</code>之后的全部内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">save-session=/config/aria2.session</div><div class="line">input-file=/config/aria2.session</div><div class="line">save-session-interval=60</div><div class="line"></div><div class="line">dir=/downloads</div><div class="line"></div><div class="line">file-allocation=prealloc</div><div class="line">disk-cache=128M</div><div class="line"></div><div class="line">enable-rpc=true</div><div class="line">rpc-listen-port=6800</div><div class="line">rpc-allow-origin-all=true</div><div class="line">rpc-listen-all=true</div><div class="line"></div><div class="line">rpc-secret=YOUR_RPC_TOKEN</div><div class="line"></div><div class="line">max-concurrent-downloads=6</div><div class="line">max-connection-per-server=16</div><div class="line">min-split-size=10M</div><div class="line">split=16</div><div class="line">continue=true</div><div class="line">max-overall-download-limit=0</div><div class="line">max-overall-upload-limit=500K</div><div class="line"></div><div class="line">enable-dht=true</div><div class="line">bt-enable-lpd=true</div><div class="line">bt-request-peer-speed-limit=1000K</div><div class="line">bt-save-metadata=true</div><div class="line">bt-max-peers=0</div><div class="line">bt-require-crypto=true</div><div class="line">enable-peer-exchange=true</div><div class="line">listen-port=20000-30000</div><div class="line">dht-listen-port=30000-40000</div><div class="line">dht-file-path=/config/dht.dat</div><div class="line">dht-file-path6=/config/dht6.dat</div><div class="line">bt-tracker=udp://62.138.0.158:6969/announce,http://185.225.17.100:1337/announce,udp://51.15.4.13:1337/announce,udp://208.83.20.20:6969/announce,udp://128.1.203.23:8080/announce,udp://184.105.151.164:6969/announce,http://128.1.203.23:6961/announce,udp://51.15.40.114:80/announce,udp://5.2.79.219:1337/announce,udp://5.2.79.22:6969/announce,udp://51.15.76.199:6969/announce,udp://91.216.110.52:451/announce,udp://5.206.28.90:6969/announce,udp://51.38.184.185:6969/announce,udp://176.31.106.35:80/announce,udp://37.235.174.46:2710/announce,udp://188.246.227.212:80/announce,udp://95.211.168.204:2710/announce,udp://8.9.31.140:2000/announce,udp://212.47.227.58:6969/announce</div></pre></td></tr></table></figure></p>
<h1 id="安装Container-Station"><a href="#安装Container-Station" class="headerlink" title="安装Container Station"></a>安装Container Station</h1><p>App Center -&gt; All Apps -&gt; Container Station -&gt; Install</p>
<h1 id="获取arm版aria2镜像"><a href="#获取arm版aria2镜像" class="headerlink" title="获取arm版aria2镜像"></a>获取arm版aria2镜像</h1><p>用ssh登录NAS，然后执行以下命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull mjysci/aria2:arm64v8</div></pre></td></tr></table></figure></p>
<h1 id="获得用户的uid与gid"><a href="#获得用户的uid与gid" class="headerlink" title="获得用户的uid与gid"></a>获得用户的uid与gid</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id &lt;你的用户名&gt;</div></pre></td></tr></table></figure>
<h1 id="运行aria2容器"><a href="#运行aria2容器" class="headerlink" title="运行aria2容器"></a>运行aria2容器</h1><p>将下面命令中的<code>/share/Download/aria2/downloads</code>和<code>/share/Download/aria2/config</code>换成自己喜欢的位置。<code>-u=1000:100</code>是用户的uid和gid，换成你的id。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">docker run \</div><div class="line">  <span class="_">-d</span> \</div><div class="line">  --name aria2 \</div><div class="line">  -u=1000:100 \</div><div class="line">  -v /share/Download/aria2/config:/config \</div><div class="line">  -v /share/Download/aria2/downloads:/downloads \</div><div class="line">  -p 6800:6800 \</div><div class="line">  --restart=on-failure:5 \</div><div class="line">  mjysci/aria2:arm64v8</div></pre></td></tr></table></figure></p>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>安装<a href="https://chrome.google.com/webstore/detail/yaaw-for-chrome/dennnbdlpgjgbcjfgaohdahloollfgoc" target="_blank" rel="external">YAAW for Chrome</a>。点开图标后将设置中的<code>JSON-RPC Path</code>改成<code>http://token:YOUR_RPC_TOKEN@ip:6800/jsonrpc</code>。右键下载的设置是分开的，右键插件图标-&gt;Options-&gt;JSON-RPC，改成一样的地址。<br>喜欢AriaNg则可以使用<a href="https://github.com/mayswind/AriaNg/releases" target="_blank" rel="external">本地网页版AllInOne</a>或无需浏览器的<a href="https://github.com/mayswind/AriaNg-Native/releases" target="_blank" rel="external">应用版</a>。  </p>
<h1 id="过期资料备份"><a href="#过期资料备份" class="headerlink" title="过期资料备份"></a>过期资料备份</h1><h2 id="登录AriaNg"><a href="#登录AriaNg" class="headerlink" title="登录AriaNg"></a>登录AriaNg</h2><p>浏览器访问NAS:<code>&lt;yourip&gt;:6888</code>。<br>第一次登录会提示认证失败。<code>AriaNg 设置 -&gt; RPC -&gt; Aria2 RPC 密钥</code>处填上前面设置的<code>YOUR_RPC_TOKEN</code>并刷新。  </p>
<h2 id="QTS-UI设置步骤（可选）"><a href="#QTS-UI设置步骤（可选）" class="headerlink" title="QTS UI设置步骤（可选）"></a>QTS UI设置步骤（可选）</h2><h3 id="Create-Container-gt-Advanced-Settings下设置容器运行参数"><a href="#Create-Container-gt-Advanced-Settings下设置容器运行参数" class="headerlink" title="Create Container -&gt; Advanced Settings下设置容器运行参数"></a>Create Container -&gt; Advanced Settings下设置容器运行参数</h3><h4 id="Evironment"><a href="#Evironment" class="headerlink" title="Evironment"></a>Evironment</h4><p>添加Name为<code>SECRET</code>的环境变量，Value为你连接aria2要用到的RPC令牌，待会有用。</p>
<h4 id="Network-gt-Port-Forwarding"><a href="#Network-gt-Port-Forwarding" class="headerlink" title="Network -&gt; Port Forwarding"></a>Network -&gt; Port Forwarding</h4><p>Container的端口已自动填好，只需填入Host对应的端口，注意不要占用NAS的<code>80</code>和<code>8080</code>端口，如<code>6080</code>，<code>6888</code>。</p>
<h4 id="Shared-Folder"><a href="#Shared-Folder" class="headerlink" title="Shared Folder"></a>Shared Folder</h4><p>此处不要用默认的<code>New volume</code>栏，而是从<code>Volume from host</code>选择容器内<code>/downloads</code>和<code>/config</code>对应NAS的文件夹。</p>
<h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><h3 id="下载文件写权限问题"><a href="#下载文件写权限问题" class="headerlink" title="下载文件写权限问题"></a>下载文件写权限问题</h3><p>如果是<code>admin</code>用户就无此问题，但为了安全我是另建了管理员用户并禁用了<code>admin</code>。docker下创建的文件夹只有owner有写权限，管理员组没有。<br>首先，尝试过<a href="https://www.binss.me/blog/solve-docker-permission-problem-by-using-user-namespace/" target="_blank" rel="external">开启Docker User Namespace</a>，但qnap系统比较特殊，修改<code>subuid</code>和<code>subgid</code>无效，无法开启。此方法适用于主流系统，如raspbian和ubuntu等。<br>然后，尝试了<code>docker run -u &lt;youruid&gt;</code>选项，但从外部通过浏览器访问ariang出问题。权限不对。<br>可以添加<code>owncloud</code>之类的进行文件管理，但我的需求是从下载文件夹直接剪切到其他文件夹，而不是复制再通过文件管理删除。<br>目前解决方案是Container Station -&gt; aria2 -&gt; Terminal -&gt; 运行/bin/sh，为所有已下载文件添加组写权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 775 -R /data/_dl/*</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;亦适用于其他64位的ARM平台（arm64v8）。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://majunyi.top/tags/docker/"/>
    
      <category term="arm" scheme="https://majunyi.top/tags/arm/"/>
    
      <category term="nas" scheme="https://majunyi.top/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>ARM平台NAS（qnap TS-212P3）用Docker部署签到站</title>
    <link href="https://majunyi.top/2019/03/12/qiandao-docker-qnap-arm/"/>
    <id>https://majunyi.top/2019/03/12/qiandao-docker-qnap-arm/</id>
    <published>2019-03-12T03:44:42.000Z</published>
    <updated>2019-03-12T04:40:27.487Z</updated>
    
    <content type="html"><![CDATA[<p>亦适用于其他64位的ARM平台（arm64v8）。<br><a id="more"></a></p>
<h1 id="浏览器登录NAS"><a href="#浏览器登录NAS" class="headerlink" title="浏览器登录NAS"></a>浏览器登录NAS</h1><h1 id="安装Container-Station"><a href="#安装Container-Station" class="headerlink" title="安装Container Station"></a>安装Container Station</h1><p>App Center -&gt; All Apps -&gt; Container Station -&gt; Install</p>
<h1 id="安装qiandao"><a href="#安装qiandao" class="headerlink" title="安装qiandao"></a>安装qiandao</h1><p>Container Station -&gt; Create -&gt; 搜索qiandao -&gt; Docker Hub -&gt; 选择mjysci/qiandao -&gt; Install -&gt; 选择arm64v8<br>Create Container -&gt; Advanced Settings -&gt; Network -&gt; Port Forwarding<br>其中Host选NAS的空闲端口，如<code>3000</code>，Container则是<code>80</code>,Protocol是默认的<code>TCP</code>。</p>
<h1 id="配置站点管理员"><a href="#配置站点管理员" class="headerlink" title="配置站点管理员"></a>配置站点管理员</h1><p>浏览器访问NAS:<code>&lt;yourip&gt;:3000</code>并注册一个账户。<br>ssh登录NAS。<br>进入容器管理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it qiandao /bin/bash</div></pre></td></tr></table></figure></p>
<p>设置站点管理员。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ./chrole.py &lt;刚才注册的账户邮箱&gt; admin</div></pre></td></tr></table></figure></p>
<h1 id="配置邮件提醒"><a href="#配置邮件提醒" class="headerlink" title="配置邮件提醒"></a>配置邮件提醒</h1><p>先去<a href="https://www.mailgun.com/" target="_blank" rel="external">mailgun</a>注册免费账户，取得api key。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi config.py</div></pre></td></tr></table></figure></p>
<p>填写<code>mail_domain</code>和<code>mailgun_key</code>。<br>注：如果只是在内网用，无域名，则<code>mail_domain</code>填写<code>sandbox******.mailgun.org</code>，此域名可在<code>Messages-&gt;Domains</code>处取得，sandbox域名需指定<code>Authorized Recipients</code>，填自己的收件邮箱即可。<br>退出并重启容器。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;亦适用于其他64位的ARM平台（arm64v8）。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://majunyi.top/tags/docker/"/>
    
      <category term="arm" scheme="https://majunyi.top/tags/arm/"/>
    
      <category term="nas" scheme="https://majunyi.top/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>通过QEMU在x86计算机上搭建arm64版ubuntu开发环境</title>
    <link href="https://majunyi.top/2019/03/12/qemu-ubuntu-arm64/"/>
    <id>https://majunyi.top/2019/03/12/qemu-ubuntu-arm64/</id>
    <published>2019-03-12T02:17:23.000Z</published>
    <updated>2019-03-12T03:24:47.427Z</updated>
    
    <content type="html"><![CDATA[<p>没有arm64板子的临时解决办法。<br><a id="more"></a><br>其实手头上是有个四核A53的树莓派3B的，但raspbian只有32位版且另有他用不方便换系统。而其他的板子SoC都是32位的（全志A20，H8，BCM2835，BCM2836等），只好先用模拟器装arm64版的ubuntu16.04对付一下。  </p>
<h1 id="安装QEMU"><a href="#安装QEMU" class="headerlink" title="安装QEMU"></a>安装QEMU</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install -y qemu qemu-utils cloud-utils</div></pre></td></tr></table></figure>
<h1 id="下载镜像和UEFI固件"><a href="#下载镜像和UEFI固件" class="headerlink" title="下载镜像和UEFI固件"></a>下载镜像和UEFI固件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://cloud-images.ubuntu.com/releases/16.04/release/ubuntu-16.04-server-cloudimg-arm64-uefi1.img</div><div class="line">wget https://releases.linaro.org/components/kernel/uefi-linaro/latest/release/qemu64/QEMU_EFI.fd</div></pre></td></tr></table></figure>
<h1 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h1><p>复制本机rsa公钥。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>创建并编辑配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi cloud.txt</div></pre></td></tr></table></figure></p>
<p>填入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#cloud-config</div><div class="line">users:</div><div class="line">  - name: mjy</div><div class="line">    ssh-authorized-keys:</div><div class="line">      - ssh-rsa AAAAB...</div><div class="line">    sudo: [&apos;ALL=(ALL) NOPASSWD:ALL&apos;]</div><div class="line">    groups: sudo</div><div class="line">    shell: /bin/bash</div></pre></td></tr></table></figure></p>
<p>其中name为用户名，ssh-rsa为刚才复制的公钥，设置该用户使用sudo时无需输入密码。</p>
<h1 id="备份原始镜像（可选）"><a href="#备份原始镜像（可选）" class="headerlink" title="备份原始镜像（可选）"></a>备份原始镜像（可选）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp ubuntu-16.04-server-cloudimg-arm64-uefi1.img ubuntu-16.04-server-cloudimg-arm64-uefi1.img.orig</div></pre></td></tr></table></figure>
<h1 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">qemu-system-aarch64 \</div><div class="line">    -smp 2 \</div><div class="line">    -m 2048 \</div><div class="line">    -M virt \</div><div class="line">    -cpu cortex<span class="_">-a</span>57 \</div><div class="line">    -bios QEMU_EFI.fd \</div><div class="line">    -nographic \</div><div class="line">    -device virtio-blk-device,drive=image \</div><div class="line">    -drive <span class="keyword">if</span>=none,id=image,file=ubuntu-16.04-server-cloudimg-arm64-uefi1.img \</div><div class="line">    -device virtio-blk-device,drive=cloud \</div><div class="line">    -drive <span class="keyword">if</span>=none,id=cloud,file=cloud.img \</div><div class="line">    -device virtio-net-device,netdev=user0 \</div><div class="line">    -netdev user,id=user0 \</div><div class="line">    -redir tcp:2222::22</div></pre></td></tr></table></figure>
<p>参数解释</p>
<ul>
<li><code>-smp 2</code> - 双核</li>
<li><code>-m 2048</code> - 2G内存</li>
<li><code>-M virt</code> - 模拟通用QEMU ARM机器</li>
<li><code>-cpu cortex-a57</code> - 模拟的CPU型号，这里选择最常见的A57，其他型号可通过<code>qemu-system-aarch64 -M virt -cpu help</code>查询</li>
<li><code>-bios QEMU_EFI.fd</code> - BIOS固件</li>
<li><code>-nographic</code> - 无显示，故启动时的警告和花屏不用管，用ssh</li>
<li><code>-device virtio-blk-device,drive=image</code> - 创建名为”image”的虚拟块设备</li>
<li><code>-drive if=none,id=image,file=ubuntu-16.04-server-cloudimg-arm64-uefi1.img</code> - 用刚才的”image”设备和cloudimg镜像创建驱动器</li>
<li><code>-device virtio-blk-device,drive=cloud</code> - 创建名为”cloud”的虚拟块设备</li>
<li><code>-drive if=none,id=cloud,file=cloud.img</code> - 用刚才的”cloud”设备和配置好的cloud.img镜像创建驱动器</li>
<li><code>-device virtio-net-device,netdev=user0</code> - 创建名为”user0”的虚拟网络设备</li>
<li><code>-netdev user,id=user0</code> - 创建名为”user0”的用户模式网络栈</li>
<li><code>-redir tcp:2222::22</code> - 将虚拟机的22端口映射到本机的2222端口<br>注：第一次启动时间会长一些。  </li>
</ul>
<h1 id="ssh连接虚拟机"><a href="#ssh连接虚拟机" class="headerlink" title="ssh连接虚拟机"></a>ssh连接虚拟机</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p 2222 mjy@localhost</div></pre></td></tr></table></figure>
<h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="error-no-such-device-root"><a href="#error-no-such-device-root" class="headerlink" title="error: no such device: root"></a>error: no such device: root</h2><p>其实不按键盘也能正常启动，是<a href="https://bugs.launchpad.net/cloud-images/+bug/1726476" target="_blank" rel="external">ubuntu镜像的bug</a>，可通过<code>sudo update-grub</code>解决。</p>
<h2 id="perl-warning-Please-check-that-your-locale-settings"><a href="#perl-warning-Please-check-that-your-locale-settings" class="headerlink" title="perl: warning: Please check that your locale settings"></a>perl: warning: Please check that your locale settings</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/default/locale</div></pre></td></tr></table></figure>
<p>添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LANGUAGE=en_US.UTF-8</div><div class="line">LC_ALL=en_US.UTF-8</div></pre></td></tr></table></figure></p>
<h2 id="unable-to-resolve-host-ubuntu"><a href="#unable-to-resolve-host-ubuntu" class="headerlink" title="unable to resolve host ubuntu"></a>unable to resolve host ubuntu</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/hosts</div></pre></td></tr></table></figure>
<p>在localhost后面添加ubuntu。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 localhost ubuntu</div></pre></td></tr></table></figure></p>
<h2 id="扩展虚拟机磁盘空间"><a href="#扩展虚拟机磁盘空间" class="headerlink" title="扩展虚拟机磁盘空间"></a>扩展虚拟机磁盘空间</h2><p>默认镜像的2G比较小，在host用<code>qemu-img</code>加多10G。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qemu-img resize ubuntu-16.04-server-cloudimg-arm64-uefi1.img +10G</div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnx-software.com/2016/05/10/how-to-run-ubuntu-16-04-aarch64-64-bit-arm-cloud-images-on-your-intelamd-linux-computer/" target="_blank" rel="external">How to Run Ubuntu 16.04 Aarch64 (64-bit ARM) Cloud Images on Your Intel/AMD Linux Computer with QEMU</a><br><a href="https://helpmanual.io/help/qemu-system-aarch64/" target="_blank" rel="external">qemu-system-aarch64 -h</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没有arm64板子的临时解决办法。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
      <category term="arm" scheme="https://majunyi.top/tags/arm/"/>
    
      <category term="qemu" scheme="https://majunyi.top/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>树莓派（arm32v7）用Docker部署签到站</title>
    <link href="https://majunyi.top/2019/03/11/rpi-docker-qiandao/"/>
    <id>https://majunyi.top/2019/03/11/rpi-docker-qiandao/</id>
    <published>2019-03-11T13:05:07.000Z</published>
    <updated>2019-03-11T13:33:24.205Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/binux/qiandao" target="_blank" rel="external">qiandao</a>是基于HAR的自动签到框架，官方提供的docker镜像是x86的，树莓派用不了。所以我build了个arm32v7的镜像，除了树莓派2，3外，亦适用于其他32位的ARM平台。<br><a id="more"></a><br>注：树莓派3B之后用<a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2837/README.md" target="_blank" rel="external">BCM2837</a>的板子实际上是64位arm64v8的，但Raspbian为了兼容性问题依旧是32位，故编译环境依旧为32位。<br>关于树莓派的硬件改进历史可以参考<a href="https://elinux.org/RPi_HardwareHistory" target="_blank" rel="external">此处</a>。通过外观基本就能判断版本，如果仍不确定可以通过<code>cat /sys/firmware/devicetree/base/model</code>命令查看型号。</p>
<h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>安装并启动docker，测试无误后设为自启动。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl <span class="_">-s</span>SL https://get.daocloud.io/docker | sh</div><div class="line">sudo service docker start</div><div class="line">sudo systemctl <span class="built_in">enable</span> docker</div></pre></td></tr></table></figure></p>
<p>将当前用户加入docker组并重新登录，这样就不用sudo来跑docker了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo usermod <span class="_">-a</span>G docker pi</div><div class="line">su - pi</div></pre></td></tr></table></figure></p>
<h1 id="下载qiandao的镜像"><a href="#下载qiandao的镜像" class="headerlink" title="下载qiandao的镜像"></a>下载qiandao的镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull mjysci/qiandao:arm32v7</div></pre></td></tr></table></figure>
<h1 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /home/pi/volume</div><div class="line">docker run <span class="_">-d</span> -p 80:80 --name qiandao --restart=on-failure:5 -v /home/pi/volume:/usr/src/app/volume mjysci/qiandao:arm32v7</div></pre></td></tr></table></figure>
<h1 id="配置站点管理员"><a href="#配置站点管理员" class="headerlink" title="配置站点管理员"></a>配置站点管理员</h1><p>浏览器访问树莓派ip地址并注册一个账户。<br>进入容器管理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it qiandao /bin/bash</div></pre></td></tr></table></figure></p>
<p>设置站点管理员。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ./chrole.py &lt;刚才注册的账户邮箱&gt; admin</div></pre></td></tr></table></figure></p>
<p>退出容器管理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">exit</span></div></pre></td></tr></table></figure></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/binux/qiandao/wiki/Docker%E9%83%A8%E7%BD%B2%E7%AD%BE%E5%88%B0%E7%AB%99%E6%95%99%E7%A8%8B" target="_blank" rel="external">Docker部署签到站教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/binux/qiandao&quot;&gt;qiandao&lt;/a&gt;是基于HAR的自动签到框架，官方提供的docker镜像是x86的，树莓派用不了。所以我build了个arm32v7的镜像，除了树莓派2，3外，亦适用于其他32位的ARM平台。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://majunyi.top/tags/docker/"/>
    
      <category term="rpi" scheme="https://majunyi.top/tags/rpi/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下安装与管理多个Linux内核</title>
    <link href="https://majunyi.top/2019/03/05/install-manage-linux-kernel-ubuntu/"/>
    <id>https://majunyi.top/2019/03/05/install-manage-linux-kernel-ubuntu/</id>
    <published>2019-03-05T00:37:09.000Z</published>
    <updated>2019-03-05T01:46:37.653Z</updated>
    
    <content type="html"><![CDATA[<p>亦适用于Linux Mint。<br><a id="more"></a></p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>多系统且系统间/boot独立的需进入BIOS将启动顺序改为准备折腾的系统所在硬盘。没有共享/boot是因为当其中一个损坏而又急着用时可以用备用系统的/boot进入生产力系统。如果只是单系统跳过此步。<br>安装自4.16后linux-headers对<a href="http://security.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4.3_amd64.deb" target="_blank" rel="external">libssl1.1</a>的依赖。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install libssl1.1_1.1.0g-2ubuntu4.3_amd64.deb</div></pre></td></tr></table></figure></p>
<h1 id="安装Linux内核"><a href="#安装Linux内核" class="headerlink" title="安装Linux内核"></a>安装Linux内核</h1><h2 id="使用工具安装"><a href="#使用工具安装" class="headerlink" title="使用工具安装"></a>使用工具安装</h2><p>不少人都推荐<a href="https://github.com/teejee2008/ukuu" target="_blank" rel="external">ukuu</a>，不过最近该作者<a href="https://teejeetech.in/2019/01/20/ukuu-v19-01/" target="_blank" rel="external">转为收费闭源了</a>，旧的开源版不再更新且<a href="https://github.com/teejee2008/ukuu/issues/49" target="_blank" rel="external">存在连接问题</a>。不推荐使用。<br>这里推荐<a href="https://github.com/pimlie/ubuntu-mainline-kernel.sh" target="_blank" rel="external">ubuntu-mainline-kernel脚本</a>。<br>安装指定版本内核。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ubuntu-mainline-kernel.sh -i 4.19.26</div></pre></td></tr></table></figure></p>
<p>更新bootloader并重启。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo update-grub2</div><div class="line">sudo reboot</div></pre></td></tr></table></figure></p>
<h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>在<a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="external">kernel-ppa</a>处选择自己需要的版本，然后选择架构下载对应的deb包并按页面顺序依次安装headers_all, headers_generic, image, modules包。注意<code>lowlatency</code>是针对低延迟设备的，普通PC选<code>generic</code>即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i *.deb</div></pre></td></tr></table></figure></p>
<p>更新bootloader并重启。</p>
<h2 id="从源码编译安装"><a href="#从源码编译安装" class="headerlink" title="从源码编译安装"></a>从源码编译安装</h2><p><a href="https://www.cyberciti.biz/tips/compiling-linux-kernel-26.html" target="_blank" rel="external">参考这篇文章</a></p>
<h1 id="删除多余内核"><a href="#删除多余内核" class="headerlink" title="删除多余内核"></a>删除多余内核</h1><p>注：待删除内核不能为当前使用内核。</p>
<h2 id="使用工具删除"><a href="#使用工具删除" class="headerlink" title="使用工具删除"></a>使用工具删除</h2><p>推荐<a href="http://byobu.co/" target="_blank" rel="external">byobu</a>里面自带的purge-old-kernels，其中keep参数是指定保留的内核数，默认为2。</p>
<pre><code class="bash">sudo apt install byobu
sudo purge-old-kernels --keep 3
</code></pre>
<p>也可以使用<code>ubuntu-mainline-kernel.sh -u</code>来指定版本逐个删除。</p>
<h2 id="手动删除"><a href="#手动删除" class="headerlink" title="手动删除"></a>手动删除</h2><p>用<code>sudo dpkg --purge</code>指定版本headers_all, headers_generic, image, modules的deb包，删除二进制及配置文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;亦适用于Linux Mint。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://majunyi.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux Mint 18.2版本升级至19.1</title>
    <link href="https://majunyi.top/2019/03/04/upgrade-linux-mint/"/>
    <id>https://majunyi.top/2019/03/04/upgrade-linux-mint/</id>
    <published>2019-03-04T13:21:42.000Z</published>
    <updated>2019-03-04T14:31:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>用Update Manager进行逐步升级，timeshift可跳过。<br><a id="more"></a></p>
<h1 id="升级至18-3"><a href="#升级至18-3" class="headerlink" title="升级至18.3"></a>升级至18.3</h1><p>打开Update Manager，Edit——Upgrade to Linux Mint 18.3 Sylvia。如果是其他版本也是同样的位置，但升级版本不一样，每次升0.1。<br>完成后重启。  </p>
<h1 id="升级至19"><a href="#升级至19" class="headerlink" title="升级至19"></a>升级至19</h1><h2 id="建立系统快照（可选）"><a href="#建立系统快照（可选）" class="headerlink" title="建立系统快照（可选）"></a>建立系统快照（可选）</h2><p>官方强制要求要建立系统快照，但如果像我这样mint只是备用系统，用来折腾不怕搞坏则此步可跳过。<br>以下附上建立快照的步骤：<br>安装timeshift<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install timeshift</div></pre></td></tr></table></figure></p>
<p>Menu——Timeshift打开快照安装向导，选择快照类型（默认RSYNC），选择存储位置，完成向导。<br>Create建立快照。</p>
<h2 id="将显示管理器切换为LightDM"><a href="#将显示管理器切换为LightDM" class="headerlink" title="将显示管理器切换为LightDM"></a>将显示管理器切换为LightDM</h2><p>检查默认显示管理器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/X11/default-display-manager</div></pre></td></tr></table></figure></p>
<p>如果输出为<code>/usr/sbin/lightdm</code>则可跳过下面安装并切换LightDM的步骤。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install lightdm lightdm-settings slick-greeter</div></pre></td></tr></table></figure></p>
<p>安装过程中选择默认显示管理器为lightdm。<br>删除MDM。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt remove --purge mdm mint-mdm-themes*</div></pre></td></tr></table></figure></p>
<p>配置并重启。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo dpkg-reconfigure lightdm</div><div class="line">sudo reboot</div></pre></td></tr></table></figure></p>
<h2 id="升级系统"><a href="#升级系统" class="headerlink" title="升级系统"></a>升级系统</h2><p>安装mintupgrade。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install mintupgrade</div></pre></td></tr></table></figure></p>
<p>（可选）如果前面没有创建快照，执行以下命令以跳过timeshift检查。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo touch /etc/timeshift.json</div></pre></td></tr></table></figure></p>
<p>检查系统。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mintupgrade check</div></pre></td></tr></table></figure></p>
<p>检查过程中会给出依赖有冲突的包，用<code>apt remove</code>删掉即可，升级后再装回去。值得注意的是我之前还装了ros，删掉ros。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get remove ros-*</div></pre></td></tr></table></figure></p>
<p>另外建议想装<a href="http://www.ros.org/install/" target="_blank" rel="external">ROS</a>的老老实实在Ubuntu上弄，在Mint上经过一番折腾后也能用，但没必要把时间花在搭建环境的坑上。<br>预先下载好升级所需包。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mintupgrade download</div></pre></td></tr></table></figure></p>
<p>升级。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mintupgrade upgrade</div></pre></td></tr></table></figure></p>
<h1 id="升级至19-1"><a href="#升级至19-1" class="headerlink" title="升级至19.1"></a>升级至19.1</h1><p>此时如果是装了第三方显卡驱动可能桌面会崩溃并进入低分辨率安全模式，先不管它。<br>每次升级后源会重置，打开Software Sources改成国内源。<br>打开Update Manager，Edit——Upgrade to Linux Mint 19.1 Tessa。  </p>
<h1 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h1><p>解决桌面崩溃问题，重装nvidia显卡驱动。</p>
<pre><code class="bash">apt-get install --reinstall nvidia-415
</code></pre>
<p>用的是这个源<code>sudo add-apt-repository ppa:graphics-drivers/ppa</code>。<br>如果还是不行就装<code>nvidia-396</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Update Manager进行逐步升级，timeshift可跳过。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="https://majunyi.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>极1s（hc5661）刷潘多拉固件</title>
    <link href="https://majunyi.top/2019/01/13/hc5661-pandorabox/"/>
    <id>https://majunyi.top/2019/01/13/hc5661-pandorabox/</id>
    <published>2019-01-13T02:00:49.000Z</published>
    <updated>2020-01-24T12:01:03.189Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了R6220后顺便把吃灰的极1s也更新一下，刷19.01潘多拉，功能和以前一样，以路由客户端形式实现科学上网专用路由。<br><a id="more"></a></p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>由于之前已经申请root并刷了<a href="https://breed.hackpascal.net/breed-mt7620-hiwifi-hc5761.bin" target="_blank" rel="external">Breed</a>，目前在用的是<a href="https://github.com/rssnsj/openwrt-hc5x61/tree/chaos_calmer" target="_blank" rel="external">rssnsj</a>的<a href="http://rssn.cn/roms/" target="_blank" rel="external">固件</a>，所以准备工作省了。<br>需注意极1s先后有两个版本，早期和极2芯片一致用<a href="https://www.mediatek.com/products/homeNetworking/mt7620n-a" target="_blank" rel="external">MT7620A</a>的hc5661和后续缩水用<a href="https://www.mediatek.com/products/homeNetworking/mt7628k-n-a" target="_blank" rel="external">MT7628</a>的hc5661a，从MTK官方介绍可知主要是缩掉了硬件网络加速(HWNAT)和存储加速，但软件上增加了AES128/256的加速。二者uboot和固件均不一样，不能混用。想确定版本见路由底部标签，另外ssh登录路由后通过<code>cat /proc/cpuinfo</code>也可进一步确认。  </p>
<h1 id="刷潘多拉固件"><a href="#刷潘多拉固件" class="headerlink" title="刷潘多拉固件"></a>刷潘多拉固件</h1><p>长按reset并开机，访问<code>192.168.1.1</code>进入breed。<br>选择<a href="https://downloads.pangubox.com/pandorabox/19.01/targets/ralink/mt7620/PandoraBox-ralink-mt7620-hc5661-2018-12-31-git-4b6a3d5ca-squashfs-sysupgrade.bin" target="_blank" rel="external">潘多拉19.01固件</a>并上传即可。</p>
<h1 id="设置以路由模式桥接"><a href="#设置以路由模式桥接" class="headerlink" title="设置以路由模式桥接"></a>设置以路由模式桥接</h1><p>由于是科学上网专用路由，故无需像<a href="https://majunyi.top/2019/01/08/r6220-relay-bridge/">之前R6220那样</a>弄成中继桥，简单不少。<br>无线——扫描——加入网络，输入主路由密码，其他配置默认并提交。<br>接口，添加接口，协议选AP，设置无线名称和密码，网络选lan，提交。这样方便无线设备也可连上此路由。<br>此时笔记本通过LAN和路由相连，路由通过2.4G无线与主路由连接<a href="http://www.speedtest.cn/" target="_blank" rel="external">测速</a>下行为45.78Mbps。</p>
<h1 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h1><p>这里主要参考<a href="https://cokebar.info/archives/664" target="_blank" rel="external">cokebar的这篇文章</a>，讲得很详细。但安装部分注意有改动：<br>系统——软件包处搜索并安装<code>luci-app-shadowsocks</code>，opkg会自动解决依赖装上<code>shadowsocks-libev</code>相关包。<br>同理装上<code>luci-app-ChinaDNS</code>。<br>但潘多拉的源里并未包含<code>DNS-forwarder</code>，需要到作者aa65535的<a href="https://github.com/aa65535/openwrt-dns-forwarder" target="_blank" rel="external">项目页面</a> 下载<a href="https://github.com/aa65535/openwrt-dns-forwarder/releases/download/v1.1.1/dns-forwarder_1.1.1-1_ramips_24kec.ipk" target="_blank" rel="external">dns-forwarder</a>和<a href="http://openwrt-dist.sourceforge.net/packages/luci/luci-app-dns-forwarder_1.6.2-1_all.ipk" target="_blank" rel="external">luci-app-dns-forwarder</a><br>scp上传到路由的root文件夹处。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp *.ipk root@192.168.1.1:/root</div></pre></td></tr></table></figure></p>
<p>ssh连上路由，需注意由于pandorabox改了mt7620的架构名称，直接opkg install会显示架构不支持，需对<code>opkg.conf</code>进行更改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/opkg.conf</div></pre></td></tr></table></figure></p>
<p>在文件末尾添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arch all 100</div><div class="line">arch ramips 200</div><div class="line">arch ramips_24kec 300</div><div class="line">arch mipsel_24kec_dsp 400</div></pre></td></tr></table></figure></p>
<p>安装dns-forwarder。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">opkg update</div><div class="line">opkg install dns-forwarder_1.1.1-1_ramips_24kec.ipk luci-app-dns-forwarder_1.6.2-1_all.ipk</div></pre></td></tr></table></figure></p>
<p>之后从<code>二、shadowsocks 配置</code>照着配置即可。要点如下：  </p>
<h2 id="Shadowsocks配置"><a href="#Shadowsocks配置" class="headerlink" title="Shadowsocks配置"></a>Shadowsocks配置</h2><p><code>服务-影梭-服务器管理</code>处填写服务器配置。<br><code>访问控制</code>处被忽略IP列表为<code>ChinaDNS路由表</code>。<br><code>常规设置</code>处<code>透明代理-主服务器</code>选择刚才填好的服务器。</p>
<h2 id="DNS配置"><a href="#DNS配置" class="headerlink" title="DNS配置"></a>DNS配置</h2><p><code>服务-DNS转发</code>处<code>启用</code>，监听端口<code>5311</code>，监听地址<code>127.0.0.1</code>。<br><code>服务-ChinaDNS</code>处<code>启用</code>，本地端口<code>5353</code>，上游服务器<code>223.5.5.5,127.0.0.1#5311</code>。<br><code>网络-DHCP/DNS</code>处DNS转发<code>127.0.0.1#5353</code>，HOSTS和解析文件处<code>忽略解析文件</code><br>注：解析文件的默认位置是<code>/tmp/resolv.conf.auto</code>。    </p>
<p>最后在相同条件下测速下行47.49Mbps，居然比设置科学上网前还稍快，属正常波动范围，可认为开启三个服务后低负载情况下对路由性能影响甚微。<br>高负载目前不好测试，因为影响因素太多。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了R6220后顺便把吃灰的极1s也更新一下，刷19.01潘多拉，功能和以前一样，以路由客户端形式实现科学上网专用路由。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="firmware" scheme="https://majunyi.top/tags/firmware/"/>
    
      <category term="router" scheme="https://majunyi.top/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>R6220采用中继桥实现无线桥接</title>
    <link href="https://majunyi.top/2019/01/08/r6220-relay-bridge/"/>
    <id>https://majunyi.top/2019/01/08/r6220-relay-bridge/</id>
    <published>2019-01-08T03:35:23.000Z</published>
    <updated>2019-01-13T02:35:40.759Z</updated>
    
    <content type="html"><![CDATA[<p>htpc不能直连NAS和咸鱼有什么区别？采用中继桥实现同一网段后下行速度由100Mbps降为75Mbps，播放4K烤鸭测试视频不卡，可以接受。<br><a id="more"></a><br><a href="https://majunyi.top/2019/01/06/r6220-breed-pandora/">前情提要</a>，虽然远程桌面非刚需，但htpc无法直连主路由网段的NAS不能接受。还是需要桥接把副路由连接设备和主路由放在同一网段。  </p>
<h1 id="安装relay协议"><a href="#安装relay协议" class="headerlink" title="安装relay协议"></a>安装relay协议</h1><p>潘多拉默认未带，不过其应用层是和openwrt及luci兼容的，可装<a href="https://openwrt.org/packages/pkgdata/luci-proto-relay" target="_blank" rel="external">luci-proto-relay</a><br>ssh连上路由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@192.168.1.1</div></pre></td></tr></table></figure></p>
<p>更新并安装luci-proto-relay  </p>
<pre><code>opkg update
opkg install luci-proto-relay
</code></pre><p>注：潘多拉的web ui和openwrt基本一样，其实自带软件包管理项，不想输命令可登录web管理——系统——软件包处搜索并安装。  </p>
<h1 id="设置中继桥"><a href="#设置中继桥" class="headerlink" title="设置中继桥"></a>设置中继桥</h1><h2 id="修改LAN"><a href="#修改LAN" class="headerlink" title="修改LAN"></a>修改LAN</h2><p>接口——LAN，地址修改为和主路由不同的网段，如<code>192.168.2.1</code>。禁用DHCP。<br>将计算机连路由的接口取消自动获取IP, 改成静态IP<code>192.168.2.10</code>，默认网关<code>192.168.2.1</code>。断开与路由的连接然后重连。</p>
<h2 id="以无线客户端模式加入主路由网络"><a href="#以无线客户端模式加入主路由网络" class="headerlink" title="以无线客户端模式加入主路由网络"></a>以无线客户端模式加入主路由网络</h2><p>无线——扫描——加入网络，填入密码后记得<strong>把防火墙区域改成lan</strong>。    </p>
<h2 id="添加桥接接口"><a href="#添加桥接接口" class="headerlink" title="添加桥接接口"></a>添加桥接接口</h2><p>接口，添加接口，协议选<code>中继桥</code>（Relay bridge）。<br>在新接口设置界面勾选<code>lan</code>和<code>wwan</code>。<br>重启路由。  </p>
<p>注：以上步骤参考自官方的<a href="https://openwrt.org/docs/guide-user/network/wifi/relay_configuration#setup_with_luci_gui" target="_blank" rel="external">luci界面设置中继桥教程</a>。</p>
<h1 id="htpc连NAS"><a href="#htpc连NAS" class="headerlink" title="htpc连NAS"></a>htpc连NAS</h1><p>此步非必须。只是现在网络发现处NAS只出现在多媒体类别下，而不在计算机类别。<br>程序与功能——启用或关闭Windows功能——勾选SMB 1.0，重启win10。  </p>
<h1 id="备用资料"><a href="#备用资料" class="headerlink" title="备用资料"></a>备用资料</h1><p>附上R6220原版固件资料以备不时之需：<br><a href="https://www.netgear.com/support/product/R6220.aspx#download" target="_blank" rel="external">R6220官方支持页面</a><br><a href="https://kb.netgear.com/24108/How-do-I-configure-my-Nighthawk-router-as-a-wireless-repeater" target="_blank" rel="external">Netgear设置wireless repeater步骤</a><br><a href="http://www.downloads.netgear.com/files/GDC/R6220/R6220-V1.1.0.80_1.0.1.zip" target="_blank" rel="external">R6220官方固件V1.1.0.80_1.0.1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;htpc不能直连NAS和咸鱼有什么区别？采用中继桥实现同一网段后下行速度由100Mbps降为75Mbps，播放4K烤鸭测试视频不卡，可以接受。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Netgear R6220刷Breed和pandorabox固件</title>
    <link href="https://majunyi.top/2019/01/06/r6220-breed-pandora/"/>
    <id>https://majunyi.top/2019/01/06/r6220-breed-pandora/</id>
    <published>2019-01-06T14:21:52.000Z</published>
    <updated>2019-01-19T07:19:05.587Z</updated>
    
    <content type="html"><![CDATA[<p>刷了Breed后更新固件变得十分简单和安全，采用潘多拉固件不用担心硬件版本不同带来的分区问题。<br><a id="more"></a></p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>FAT32格式的U盘<br>下载<a href="https://breed.hackpascal.net/breed-mt7621-r6220.bin" target="_blank" rel="external">适配R6220的Breed</a>，并拷入U盘<br>下载<a href="https://downloads.pangubox.com/pandorabox/19.01/targets/ralink/mt7621/PandoraBox-ralink-mt7621-netgear-r6220-2019-01-01-git-3e8866933-squashfs-sysupgrade.bin" target="_blank" rel="external">适配R6220的潘多拉19.01</a>  </p>
<h1 id="刷Breed"><a href="#刷Breed" class="headerlink" title="刷Breed"></a>刷Breed</h1><p>Breed是用来替换官方Bootloader的，Web界面操作方便安全，<a href="https://www.right.com.cn/forum/thread-161906-1-1.html" target="_blank" rel="external">作者帖子</a>。<br>win10需开启telnet：<br>控制面板——程序和功能——启用或关闭Windows功能——Telnet客户端  </p>
<p>开启R6220的telnet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://10.0.0.1/setup.cgi?todo=debug</div></pre></td></tr></table></figure></p>
<p>连接R6220<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">telnet 10.0.0.1</div></pre></td></tr></table></figure></p>
<p>查看U盘挂载路径并进入，通常是U<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ls /mnt/shares</div><div class="line">cd /mnt/shares/U</div></pre></td></tr></table></figure></p>
<p>读取mtd分区表，备份eeprom<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat /proc/mtd</div><div class="line">dd if=/dev/mtd10 of=./mtd10.bin</div></pre></td></tr></table></figure></p>
<p>刷Breed<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mtd_write write breed-mt7621-r6220.bin Bootloader</div></pre></td></tr></table></figure></p>
<h1 id="刷PandoraBox固件"><a href="#刷PandoraBox固件" class="headerlink" title="刷PandoraBox固件"></a>刷PandoraBox固件</h1><p>选择PandoraBox主要是因为其“使用芯片厂家的闭源驱动,性能与稳定性比开源驱动有较大提升”，另外还有若干特性，详见<a href="https://bbs.pangubox.com/forum.php?mod=viewthread&amp;tid=561&amp;extra=" target="_blank" rel="external">官方介绍</a>。  </p>
<p>路由断电，长按reset开机，电源规律闪烁后访问192.168.1.1进入Breed Web恢复控制台，点固件更新，选择刚才下载的潘多拉固件上传，耐心等待路由更新重启。<br>访问192.168.1.1进入潘多拉管理界面，默认用户root，密码admin。  </p>
<h1 id="设置路由客户端模式"><a href="#设置路由客户端模式" class="headerlink" title="设置路由客户端模式"></a>设置路由客户端模式</h1><p><a href="https://majunyi.top/2019/01/05/choose-router/">之前的文章</a>提到将R6220作为htpc无线网卡时发现官方固件无法进行无线桥接。刷成潘多拉后按之前用openwrt的经验：  </p>
<ol>
<li>点“无线”，删掉默认的两个Master  </li>
<li>用5G无线扫描，加入主路由网络  </li>
<li>填入密码，其他设置默认  </li>
</ol>
<p>应用设置后通过网线连接R6220的htpc可以正常上网，测速达到100Mbps上下，看cbox的直播和爱奇艺的高清电影再无卡顿。<br>如果想让R6220也扩展无线信号可以将没用上的2.4G无线添加个AP接口即可。<br>如果离主路由较远，5G连接不稳定也可以将2.4G用来收，5G用来发，看需求如何了，但不要将同一个无线芯片用来同时收发，否则理论速率减半，降速严重。另外某些老旧设备或IoT只有2.4G，考虑兼容性还是推荐用2.4G作为AP。<br>科学上网设置可参考<a href="https://majunyi.top/2019/01/13/hc5661-pandorabox/">极1s这篇文章</a>。不同之处：<br>R6220的SoC是MT7621ST，架构是<a href="https://wikidevi.com/wiki/MIPS32#MIPS32_1004Kc_.2F_1004Kf" target="_blank" rel="external">MIPS32 1004Kc</a>，一开始装了mipsel_mips32的<code>dns-forwarder</code>但并不能正常工作。尝试<a href="https://dl.bintray.com/aa65535/openwrt/dns-forwarder/1.2.1/OpenWrt/ramips/:dns-forwarder_1.2.1-1_ramips_24kec.ipk" target="_blank" rel="external">rampis_24kec</a>可以兼容。需注意要先改<code>opkg.conf</code>添加兼容架构，不想输命令可以在luci中<code>系统-软件包-opkg配置-配置</code>处添加：  </p>
<pre><code>arch all 100
arch mipsel_1004kc_dsp 200
arch ramips 300
arch mipsel_24kc 400
arch ramips_24kec 500
</code></pre><p>其他步骤一致。<br>简单测速下行61.07Mbps，比极1s要好不少。  </p>
<h1 id="中继桥模式"><a href="#中继桥模式" class="headerlink" title="中继桥模式"></a>中继桥模式</h1><p>但这里有个问题，这并非桥接模式，而是隔了个路由组了个子网，其他机器无法直连R6220背后的htpc。潘多拉固件的无线接口模式中，如果不选Client选WDS，则会提示需要两个路由的芯片都是雷凌的才行，而我的主路由是博通的。通过查阅官方文档<a href="https://oldwiki.archive.openwrt.org/doc/howto/clientmode" target="_blank" rel="external">Client Mode Wireless</a>可知，我现有的是Routed Client Mode，而Bridged Client Mode需要博通的芯片……而用着BCM4706的华硕是主路由，且对openwrt兼容性不好，不过测试时作为副路由用merlin的桥接倒是很顺利。<br>剩下只有Bridged Client Mode (with relayd)这一种了，通过中继的方式模拟出桥接的效果。具体操作方式<a href="https://openwrt.org/docs/guide-user/network/wifi/relay_configuration#setup_with_luci_gui" target="_blank" rel="external">见此处</a>。但这种方式一大弊端就是降速。比起现在几乎不用的远程桌面直连htpc，似乎速度更重要。<a href="https://majunyi.top/2019/01/08/r6220-relay-bridge/">以后再弄吧</a>。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刷了Breed后更新固件变得十分简单和安全，采用潘多拉固件不用担心硬件版本不同带来的分区问题。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="firmware" scheme="https://majunyi.top/tags/firmware/"/>
    
  </entry>
  
</feed>
