<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>名实合为</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://majunyi.top/"/>
  <updated>2018-11-23T01:15:06.993Z</updated>
  <id>https://majunyi.top/</id>
  
  <author>
    <name>mjy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>升级cloudatcost的ubuntu至18.04</title>
    <link href="https://majunyi.top/2018/11/19/cac-upgrade-ubuntu/"/>
    <id>https://majunyi.top/2018/11/19/cac-upgrade-ubuntu/</id>
    <published>2018-11-19T07:10:09.000Z</published>
    <updated>2018-11-23T01:15:06.993Z</updated>
    
    <content type="html"><![CDATA[<p>升级发行版在本地没什么难度，不过远程通过ssh还是有些坑需要避免。<br><a id="more"></a><br>这个<a href="http://t.cn/E2gkWbY" target="_blank" rel="external">cac</a>的vps前一阵抽风，恢复后别说内容了，整个server都消失了。除了数据没保障外服务器也不稳定，io性能很差，且条款随意修改，现在需要年付9刀的管理费（不过收了管理费后服务质量稍有提升，但ticket仍然万年无回复），不知道什么时候会跑路。若不是专用机场部署简单且流量不限的话真不如扔掉，想要稳定又廉价的可以上<a href="http://t.cn/EwLt7Zp" target="_blank" rel="external">搬瓦工</a>年付19.99刀的车。  </p>
<p>原来为了稳定所以是用centos7的系统只搭机场。现在决定装ubuntu作为测试用服务器玩新东西。但cac只提供了老掉牙的14.04。故需要升级系统。</p>
<h1 id="升级内核开启bbr"><a href="#升级内核开启bbr" class="headerlink" title="升级内核开启bbr"></a>升级内核开启bbr</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh</div><div class="line">sudo ./bbr.sh</div></pre></td></tr></table></figure>
<p>内核选4.15.18。之前升完系统才升内核还选了最新的4.19.2结果翻车了。所以这里先升内核确保系统没挂且能正常开启bbr。升完后一般就会自动开启，运行<code>lsmod | grep bbr</code>查看结果。</p>
<h1 id="升级发行版"><a href="#升级发行版" class="headerlink" title="升级发行版"></a>升级发行版</h1><p>远程升级需要注意ssh连接的稳定性问题，和本地不一样，需要用神器tmux以便ssh不幸断开后任务仍会继续在后台执行。</p>
<p>另外一种方法是ssh设置防呆，在服务器端执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/ssh/sshd_config</div><div class="line">文件末尾添加ClientAliveInterval 60</div><div class="line">systemctl restart ssh     //需注意14.04用的是upstart, 15.04之后才是systemctl</div></pre></td></tr></table></figure></p>
<p>不过鉴于我国的特殊国情，防呆防不了断开，特别是晚上。所以还是要用tmux：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tmux new-session <span class="_">-s</span> ug</div><div class="line">apt update &amp;&amp; apt dist-upgrade</div><div class="line">apt-get autoremove  //删掉旧的内核免得/boot区满了</div><div class="line"><span class="keyword">do</span>-release-upgrade</div></pre></td></tr></table></figure>
<p>如果中途断开就用ssh重连，然后<code>tmux a -t ug</code>加载屏幕继续查看。升级完成后用<code>lsb_release -a</code>查看系统版本。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;升级发行版在本地没什么难度，不过远程通过ssh还是有些坑需要避免。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vps" scheme="https://majunyi.top/tags/vps/"/>
    
      <category term="ubuntu" scheme="https://majunyi.top/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>无人车开发工程师第一学期环境搭建</title>
    <link href="https://majunyi.top/2017/09/11/carnd-env/"/>
    <id>https://majunyi.top/2017/09/11/carnd-env/</id>
    <published>2017-09-11T03:55:06.000Z</published>
    <updated>2017-09-11T04:26:50.576Z</updated>
    
    <content type="html"><![CDATA[<p>第一学期项目主要用到python，opencv，tensorflow等，课程中提供的一键安装配置文件中各组件的版本太旧，再加上国内特殊网络环境的限制，故默认搭建方案并不适用。<br><a id="more"></a></p>
<p>虽然如此，官方的<a href="https://github.com/udacity/CarND-Term1-Starter-Kit/blob/master/environment-gpu.yml" target="_blank" rel="external">environment-gpu.yml</a>仍具有重要参考价值。</p>
<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><p>OS: Linux Mint 18.2<br>GPU: NVIDIA GeForce GTX 1080 Ti</p>
<h2 id="建立新环境"><a href="#建立新环境" class="headerlink" title="建立新环境"></a>建立新环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda create -n carnd-term1 python=3</div></pre></td></tr></table></figure>
<h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conda install numpy matplotlib jupyter opencv pillow scikit-learn scikit-image scipy h5py flask-socketio seaborn pandas pyqt keras-gpu</div><div class="line">pip install eventlet imageio moviepy</div></pre></td></tr></table></figure>
<p>注意这里由于网络不畅，menpo通道的opencv3下载时经常掉线。装tuna源的opencv替代。所有包默认最新版，keras选gpu版会自动装上tensorflow-gpu及cuda、cudnn等。</p>
<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>直接跑<a href="https://github.com/udacity/CarND-Term1-Starter-Kit-Test" target="_blank" rel="external">测试程序</a>会出现以下报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ImportError: libopenblasp-r0-39a31c03.2.18.so: cannot open shared object file: No such file or directory</div><div class="line">ImportError: Importing the multiarray numpy extension module failed.</div><div class="line">Most likely you are trying to import a failed build of numpy.</div></pre></td></tr></table></figure></p>
<p>走了些mkl的弯路后发现解决方法简单粗暴，忽略conda已装的numpy，然后用pip装最新版numpy即可解决问题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --ignore-installed numpy</div></pre></td></tr></table></figure></p>
<h2 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h2><p>在测试notebook里直接执行以下代码下载安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import imageio</div><div class="line">imageio.plugins.ffmpeg.download()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一学期项目主要用到python，opencv，tensorflow等，课程中提供的一键安装配置文件中各组件的版本太旧，再加上国内特殊网络环境的限制，故默认搭建方案并不适用。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="udacity" scheme="https://majunyi.top/tags/udacity/"/>
    
      <category term="engineering" scheme="https://majunyi.top/tags/engineering/"/>
    
  </entry>
  
  <entry>
    <title>利用树莓派DIY运动检测监控</title>
    <link href="https://majunyi.top/2017/04/22/rpi-cctv-motion/"/>
    <id>https://majunyi.top/2017/04/22/rpi-cctv-motion/</id>
    <published>2017-04-22T02:38:56.000Z</published>
    <updated>2017-04-22T04:36:48.091Z</updated>
    
    <content type="html"><![CDATA[<p>出门在外，难免担心有贼入窃。恰好手头上有闲置的树莓派一件，加上摄像头配合motion可以搭一套带运动检测的监控系统，设置好后若检测到异常可以自动将短片，图像发送到指定邮箱。手机收到邮件提醒可以远程连上摄像头查看情况。即便监控被破坏，由于图像和短片已发送至邮件服务器，仍可用于取证。</p>
<a id="more"></a>
<h2 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h2><ol>
<li><a href="https://www.raspberrypi.org/products/" target="_blank" rel="external">树莓派Raspberry Pi 3</a></li>
<li><a href="http://www.waveshare.com/rpi-ir-cut-camera.htm" target="_blank" rel="external">RPi IR-CUT Camera</a></li>
</ol>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="启用摄像头"><a href="#启用摄像头" class="headerlink" title="启用摄像头"></a>启用摄像头</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/modules</div></pre></td></tr></table></figure>
<p>添加这一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bcm2835-v4l2</div></pre></td></tr></table></figure></p>
<p>重启后测试摄像头<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">raspistill -o image.jpg -t 10000     <span class="comment">#test camera</span></div></pre></td></tr></table></figure></p>
<h3 id="安装motionEye"><a href="#安装motionEye" class="headerlink" title="安装motionEye"></a>安装motionEye</h3><p>核心软件是<a href="http://www.lavrsen.dk/foswiki/bin/view/Motion/WebHome" target="_blank" rel="external">Motion</a>，我以前就是用它配合Mutt来实现前言的功能的，但配置稍麻烦，且自带的远程管理界面略简单。后来发现<a href="https://github.com/ccrisan/motioneye/wiki" target="_blank" rel="external">motionEye</a>，是用python写的Motion前端，十分好用。</p>
<h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/ccrisan/motioneye/wiki/precompiled/ffmpeg_3.1.1-1_armhf.deb</div><div class="line">sudo dpkg -i ffmpeg_3.1.1-1_armhf.deb</div><div class="line"><span class="comment">#apt-get remove libavcodec-extra-56 libavformat56 libavresample2 libavutil54</span></div><div class="line">sudo apt-get install python-pip python-dev curl libssl-dev libcurl4-openssl-dev libjpeg-dev libx264-142 libavcodec56 libavformat56 libmysqlclient18 libswscale3 libpq5 v4l-utils</div><div class="line">wget https://github.com/Motion-Project/motion/releases/download/release-4.0.1/pi_jessie_motion_4.0.1-1_armhf.deb</div><div class="line">sudo dpkg -i pi_jessie_motion_4.0.1-1_armhf.deb</div></pre></td></tr></table></figure>
<h4 id="更改pip源为国内aliyun镜像"><a href="#更改pip源为国内aliyun镜像" class="headerlink" title="更改pip源为国内aliyun镜像"></a>更改pip源为国内aliyun镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir ~/.pip</div><div class="line">nano ~/.pip/pip.conf</div></pre></td></tr></table></figure>
<p>添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[global]</div><div class="line">trusted-host =  mirrors.aliyun.com</div><div class="line">index-url = http://mirrors.aliyun.com/pypi/simple</div></pre></td></tr></table></figure></p>
<h4 id="安装motionEye-1"><a href="#安装motionEye-1" class="headerlink" title="安装motionEye"></a>安装motionEye</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo pip install motioneye</div><div class="line">sudo mkdir -p /etc/motioneye</div><div class="line">sudo cp /usr/<span class="built_in">local</span>/share/motioneye/extra/motioneye.conf.sample /etc/motioneye/motioneye.conf</div><div class="line"></div><div class="line">sudo cp /usr/<span class="built_in">local</span>/share/motioneye/extra/motioneye.systemd-unit-local /etc/systemd/system/motioneye.service</div><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo systemctl <span class="built_in">enable</span> motioneye          <span class="comment">#设为开机启动，可选</span></div><div class="line">sudo systemctl start motioneye</div></pre></td></tr></table></figure>
<h4 id="更新（可选）"><a href="#更新（可选）" class="headerlink" title="更新（可选）"></a>更新（可选）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo pip install motioneye --upgrade</div><div class="line">sudo systemctl restart motioneye</div></pre></td></tr></table></figure>
<h2 id="配置motionEye"><a href="#配置motionEye" class="headerlink" title="配置motionEye"></a>配置motionEye</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/motioneye/motioneye.conf</div></pre></td></tr></table></figure>
<p>更改端口（可选）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">port 8765</div><div class="line">motion_control_port 7999</div></pre></td></tr></table></figure></p>
<p>相关配置文件位置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/motion/motion.conf</div><div class="line">sudo nano /etc/motioneye/thread-1.conf</div></pre></td></tr></table></figure></p>
<h3 id="通过前端配置邮件提醒"><a href="#通过前端配置邮件提醒" class="headerlink" title="通过前端配置邮件提醒"></a>通过前端配置邮件提醒</h3><p>浏览器打开<br>localhost:8765<br>默认login: admin 密码为空<br>Advanced Settings ON<br>163邮件参数<br>163mail 25 non-TLS</p>
<h2 id="控制夜视开关"><a href="#控制夜视开关" class="headerlink" title="控制夜视开关"></a>控制夜视开关</h2><p>我选用的摄像头为微雪的RPi IR-CUT Camera，没有led，而是将原来控制led的端口作为夜视开关，官方给出的控制方案为<a href="http://www.waveshare.com/wiki/RPi_IR-CUT_Camera" target="_blank" rel="external">额外接一根线到摄像头模块</a><br><img src="http://www.waveshare.com/w/thumb.php?f=Rpi-ir-cut-camera-faq-4.jpg&amp;width=400" alt=""><br>但这种方案不仅占用了一个外置GPIO端口，还降低了可靠性，特别是摄像头距主控较远的情况。其实<a href="https://www.raspberrypi.org/forums/viewtopic.php?p=891836&amp;sid=66eeecc88aa73bcad4f1f4109bfe54d2#p891836" target="_blank" rel="external">6by9已经指出</a>可以通过GPIO 32 (A+之后，3之前的板子) 或GPIO 5 (树莓派1)来控制camera led。</p>
<h3 id="RPi2设置"><a href="#RPi2设置" class="headerlink" title="RPi2设置"></a>RPi2设置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /boot/config.txt</div></pre></td></tr></table></figure>
<p>添加以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">disable_camera_led=1</div></pre></td></tr></table></figure></p>
<p>编译cnv<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/mjysci/rpi-cam-night-vision-control</div><div class="line"><span class="built_in">cd</span> rpi-cam-night-vision-control</div><div class="line">gcc -Wall -o cnv cnv.c -lwiringPi</div></pre></td></tr></table></figure></p>
<p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnv</div></pre></td></tr></table></figure></p>
<h3 id="RPi3设置"><a href="#RPi3设置" class="headerlink" title="RPi3设置"></a>RPi3设置</h3><p>最新的rpi3内置GPIO有变动，disable_camera_led失效，由于是扩展GPIO，并不能直接控制。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/6by9/rpi3-gpiovirtbuf.git</div><div class="line"><span class="built_in">cd</span> rpi3-gpiovirtbuf</div><div class="line">make</div><div class="line">cp rpi3-gpiovirtbuf ~/bin/rpi3-gpiovirtbuf</div></pre></td></tr></table></figure></p>
<p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpi3-gpiovirtbuf s 134 1 #夜视模式关闭</div><div class="line">rpi3-gpiovirtbuf s 134 0 #夜视模式开启</div></pre></td></tr></table></figure></p>
<p>清空记录可以直接在前端操作，亦可通过rm实现<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm /var/lib/motioneye/Camera1/*.*</div></pre></td></tr></table></figure></p>
<h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>之前在rpi2按以上步骤没问题，但重新部署到rpi3时碰到refused to connect错误<br>查看服务状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl status motioneye.service <span class="_">-l</span></div></pre></td></tr></table></figure></p>
<p>不知何故安装时并未创建数据文件夹，手动建之<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /var/lib/motioneye</div></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/ccrisan/motioneye/wiki/Install-On-Raspbian" target="_blank" rel="external">motionEye wiki</a><br><a href="https://www.raspberrypi.org/forums/viewtopic.php?p=891836&amp;sid=66eeecc88aa73bcad4f1f4109bfe54d2#p891836" target="_blank" rel="external">Turning off camera LED</a><br><a href="https://www.raspberrypi.org/forums/viewtopic.php?f=43&amp;t=109137&amp;start=100#p989832" target="_blank" rel="external">Raw sensor access / CSI-2 receiver peripheral</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;出门在外，难免担心有贼入窃。恰好手头上有闲置的树莓派一件，加上摄像头配合motion可以搭一套带运动检测的监控系统，设置好后若检测到异常可以自动将短片，图像发送到指定邮箱。手机收到邮件提醒可以远程连上摄像头查看情况。即便监控被破坏，由于图像和短片已发送至邮件服务器，仍可用于取证。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="rpi" scheme="https://majunyi.top/tags/rpi/"/>
    
      <category term="motion" scheme="https://majunyi.top/tags/motion/"/>
    
  </entry>
  
  <entry>
    <title>通过proxifier配合代理安装GitHub Desktop</title>
    <link href="https://majunyi.top/2017/04/05/github-desktop/"/>
    <id>https://majunyi.top/2017/04/05/github-desktop/</id>
    <published>2017-04-05T02:41:32.000Z</published>
    <updated>2017-04-05T03:29:53.798Z</updated>
    
    <content type="html"><![CDATA[<p>手贱试了下<a href="https://desktop.github.com/" target="_blank" rel="external">GitHub Desktop</a>，结果GUI逻辑古怪，且功能不完善。Sublime Text + git bash的组合完爆之，遂卸载。不过解决蛋疼的在线安装模式的过程倒是值得记录下来。</p>
<p>GitHub Desktop用的是ClickOnce安装，程序又是放在amazon s3，由于众所周知的原因访问极不稳定，而ClickOnce并不能断点续传，所以在国内环境下总是安装失败。</p>
<p>因为机器还有别的程序在运行，不能使用全局代理，所以关键在于确定是哪个程序负责安装包的联网下载。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><a id="more"></a>
<ol>
<li>socks代理（比如SS）</li>
<li><a href="https://www.proxifier.com/" target="_blank" rel="external">proxifier</a></li>
</ol>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>代理设置略。</p>
<p>proxifer的操作很直观，不清楚可以参考官方文档，<a href="https://www.proxifier.com/documentation/v3/proxy.htm" target="_blank" rel="external">设置代理</a>，<a href="https://www.proxifier.com/documentation/v3/rules.htm" target="_blank" rel="external">添加规则</a></p>
<p>直接将安装包加入规则是行不通的，通过任务管理器的网络栏进行排序可获知安装包调用的是dfsvc.exe（ClickOnce），位于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%windir%\Microsoft.NET\Framework64\v4.0.30319\dfsvc.exe</div></pre></td></tr></table></figure></p>
<p>点击左上角Proxification Rules -&gt; Add<br>Name随意，如ClickOnce<br>点Browse选择dfsvc<br>Action选Proxy通道</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手贱试了下&lt;a href=&quot;https://desktop.github.com/&quot;&gt;GitHub Desktop&lt;/a&gt;，结果GUI逻辑古怪，且功能不完善。Sublime Text + git bash的组合完爆之，遂卸载。不过解决蛋疼的在线安装模式的过程倒是值得记录下来。&lt;/p&gt;
&lt;p&gt;GitHub Desktop用的是ClickOnce安装，程序又是放在amazon s3，由于众所周知的原因访问极不稳定，而ClickOnce并不能断点续传，所以在国内环境下总是安装失败。&lt;/p&gt;
&lt;p&gt;因为机器还有别的程序在运行，不能使用全局代理，所以关键在于确定是哪个程序负责安装包的联网下载。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="github" scheme="https://majunyi.top/tags/github/"/>
    
      <category term="proxy" scheme="https://majunyi.top/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>通过CSS高亮显示已访问链接</title>
    <link href="https://majunyi.top/2017/04/03/highlight-visited/"/>
    <id>https://majunyi.top/2017/04/03/highlight-visited/</id>
    <published>2017-04-02T23:18:07.000Z</published>
    <updated>2017-04-03T01:31:17.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>不少网站为了增加点击率通过CSS让已访问链接颜色不变，个别无节操门户网站甚至时不时改个标题让你以为是新文章，点进去发现已经看过。</p>
<a id="more"></a>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>最初的解决方案是安装<a href="https://chrome.google.com/webstore/detail/stylish-custom-themes-for/fjnbnpbmkenffdnngjfgmeleoegfcffe" target="_blank" rel="external">Stylish</a>，然后安装全局主题<a href="https://userstyles.org/styles/31267/global-dark-style-changes-everything-to-dark" target="_blank" rel="external">Global dark style</a>。</p>
<p>但用久了感觉这个主题适合夜晚使用，特别是阅读长文。其他情况下缺乏美感。</p>
<p>我主要是需要已访问链接高亮显示，于是选择了<a href="https://userstyles.org/styles/17357/red-visited-mark-visited-links-red-dm" target="_blank" rel="external">Red:visited</a>。不过默认的红色实在有点刺眼，我要其比未访问链接低调一些，记忆当中HTML标准的默认浅紫色就不错，完整的推荐设置<a href="https://www.w3.org/TR/html5/rendering.html#the-css-user-agent-style-sheet-and-presentational-hints" target="_blank" rel="external">在这里</a>。把主题里的#CC0000改成#551A8B即可。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>但新的问题产生了：对于背景颜色较深的网站，紫色很难看清，所以还要改下链接的背景色。最终结果如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>, <span class="selector-class">.fl</span><span class="selector-pseudo">:visited</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#551A8B</span> <span class="meta">!important</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span> <span class="meta">!important</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>如果背景是图片就无能为力了，去掉!important的话漏网之鱼又太多。想要解决的话应该是读取原有字体颜色，然后用lighten（依赖SASS）或者自己设计一个简单的数学变换来使其变浅。第一步需要javascript来实现。</p>
<p>去<a href="https://greasyfork.org" target="_blank" rel="external">GreasyFork</a>找了下没有实现类似功能的脚本，准备自己写一个却发现由于安全问题getComputedStyle并<a href="https://hacks.mozilla.org/2010/03/privacy-related-changes-coming-to-css-vistited/" target="_blank" rel="external">不能返回已访问链接颜色的正确结果</a>。这样就不能直接在循环内判断是否visited并根据原来颜色变浅了。js读取颜色后要另外再用CSS来判断并改色。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;不少网站为了增加点击率通过CSS让已访问链接颜色不变，个别无节操门户网站甚至时不时改个标题让你以为是新文章，点进去发现已经看过。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="css" scheme="https://majunyi.top/tags/css/"/>
    
      <category term="javascript" scheme="https://majunyi.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World! 静态博客Hexo部署于GitHub</title>
    <link href="https://majunyi.top/2017/04/02/hello-world/"/>
    <id>https://majunyi.top/2017/04/02/hello-world/</id>
    <published>2017-04-02T04:48:03.000Z</published>
    <updated>2018-11-19T08:00:26.102Z</updated>
    
    <content type="html"><![CDATA[<p>某网站注册不能用免费邮箱，一时冲动买了个域名来弄企业邮箱，另外也配合ngrok做内网穿透。只是这样的话有点浪费，于是顺便搭个静态博客来玩。</p>
<p>就需求来说，个人笔记以前用evernote就足够了，协作，共享都能实现，手机端操作十分方便。但私人笔记记录比较随意，注释都没几条，时间久了按步骤复现没问题，但背后原理难免有点模糊。发到博客上则能强制自己写仔细认真些。</p>
<h2 id="静态博客平台比较"><a href="#静态博客平台比较" class="headerlink" title="静态博客平台比较"></a>静态博客平台比较</h2><a id="more"></a>
<p>首先要按需求和前置技能选一个合适的平台，以下结论是google得来，除了Hexo另外两个并未亲自尝试，所以并不靠谱。以后有空会都试试再详细对比。</p>
<h3 id="Jekyll-JB-octopress"><a href="#Jekyll-JB-octopress" class="headerlink" title="Jekyll (JB, octopress)"></a>Jekyll (JB, octopress)</h3><p>+Github原生支持<br>+插件众多<br>-页面生成效率低<br>-ruby搭建环境对win不友好</p>
<h3 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h3><p>+GO编写，性能强大，页面生成效率极高<br>+依赖少，单个可执行文件搭建环境简单<br>-扩展性差</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>+Node.js，搭建环境相对简单<br>+扩展性强<br>+页面生成效率不及Hugo，但远超Jekyll<br>-社区偏小</p>
<p>由上可见性能和扩展性折中的Hexo更合适我个人使用。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a><a href="https://git-scm.com/download/" target="_blank" rel="external">Git</a></h3><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></h3><p>通过<a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a>安装nodejs。<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="external">win版nvm</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</div></pre></td></tr></table></figure></p>
<p>重启终端，然后安装node.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install stable</div></pre></td></tr></table></figure></p>
<p>若访问npmjs.org过慢，可换<a href="https://npm.taobao.org" target="_blank" rel="external">淘宝的源</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<h3 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a><a href="https://github.com/" target="_blank" rel="external">注册GitHub账号</a></h3><h3 id="配置SSH-keys"><a href="#配置SSH-keys" class="headerlink" title="配置SSH keys"></a>配置SSH keys</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.ssh</div></pre></td></tr></table></figure>
<p>若提示No such file or directory则需生成新Key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p>passphrase为每次提交项目输入的口令，若不想每次都输入的话可以<a href="https://help.github.com/articles/working-with-ssh-key-passphrases/" target="_blank" rel="external">通过ssh-agent来保存</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span></div><div class="line">touch .profile</div><div class="line">vim .profile	<span class="comment">#添加启动代码</span></div></pre></td></tr></table></figure></p>
<p>复制~\.ssh\id_rsa.pub的内容到<a href="https://github.com/settings/keys" target="_blank" rel="external">Github Settings</a><br>注：<a href="https://en.wikipedia.org/wiki/Environment_variable#Windows" target="_blank" rel="external">Windows环境变量</a><br>测试ssh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>设置用户信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"你的姓名"</span>	<span class="comment">#不是用户名</span></div><div class="line">$ git config --global user.email <span class="string">"你的邮箱"</span></div></pre></td></tr></table></figure></p>
<h2 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h2><p>安装hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<p>建立新文件夹，在bash中指向这个文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div><div class="line">$ npm install</div><div class="line">$ hexo generate		<span class="comment">#生成静态页面至public目录</span></div><div class="line">$ hexo server		<span class="comment">#http://localhost:4000 查看效果</span></div></pre></td></tr></table></figure></p>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>这里选用的是<a href="https://github.com/luuman/hexo-theme-spfk" target="_blank" rel="external">luuman的SPFK</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/luuman/hexo-theme-spfk.git themes/spfk</div></pre></td></tr></table></figure></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改以下文件</p>
<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="/_config.yml"></a>/_config.yml</h4><p>Site部分<br>url<br>theme: spfk<br>Deployment部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:username/username.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h4 id="themes-spfk-config-yml"><a href="#themes-spfk-config-yml" class="headerlink" title="/themes/spfk/_config.yml"></a>/themes/spfk/_config.yml</h4><p>启用youyan，注释掉另外两个<br>friends部分，添加友链<br>站长验证<br>流量统计</p>
<h4 id="themes-spfk-source-img"><a href="#themes-spfk-source-img" class="headerlink" title="/themes/spfk/source/img"></a>/themes/spfk/source/img</h4><p>替换favicon.png, head.jpg, alipayimg.jpg, wechatimg.jpg, apple-touch-icon.png</p>
<h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<h3 id="定制域名（可选）"><a href="#定制域名（可选）" class="headerlink" title="定制域名（可选）"></a>定制域名（可选）</h3><p>在public目录添加CNAME，内容为域名地址。<br>到DNS服务商处更改解析：添加A记录指向<a href="https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider" target="_blank" rel="external">185.199.108.153</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://hexo.io/docs/index.html" target="_blank" rel="external">Hexo Docs</a><br><a href="http://luuman.github.io/2015/12/27/Hexo/GitHubHexo/" target="_blank" rel="external">使用GitHub搭建Hexo博客</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;某网站注册不能用免费邮箱，一时冲动买了个域名来弄企业邮箱，另外也配合ngrok做内网穿透。只是这样的话有点浪费，于是顺便搭个静态博客来玩。&lt;/p&gt;
&lt;p&gt;就需求来说，个人笔记以前用evernote就足够了，协作，共享都能实现，手机端操作十分方便。但私人笔记记录比较随意，注释都没几条，时间久了按步骤复现没问题，但背后原理难免有点模糊。发到博客上则能强制自己写仔细认真些。&lt;/p&gt;
&lt;h2 id=&quot;静态博客平台比较&quot;&gt;&lt;a href=&quot;#静态博客平台比较&quot; class=&quot;headerlink&quot; title=&quot;静态博客平台比较&quot;&gt;&lt;/a&gt;静态博客平台比较&lt;/h2&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://majunyi.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="github" scheme="https://majunyi.top/tags/github/"/>
    
      <category term="hexo" scheme="https://majunyi.top/tags/hexo/"/>
    
  </entry>
  
</feed>
